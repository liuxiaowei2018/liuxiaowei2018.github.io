import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8048b864.js";const C=JSON.parse('{"title":"redis应用","description":"","frontmatter":{},"headers":[],"relativePath":"redis/redis应用.md","filePath":"redis/redis应用.md","lastUpdated":1719224116000}'),p={name:"redis/redis应用.md"},o=l(`<h1 id="redis应用" tabindex="-1">redis应用 <a class="header-anchor" href="#redis应用" aria-label="Permalink to &quot;redis应用&quot;">​</a></h1><h2 id="数据操作" tabindex="-1">数据操作 <a class="header-anchor" href="#数据操作" aria-label="Permalink to &quot;数据操作&quot;">​</a></h2><table><thead><tr><th><strong>操作类型</strong></th><th><strong>命令示例</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>显示所有的 key</td><td><code>KEYS *</code></td><td>显示所有的 key。支持通配符 <code>*</code>、前缀 <code>prefix*</code>、后缀 <code>*suffix</code>。</td></tr><tr><td>删除指定的 key</td><td><code>DEL key1 key2 key3 ...</code></td><td>删除一个或多个指定的 key。</td></tr><tr><td>判断 key 是否存在</td><td><code>EXISTS key</code></td><td>判断指定的 key 是否存在。</td></tr><tr><td>设置 key 的有效期</td><td><code>EXPIRE key 10</code></td><td>设置指定 key 的过期时间（单位：秒）。</td></tr><tr><td>显示 key 的有效期</td><td><code>TTL key</code></td><td>查看指定 key 的剩余过期时间。</td></tr><tr><td>清空当前数据库</td><td><code>FLUSHDB</code></td><td>清空当前选择的数据库。</td></tr><tr><td>清空所有数据库</td><td><code>FLUSHALL</code></td><td>清空所有 Redis 数据库。</td></tr><tr><td>切换数据库</td><td><code>SELECT dbNum</code></td><td>切换到指定的数据库。</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>字符串操作</strong></td><td></td><td></td></tr><tr><td>添加值</td><td><code>SET key value</code></td><td>设置指定 key 的值。</td></tr><tr><td>获取值</td><td><code>GET key</code></td><td>获取指定 key 的值。</td></tr><tr><td>批量操作</td><td><code>MSET key1 value1 [key2 value2, key3 value3]</code></td><td>批量设置多个 key 的值。</td></tr><tr><td>自增</td><td><code>INCR key</code></td><td>将 key 的值自增 1。</td></tr><tr><td>自减</td><td><code>DECR key</code></td><td>将 key 的值自减 1。</td></tr><tr><td>设置自增/自减增量</td><td><code>INCRBY key increment</code></td><td>设置 key 的增量为指定值。</td></tr><tr><td>设置带有效期的值</td><td><code>SETEX key second value</code></td><td>设置 key 的同时设置过期时间（单位：秒）。</td></tr><tr><td>仅当 key 不存在时设置</td><td><code>SETNX key value</code></td><td>如果 key 不存在则设置，否则不做任何操作。</td></tr><tr><td>追加值到现有值末尾</td><td><code>APPEND key value</code></td><td>将指定值追加到 key 原有值的末尾。</td></tr><tr><td>查看值的长度</td><td><code>STRLEN key</code></td><td>返回 key 所储存的字符串值的长度。</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>哈希操作</strong></td><td></td><td></td></tr><tr><td>存储数据到哈希表</td><td><code>HSET key field value</code></td><td>设置 key 指定的哈希集中指定字段的值。</td></tr><tr><td>获取哈希表中的值</td><td><code>HGET key field</code></td><td>获取 key 指定的哈希集中指定字段的值。</td></tr><tr><td>批量操作</td><td><code>HMSET key field value [field value......]</code></td><td>批量设置 key 的哈希字段及对应的值。</td></tr><tr><td>批量获取</td><td><code>HMGET key field [field......]</code></td><td>批量获取 key 的哈希字段对应的值。</td></tr><tr><td>自增</td><td><code>HINCRBY key field increment</code></td><td>为 key 的哈希字段自增指定值。</td></tr><tr><td>仅当不存在时设置</td><td><code>HSETNX key field value</code></td><td>当 key 的哈希字段不存在时设置值。</td></tr><tr><td>检测字段是否存在</td><td><code>HEXISTS key field</code></td><td>检测 key 的哈希字段是否存在。</td></tr><tr><td>删除指定字段</td><td><code>HDEL key field1, field2......</code></td><td>删除 key 的哈希字段。</td></tr><tr><td>获取所有字段及值</td><td><code>HGETALL key</code></td><td>获取 key 的所有哈希字段及对应的值。</td></tr><tr><td>获取所有字段</td><td><code>HKEYS key</code></td><td>获取 key 的所有哈希字段。</td></tr><tr><td>获取所有值</td><td><code>HVALS key</code></td><td>获取 key 的所有哈希字段对应的值。</td></tr><tr><td>获取字段个数</td><td><code>HLEN key</code></td><td>获取 key 的哈希字段数量。</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>列表操作</strong></td><td></td><td></td></tr><tr><td>头部添加数据</td><td><code>LPUSH key value [value.......]</code></td><td>将一个或多个值插入到列表头部。</td></tr><tr><td>尾部添加数据</td><td><code>RPUSH key value [value.......]</code></td><td>将一个或多个值插入到列表尾部。</td></tr><tr><td>判断列表是否存在</td><td><code>LPUSHX key value</code></td><td>当列表存在时，将值插入到列表头部。</td></tr><tr><td>修改列表指定位置的值</td><td><code>LSET key index value</code></td><td>修改列表中指定位置的值。</td></tr><tr><td>获取并删除列表头部值</td><td><code>LPOP key</code></td><td>移除并返回列表 key 的头元素。</td></tr><tr><td>获取并删除列表尾部值</td><td><code>RPOP key</code></td><td>移除并返回列表 key 的尾元素。</td></tr><tr><td>获取列表指定范围的值</td><td><code>LRANGE key start stop</code></td><td>获取列表 key 中指定范围内的所有值。</td></tr><tr><td>获取列表指定位置的值</td><td><code>LINDEX key index</code></td><td>获取列表 key 中指定位置的值。</td></tr><tr><td>获取列表长度</td><td><code>LLEN key</code></td><td>获取列表 key 的长度。</td></tr><tr><td>删除列表中的值</td><td><code>LREM key count value</code></td><td>从列表中删除与参数 value 相等的元素。</td></tr><tr><td>保留指定范围的值</td><td><code>LTRIM key start stop</code></td><td>对列表进行修剪，使其只包含指定范围的元素。</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>集合操作</strong></td><td></td><td></td></tr><tr><td>存储数据到集合</td><td><code>SADD key value [value ......]</code></td><td>向集合添加一个或多个成员。</td></tr><tr><td>获取集合中所有成员</td><td><code>SMEMBERS key</code></td><td>返回集合中的所有成员。</td></tr><tr><td>随机获取一个成员</td><td><code>SPOP key [count]</code></td><td>移除并返回集合中的一个或多个随机成员。</td></tr><tr><td>计算多个集合的交集</td><td><code>SINTER set1 set2 ...</code></td><td>返回给定所有集合的交集。</td></tr><tr><td>计算多个集合的并集</td><td><code>SUNION set1 set2 ...</code></td><td>返回给定所有集合的并集。</td></tr><tr><td>计算多个集合的差集</td><td><code>SDIFF set1 set2 ...</code></td><td>返回给定所有集合的差集。</td></tr><tr><td>删除集合中的成员</td><td><code>SREM key value [value.....]</code></td><td>移除集合中一个或多个成员。</td></tr><tr><td>检查成员是否存在</td><td><code>SISMEMBER key value</code></td><td>判断成员是否是集合 key 的成员。</td></tr><tr><td>有序集合操作</td><td></td><td></td></tr><tr><td>添加数据到有序集合</td><td><code>ZADD key score value [score value.....]</code></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数。</td></tr><tr><td>修改分值</td><td><code>ZINCRBY key increment value</code></td><td>为有序集 key 的成员 value 的分数加上增量 increment 。</td></tr><tr><td>获取成员的分值</td><td><code>ZSCORE key value</code></td><td>返回有序集 key 中，成员 value 的分数值。</td></tr><tr><td>获取成员个数</td><td><code>ZCARD key</code></td><td>返回有序集 key 的基数。</td></tr><tr><td>获取指定范围内的成员</td><td><code>ZRANGE key start stop [WITHSCORES]</code></td><td>返回有序集 key 中，指定区间内的成员。</td></tr><tr><td>获取指定范围内的成员</td><td><code>ZREVRANGE key start stop [WITHSCORES]</code></td><td>返回有序集 key 中，指定区间内的成员（从大到小排序）。</td></tr><tr><td>计算指定分数范围内的成员数</td><td><code>ZCOUNT key min max</code></td><td>返回有序集 key 中，分数介于 min 和 max 之间的成员数。</td></tr><tr><td>删除有序集合中的成员</td><td><code>ZREM key value</code></td><td>删除有序</td></tr></tbody></table><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><table><thead><tr><th><strong>数据结构</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>key-string</strong></td><td>一个 key 对应一个字符串，通常用来存储单个值。</td></tr><tr><td><strong>key-hash</strong></td><td>一个 key 对应一个哈希表（Map），通常用来存储对象数据。</td></tr><tr><td><strong>key-list</strong></td><td>一个 key 对应一个列表，通常用来实现栈和队列等数据结构。</td></tr><tr><td><strong>key-set</strong></td><td>一个 key 对应一个集合，用于实现数据的交集、并集、差集等操作。</td></tr><tr><td><strong>key-zset</strong></td><td>一个 key 对应一个有序集合，用于实现带分数的数据存储和排序。</td></tr><tr><td><strong>HyperLogLog</strong></td><td>用于基数统计和近似计数的数据结构。</td></tr><tr><td><strong>GEO</strong></td><td>用于存储地理位置信息的数据结构。<br>经度的范围在 (-180, 180]，纬度的范围 在(-90, 90]</td></tr><tr><td><strong>BIT</strong></td><td>用来存储位操作相关的数据，通常存储 byte[] 类型的字符串。</td></tr><tr><td><strong>HyperLogLog</strong></td><td></td></tr></tbody></table><p><strong>HyperLogLog</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#1.统计非重复的字符串个数(占用内存小,计算速度快)</span></span>
<span class="line"><span style="color:#B392F0;">PFADD</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span>
<span class="line"><span style="color:#B392F0;">PFCOUNT</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#1.统计非重复的字符串个数(占用内存小,计算速度快)</span></span>
<span class="line"><span style="color:#6F42C1;">PFADD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span>
<span class="line"><span style="color:#6F42C1;">PFCOUNT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span></span></code></pre></div><p>一个 key 关联了一个数据集合，同时对这个数据集合做统计。</p><ul><li>统计一个 <code>APP</code> 的日活、月活数；</li><li>统计一个页面的每天被多少个不同账户访问量（Unique Visitor，UV））；</li><li>统计用户每天搜索不同词条的个数；</li><li>统计注册 IP 数。</li></ul><p>通常情况下，我们面临的用户数量以及访问量都是巨大的，比如<strong>百万、千万级别的用户数量，或者千万级别、甚至亿级别</strong>的访问信息。</p><h2 id="布隆过滤器" tabindex="-1">布隆过滤器 <a class="header-anchor" href="#布隆过滤器" aria-label="Permalink to &quot;布隆过滤器&quot;">​</a></h2><p>布隆过滤器由n个Hash函数和一个二进制数组组成，主要用于判断一个元素是否在一个集合中</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301659431.png" alt="image-20221108151558574"></p><p><strong>1.初始状态</strong></p><p>一开始，二进制数组里是没有值的</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301659622.png" alt="image-20221108151626952"></p><p><strong>2.存储操作</strong></p><p>发来一个请求数据hello 对数据hello经过三次hash运算，分别得到三个值（假设1，3，5）。 在对应的二进制数组里，将下标为1，3，5的值置为1。</p><p><strong>3.查询操作</strong></p><p>发来一个请求数据hello 对数据hello经过三次hash运算，分别得到三个值（假设1，3，5）。 在二进制数组里，将下标为1，3，5的值取出来，如果都为1，则表示该数据已经存在。</p><p><strong>4.删除操作</strong></p><p>布隆过滤器很难进行删除操作。</p><p>如果hash2(hello)结果为3，hash2(world)结果也为3，那么如果删除了hello的值，就意味着world的值也会被其删除。</p><p><strong>5.误判率</strong></p><p>假设保存两个值，hello和world hello对应的index（也就是hash计算后的值）为1，3，5 world对应的index（也就是hash计算后的值）为2，4，6</p><p>而此时来了一个值java，对应的index为1，4，5，查询得出结果：exist(java) = true，但其实，java这个数据并不存在，这就会产生一定的误判。</p><p>Redis 官方提供的布隆过滤器到了 Redis 4.0 才正式登场。Redis 4.0 提供了插件功能，布隆过滤器作为一个插件加载到 Redis Server 中，给 Redis 提供了强大的布隆去重功能。</p><p>使用Docker进行安装</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redislabs/rebloom:latest</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 拉取镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6379</span><span style="color:#9ECBFF;">:6379</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redis-redisbloom</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redislabs/rebloom:latest</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#运行容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">redis-redisbloom</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span></span>
<span class="line"><span style="color:#B392F0;">redis-cli</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redislabs/rebloom:latest</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 拉取镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6379</span><span style="color:#032F62;">:6379</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-redisbloom</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redislabs/rebloom:latest</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#运行容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-redisbloom</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span></span>
<span class="line"><span style="color:#6F42C1;">redis-cli</span></span></code></pre></div><p><strong>使用</strong></p><p>布隆过滤器基本指令：</p><ul><li>bf.add 添加元素到布隆过滤器</li><li>bf.exists 判断元素是否在布隆过滤器</li><li>bf.madd 添加多个元素到布隆过滤器，bf.add 只能添加一个</li><li>bf.mexists 判断多个元素是否在布隆过滤器</li></ul><h2 id="慢查询日志配置" tabindex="-1">慢查询日志配置 <a class="header-anchor" href="#慢查询日志配置" aria-label="Permalink to &quot;慢查询日志配置&quot;">​</a></h2><p>慢查询日志是存放在Redis内存列表中的， 但是Redis并没有暴露这个列表的键， 而是通过一组命令来实现对慢查询日志的访问和管理。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">slowlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> [n] </span><span style="color:#6A737D;"># 获取慢查询日志 参数n可以指定条数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">slowlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> [n] </span><span style="color:#6A737D;"># 获取慢查询日志 参数n可以指定条数</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">127.0.0.1:6379&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">slowlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;">) 1) (</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 666</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) (</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 1456786500</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) (</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 11615</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">4</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;BGREWRITEAOF&quot;</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) 1) (</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 665</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) (</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 1456718400</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) (</span><span style="color:#B392F0;">integer</span><span style="color:#E1E4E8;">) 12006</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">4</span><span style="color:#E1E4E8;">) 1) </span><span style="color:#9ECBFF;">&quot;SETEX&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;video_info_200&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;300&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">127.0.0.1:6379&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">slowlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;">) 1) (</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 666</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) (</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 1456786500</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) (</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 11615</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">4</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;BGREWRITEAOF&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) 1) (</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 665</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) (</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 1456718400</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) (</span><span style="color:#6F42C1;">integer</span><span style="color:#24292E;">) 12006</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">4</span><span style="color:#24292E;">) 1) </span><span style="color:#032F62;">&quot;SETEX&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;video_info_200&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;300&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">4</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;2&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">...</span></span></code></pre></div><blockquote><p>每个慢查询日志有4个属性组成， 分别是：</p><ul><li>慢查询日志的标识id</li><li>发生时间戳</li><li>命令耗时</li><li>执行命令和参数。</li></ul></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 获取慢查询日志当前长度</span></span>
<span class="line"><span style="color:#B392F0;">slowlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">len</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 清理慢查询日志</span></span>
<span class="line"><span style="color:#B392F0;">slowlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reset</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 获取慢查询日志当前长度</span></span>
<span class="line"><span style="color:#6F42C1;">slowlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">len</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 清理慢查询日志</span></span>
<span class="line"><span style="color:#6F42C1;">slowlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reset</span></span></code></pre></div><p>慢查询功能可以有效地帮助我们找到Redis可能存在的瓶颈，但在实际使用过程中要注意以下几点：</p><ul><li><p>slowlog-max-len配置建议</p><p>线上建议调大慢查询列表，记录慢查询时Redis会对长命令做截断操作，并不会占用大量内存。增大慢查询列表可以减小慢查询被剔除的可能，例如线上可设置为1000以上。</p></li><li><p>slowlog-log-slower-than配置建议</p><p>默认值超过10毫秒判定为慢查询，需要根据Redis<a href="https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">并发</a>量调整该值。由于Redis采用单线程响应命令，对于高流量的场景，如果命令执行时间在1毫秒以上，那么Redis最多可支撑OPS不到1000。因此对于高OPS场景的Redis建议设置为1毫秒。</p></li><li><p>慢查询只记录命令执行时间，并不包括命令排队和网络传输时间</p><p>此客户端执行命令的时间会大于命令实际执行时间。因为命令执行排队机制，慢查询会导致其他命令级联阻塞，因此当客户端出现请求超时，需要检查该时间点是否有对应的慢查询，从而分析出是否为慢查询导致的命令级联阻塞。</p></li><li><p>慢查询日志可能会丢失</p><p>由于慢查询日志是一个先进先出的队列，也就是说如果慢查询比较多的情况下，可能会丢失部分慢查询命令。为了防止这种情况发生，可以定期执行slowget命令将慢查询日志持久化到其他存储中（例如MySQL），然后可以制作可视化界面进行查询，第13章介绍的Redis私有云CacheCloud提供了这样的功能，好的工具可以让问题排查事半功倍。</p></li></ul><h2 id="redis全局配置" tabindex="-1">redis全局配置 <a class="header-anchor" href="#redis全局配置" aria-label="Permalink to &quot;redis全局配置&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#基本配置</span></span>
<span class="line"><span style="color:#B392F0;">daemonize</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">是否以后台进程启动</span></span>
<span class="line"><span style="color:#B392F0;">databases</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">创建database的数量</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">默认选中的是database</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">900</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#刷新快照到硬盘中，必须满足两者要求才会触发，即900秒之后至少1个关键字发生变化。</span></span>
<span class="line"><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">#必须是300秒之后至少10个关键字发生变化。</span></span>
<span class="line"><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#必须是60秒之后至少10000个关键字发生变化。</span></span>
<span class="line"><span style="color:#B392F0;">stop-writes-on-bgsave-error</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yes</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#后台存储错误停止写。</span></span>
<span class="line"><span style="color:#B392F0;">rdbcompression</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yes</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#使用LZF压缩rdb文件。</span></span>
<span class="line"><span style="color:#B392F0;">rdbchecksum</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yes</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#存储和加载rdb文件时校验。</span></span>
<span class="line"><span style="color:#B392F0;">dbfilename</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dump.rdb</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#设置rdb文件名。</span></span>
<span class="line"><span style="color:#B392F0;">dir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#设置工作目录，rdb文件会写入该目录。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#主从配置</span></span>
<span class="line"><span style="color:#B392F0;">slaveof</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">masteri</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">masterpor</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">设为某台机器的从服务器</span></span>
<span class="line"><span style="color:#B392F0;">masterauth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">master-passwor</span><span style="color:#E1E4E8;">d</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">连接主服务器的密码</span></span>
<span class="line"><span style="color:#B392F0;">slave-serve-stale-data</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yes</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 当主从断开或正在复制中,从服务器是否应答</span></span>
<span class="line"><span style="color:#B392F0;">slave-read-only</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yes</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#从服务器只读</span></span>
<span class="line"><span style="color:#B392F0;">repl-ping-slave-period</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#从ping主的时间间隔,秒为单位</span></span>
<span class="line"><span style="color:#B392F0;">repl-timeout</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#主从超时时间(超时认为断线了),要比period大</span></span>
<span class="line"><span style="color:#B392F0;">slave-priority</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#如果master不能再正常工作，那么会在多个slave中，选择优先值最小的一个slave提升为master，优先值为0表示不能提升为master。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">repl-disable-tcp-nodelay</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#主端是否合并数据,大块发送给slave</span></span>
<span class="line"><span style="color:#B392F0;">slave-priority</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">从服务器的优先级,当主服挂了,会自动挑slave</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">priority最小的为主服</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#安全配置</span></span>
<span class="line"><span style="color:#B392F0;">requirepass</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foobared</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 需要密码</span></span>
<span class="line"><span style="color:#B392F0;">rename-command</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CONFIG</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b840fc02d524045429941cc15f59e41cb7be6c52</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#如果公共环境,可以重命名部分敏感命令 如config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#限制参数</span></span>
<span class="line"><span style="color:#B392F0;">maxclients</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#最大连接数</span></span>
<span class="line"><span style="color:#B392F0;">maxmemory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">byte</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#最大使用内存</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">maxmemory-policy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volatile-lru</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#内存到极限后的处理</span></span>
<span class="line"><span style="color:#B392F0;">volatile-lru</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">LRU算法删除过期key</span></span>
<span class="line"><span style="color:#B392F0;">allkeys-lru</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">LRU算法删除key</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">不区分过不过期</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">volatile-random</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">随机删除过期key</span></span>
<span class="line"><span style="color:#B392F0;">allkeys-random</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">随机删除key</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">不区分过不过期</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">volatile-ttl</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">删除快过期的key</span></span>
<span class="line"><span style="color:#B392F0;">noeviction</span><span style="color:#E1E4E8;"> -</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">不删除,返回错误信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#解释 LRU ttl都是近似算法,可以选N个,再比较最适宜T踢出的数据</span></span>
<span class="line"><span style="color:#B392F0;">maxmemory-samples</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#日志模式</span></span>
<span class="line"><span style="color:#B392F0;">appendonly</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#是否仅要日志</span></span>
<span class="line"><span style="color:#B392F0;">appendfsync</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 系统缓冲,统一写,速度快</span></span>
<span class="line"><span style="color:#B392F0;">appendfsync</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">always</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 系统不缓冲,直接写,慢,丢失数据少</span></span>
<span class="line"><span style="color:#B392F0;">appendfsync</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">everysec</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#折衷,每秒写1次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">no-appendfsync-on-rewrite</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#为yes,则其他线程的数据放内存里,合并写入(速度快,容易丢失的多)</span></span>
<span class="line"><span style="color:#B392F0;">auto-AOF-rewrite-percentage</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">当前aof文件是上次重写是大N%时重写</span></span>
<span class="line"><span style="color:#B392F0;">auto-AOF-rewrite-min-size</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">64</span><span style="color:#9ECBFF;">mb</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aof重写至少要达到的大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#慢查询</span></span>
<span class="line"><span style="color:#B392F0;">slowlog-log-slower-than</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#记录响应时间大于10000微秒的慢查询</span></span>
<span class="line"><span style="color:#B392F0;">slowlog-max-len</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># 最多记录128条</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#服务端命令</span></span>
<span class="line"><span style="color:#F97583;">time</span><span style="color:#E1E4E8;">  返回时间戳+微秒</span></span>
<span class="line"><span style="color:#B392F0;">dbsize</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回key的数量</span></span>
<span class="line"><span style="color:#B392F0;">bgrewriteaof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">重写aof</span></span>
<span class="line"><span style="color:#B392F0;">bgsave</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">后台开启子进程dump数据</span></span>
<span class="line"><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">阻塞进程dump数据</span></span>
<span class="line"><span style="color:#B392F0;">lastsave</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">slaveof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">host</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">port</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">做host</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">port的从服务器</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">数据清空,复制新主内容</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">slaveof</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">one</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">变成主服务器</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">原数据不丢失,一般用于主服失败后</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">flushdb</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">清空当前数据库的所有数据</span></span>
<span class="line"><span style="color:#B392F0;">flushall</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">清空所有数据库的所有数据</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">误用了怎么办?</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;"> [save/nosave] 关闭服务器,保存数据,修改AOF(</span><span style="color:#B392F0;">如果设置</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">slowlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">获取慢查询日志</span></span>
<span class="line"><span style="color:#B392F0;">slowlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">len</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">获取慢查询日志条数</span></span>
<span class="line"><span style="color:#B392F0;">slowlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reset</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">清空慢查询</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">选项</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">支持*通配</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">选项</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">值</span></span>
<span class="line"><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rewrite</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">把值写到配置文件</span></span>
<span class="line"><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">restart</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">更新info命令的信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#调试选项,看一个key的情况</span></span>
<span class="line"><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">segfault</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#模拟段错误,让服务器崩溃</span></span>
<span class="line"><span style="color:#B392F0;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> (refcount</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">encoding</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">idletime</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">monitor</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#打开控制台,观察命令(调试用)</span></span>
<span class="line"><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#列出所有连接</span></span>
<span class="line"><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kill</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#杀死某个连接  CLIENT KILL 127.0.0.1:43501</span></span>
<span class="line"><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">getname</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#获取连接的名称 默认nil</span></span>
<span class="line"><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setname</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;名称&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#设置连接名称,便于调试</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#连接命令</span></span>
<span class="line"><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">密码</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#密码登陆(如果有密码)</span></span>
<span class="line"><span style="color:#B392F0;">ping</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#测试服务器是否可用</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;some content&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#测试服务器是否正常交互</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> 0/1/2... </span><span style="color:#6A737D;">#选择数据库</span></span>
<span class="line"><span style="color:#B392F0;">quit</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#退出连接</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#基本配置</span></span>
<span class="line"><span style="color:#6F42C1;">daemonize</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#032F62;">是否以后台进程启动</span></span>
<span class="line"><span style="color:#6F42C1;">databases</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#032F62;">创建database的数量</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">默认选中的是database</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">900</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#刷新快照到硬盘中，必须满足两者要求才会触发，即900秒之后至少1个关键字发生变化。</span></span>
<span class="line"><span style="color:#6F42C1;">save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">300</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#必须是300秒之后至少10个关键字发生变化。</span></span>
<span class="line"><span style="color:#6F42C1;">save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#必须是60秒之后至少10000个关键字发生变化。</span></span>
<span class="line"><span style="color:#6F42C1;">stop-writes-on-bgsave-error</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yes</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#后台存储错误停止写。</span></span>
<span class="line"><span style="color:#6F42C1;">rdbcompression</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yes</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#使用LZF压缩rdb文件。</span></span>
<span class="line"><span style="color:#6F42C1;">rdbchecksum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yes</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#存储和加载rdb文件时校验。</span></span>
<span class="line"><span style="color:#6F42C1;">dbfilename</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dump.rdb</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#设置rdb文件名。</span></span>
<span class="line"><span style="color:#6F42C1;">dir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#设置工作目录，rdb文件会写入该目录。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#主从配置</span></span>
<span class="line"><span style="color:#6F42C1;">slaveof</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">masteri</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">masterpor</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">设为某台机器的从服务器</span></span>
<span class="line"><span style="color:#6F42C1;">masterauth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">master-passwor</span><span style="color:#24292E;">d</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">   </span><span style="color:#032F62;">连接主服务器的密码</span></span>
<span class="line"><span style="color:#6F42C1;">slave-serve-stale-data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yes</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 当主从断开或正在复制中,从服务器是否应答</span></span>
<span class="line"><span style="color:#6F42C1;">slave-read-only</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yes</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#从服务器只读</span></span>
<span class="line"><span style="color:#6F42C1;">repl-ping-slave-period</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#从ping主的时间间隔,秒为单位</span></span>
<span class="line"><span style="color:#6F42C1;">repl-timeout</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#主从超时时间(超时认为断线了),要比period大</span></span>
<span class="line"><span style="color:#6F42C1;">slave-priority</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">#如果master不能再正常工作，那么会在多个slave中，选择优先值最小的一个slave提升为master，优先值为0表示不能提升为master。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">repl-disable-tcp-nodelay</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#主端是否合并数据,大块发送给slave</span></span>
<span class="line"><span style="color:#6F42C1;">slave-priority</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#032F62;">从服务器的优先级,当主服挂了,会自动挑slave</span><span style="color:#24292E;"> </span><span style="color:#032F62;">priority最小的为主服</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#安全配置</span></span>
<span class="line"><span style="color:#6F42C1;">requirepass</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foobared</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 需要密码</span></span>
<span class="line"><span style="color:#6F42C1;">rename-command</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CONFIG</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b840fc02d524045429941cc15f59e41cb7be6c52</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#如果公共环境,可以重命名部分敏感命令 如config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#限制参数</span></span>
<span class="line"><span style="color:#6F42C1;">maxclients</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#最大连接数</span></span>
<span class="line"><span style="color:#6F42C1;">maxmemory</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">byte</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#最大使用内存</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">maxmemory-policy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volatile-lru</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#内存到极限后的处理</span></span>
<span class="line"><span style="color:#6F42C1;">volatile-lru</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">LRU算法删除过期key</span></span>
<span class="line"><span style="color:#6F42C1;">allkeys-lru</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">LRU算法删除key</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">不区分过不过期</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">volatile-random</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">随机删除过期key</span></span>
<span class="line"><span style="color:#6F42C1;">allkeys-random</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">随机删除key</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">不区分过不过期</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">volatile-ttl</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">删除快过期的key</span></span>
<span class="line"><span style="color:#6F42C1;">noeviction</span><span style="color:#24292E;"> -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">不删除,返回错误信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#解释 LRU ttl都是近似算法,可以选N个,再比较最适宜T踢出的数据</span></span>
<span class="line"><span style="color:#6F42C1;">maxmemory-samples</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#日志模式</span></span>
<span class="line"><span style="color:#6F42C1;">appendonly</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#是否仅要日志</span></span>
<span class="line"><span style="color:#6F42C1;">appendfsync</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 系统缓冲,统一写,速度快</span></span>
<span class="line"><span style="color:#6F42C1;">appendfsync</span><span style="color:#24292E;"> </span><span style="color:#032F62;">always</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 系统不缓冲,直接写,慢,丢失数据少</span></span>
<span class="line"><span style="color:#6F42C1;">appendfsync</span><span style="color:#24292E;"> </span><span style="color:#032F62;">everysec</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#折衷,每秒写1次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">no-appendfsync-on-rewrite</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#为yes,则其他线程的数据放内存里,合并写入(速度快,容易丢失的多)</span></span>
<span class="line"><span style="color:#6F42C1;">auto-AOF-rewrite-percentage</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#032F62;">当前aof文件是上次重写是大N%时重写</span></span>
<span class="line"><span style="color:#6F42C1;">auto-AOF-rewrite-min-size</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#032F62;">mb</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aof重写至少要达到的大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#慢查询</span></span>
<span class="line"><span style="color:#6F42C1;">slowlog-log-slower-than</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#记录响应时间大于10000微秒的慢查询</span></span>
<span class="line"><span style="color:#6F42C1;">slowlog-max-len</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># 最多记录128条</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#服务端命令</span></span>
<span class="line"><span style="color:#D73A49;">time</span><span style="color:#24292E;">  返回时间戳+微秒</span></span>
<span class="line"><span style="color:#6F42C1;">dbsize</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回key的数量</span></span>
<span class="line"><span style="color:#6F42C1;">bgrewriteaof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">重写aof</span></span>
<span class="line"><span style="color:#6F42C1;">bgsave</span><span style="color:#24292E;"> </span><span style="color:#032F62;">后台开启子进程dump数据</span></span>
<span class="line"><span style="color:#6F42C1;">save</span><span style="color:#24292E;"> </span><span style="color:#032F62;">阻塞进程dump数据</span></span>
<span class="line"><span style="color:#6F42C1;">lastsave</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">slaveof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">host</span><span style="color:#24292E;"> </span><span style="color:#032F62;">port</span><span style="color:#24292E;"> </span><span style="color:#032F62;">做host</span><span style="color:#24292E;"> </span><span style="color:#032F62;">port的从服务器</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">数据清空,复制新主内容</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">slaveof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">变成主服务器</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">原数据不丢失,一般用于主服失败后</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">flushdb</span><span style="color:#24292E;">  </span><span style="color:#032F62;">清空当前数据库的所有数据</span></span>
<span class="line"><span style="color:#6F42C1;">flushall</span><span style="color:#24292E;"> </span><span style="color:#032F62;">清空所有数据库的所有数据</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">误用了怎么办?</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;"> [save/nosave] 关闭服务器,保存数据,修改AOF(</span><span style="color:#6F42C1;">如果设置</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">slowlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">获取慢查询日志</span></span>
<span class="line"><span style="color:#6F42C1;">slowlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">len</span><span style="color:#24292E;"> </span><span style="color:#032F62;">获取慢查询日志条数</span></span>
<span class="line"><span style="color:#6F42C1;">slowlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">清空慢查询</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">info</span><span style="color:#24292E;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">选项</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">支持*通配</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">选项</span><span style="color:#24292E;"> </span><span style="color:#032F62;">值</span></span>
<span class="line"><span style="color:#6F42C1;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rewrite</span><span style="color:#24292E;"> </span><span style="color:#032F62;">把值写到配置文件</span></span>
<span class="line"><span style="color:#6F42C1;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restart</span><span style="color:#24292E;"> </span><span style="color:#032F62;">更新info命令的信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">debug</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#调试选项,看一个key的情况</span></span>
<span class="line"><span style="color:#6F42C1;">debug</span><span style="color:#24292E;"> </span><span style="color:#032F62;">segfault</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#模拟段错误,让服务器崩溃</span></span>
<span class="line"><span style="color:#6F42C1;">object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> (refcount</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">encoding</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">idletime</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">monitor</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#打开控制台,观察命令(调试用)</span></span>
<span class="line"><span style="color:#6F42C1;">client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#列出所有连接</span></span>
<span class="line"><span style="color:#6F42C1;">client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kill</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#杀死某个连接  CLIENT KILL 127.0.0.1:43501</span></span>
<span class="line"><span style="color:#6F42C1;">client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">getname</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#获取连接的名称 默认nil</span></span>
<span class="line"><span style="color:#6F42C1;">client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setname</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;名称&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置连接名称,便于调试</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#连接命令</span></span>
<span class="line"><span style="color:#6F42C1;">auth</span><span style="color:#24292E;"> </span><span style="color:#032F62;">密码</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#密码登陆(如果有密码)</span></span>
<span class="line"><span style="color:#6F42C1;">ping</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#测试服务器是否可用</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;some content&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#测试服务器是否正常交互</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> 0/1/2... </span><span style="color:#6A737D;">#选择数据库</span></span>
<span class="line"><span style="color:#6F42C1;">quit</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#退出连接</span></span></code></pre></div>`,42),e=[o];function t(c,r,y,E,d,i){return n(),a("div",null,e)}const B=s(p,[["render",t]]);export{C as __pageData,B as default};
