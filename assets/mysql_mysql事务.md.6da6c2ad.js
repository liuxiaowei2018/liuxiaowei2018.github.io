import{_ as a,o as n,c as l,Q as s,k as p}from"./chunks/framework.8048b864.js";const b=JSON.parse('{"title":"MySQL-事务","description":"","frontmatter":{},"headers":[],"relativePath":"mysql/mysql事务.md","filePath":"mysql/mysql事务.md","lastUpdated":1719224116000}'),e={name:"mysql/mysql事务.md"},o=s('<h1 id="mysql-事务" tabindex="-1">MySQL-事务 <a class="header-anchor" href="#mysql-事务" aria-label="Permalink to &quot;MySQL-事务&quot;">​</a></h1><blockquote><p>事务是指满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p></blockquote><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="事务特性" tabindex="-1">事务特性 <a class="header-anchor" href="#事务特性" aria-label="Permalink to &quot;事务特性&quot;">​</a></h3><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库的数据改变就是永久的。</li></ul><h3 id="事务隔离级别" tabindex="-1">事务隔离级别 <a class="header-anchor" href="#事务隔离级别" aria-label="Permalink to &quot;事务隔离级别&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">隔离级别</th><th>描述</th><th style="text-align:center;">脏读（不同事务下，当前事务可以读取到另外事务未提交的数据）</th><th style="text-align:center;">不可重复读（同一事务内多次读取同一数据集合，读取到的数据是不一样）</th><th style="text-align:center;">幻读（同一事务下，连续执行两次同样的 sql 语句可能返回不同的结果，第二次的 sql 语句可能会返回之前不存在的行。幻读是一种特殊的不可重复读问题。）</th></tr></thead><tbody><tr><td style="text-align:center;">未提交读 READ UNCOMMITTED</td><td>事务中的修改，即使没有提交，对其他事务也是可见的</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">提交读 READ COMMITTED</td><td>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其他事务是不可见的</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">可重复读 REPEATABLE READ</td><td>保证在同一个事务中多次读取同样数据的结果是一样的</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">可串行化 SERIALIZABLE</td><td>强制事务串行执行</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr></tbody></table><h3 id="事务处理日志" tabindex="-1">事务处理日志 <a class="header-anchor" href="#事务处理日志" aria-label="Permalink to &quot;事务处理日志&quot;">​</a></h3><h4 id="redo-log" tabindex="-1">redo log <a class="header-anchor" href="#redo-log" aria-label="Permalink to &quot;redo log&quot;">​</a></h4><p>ACID 的持久性是通过redo log 来保证的。</p><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。</p><p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file），前者是在内存中，而后者在磁盘中当事务提交之后会把所有修改信息都存到该日志文件中，用于刷新脏页到磁盘，发生错误时，进行数据恢复使用。</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301625372.png" alt="在这里插入图片描述"></p><h4 id="undo-log" tabindex="-1">undo log <a class="header-anchor" href="#undo-log" aria-label="Permalink to &quot;undo log&quot;">​</a></h4><p>回滚日志，用于记录数据被修改前的信息，作用包含2个：提供回滚和MVCC（多版本并发控制）。</p><p>undo log 和 redo log 记录物理日志不一样，它是逻辑日志。可以认为当delete 一条记录时，undo log 中会记录一条对应的insert 的记录，当update 一条记录时，它记录一条相对应相反的update 记录。当执行rollback 时，就可以从undo log 中逻辑记录读取到相应的内容并进行回滚。</p><p>undo log 销毁：undo log 在事务执行时，并不会立即删除undo log ，因为这些日志可能还用于MVCC 。</p><p>undo log 存储：undo log 采用段的方式进行管理记录。存放在rollback segment 回滚段中，内部包含了1024个undo log segment 。</p><p><code>undo log 保证事务的原子性，而undo log + redo log 保证事务的一致性。</code></p><h2 id="mvcc多版本并发控制" tabindex="-1">MVCC多版本并发控制 <a class="header-anchor" href="#mvcc多版本并发控制" aria-label="Permalink to &quot;MVCC多版本并发控制&quot;">​</a></h2><h3 id="当前读" tabindex="-1">当前读 <a class="header-anchor" href="#当前读" aria-label="Permalink to &quot;当前读&quot;">​</a></h3><p>读取的是当前记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。如：<code>select lock in share mode</code>，<code>select for update</code>，<code>update</code>，<code>insert</code>，<code>update</code>,<code>delete</code>（排他锁）都是一种当前读。</p><h3 id="快照读" tabindex="-1">快照读 <a class="header-anchor" href="#快照读" aria-label="Permalink to &quot;快照读&quot;">​</a></h3><p>简单的select(不加锁)就是快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</p><ul><li>RC 每次select，都生成快照读（因为每次都生成快照，所以会读到其他事务提交）。</li><li>RR 开启事务第一个select 语句才是快照读。</li><li>Serializable 快照读会退化为当前读。</li></ul><h3 id="mvcc隐藏字段" tabindex="-1">MVCC隐藏字段 <a class="header-anchor" href="#mvcc隐藏字段" aria-label="Permalink to &quot;MVCC隐藏字段&quot;">​</a></h3><p>Mulit-Version Concurrency Control 多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为sql 实现的MVCC 提供了一个非阻塞读功能。MVCC 的具体实现，还需要依赖于数据库记录中的三个隐式字段、unlog 日志 readview。</p><p>InnoDB 在创建表的时候会多创建2个字段，分别是<code>DB_TRX_ID</code>，<code>DB_ROLL_PTR</code>，<s><code>DB_ROW_ID</code></s>。</p><table><thead><tr><th style="text-align:center;">隐式字段</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">DB_TRX_ID</td><td style="text-align:center;">最近修改事务ID，记录插入这条记录或者最后修改该记录的事务ID</td></tr><tr><td style="text-align:center;">DB_ROLL_PTR</td><td style="text-align:center;">回滚指针，指向这条记录的上一个版本，用于配合undo log ,指向上一个版本</td></tr><tr><td style="text-align:center;">DB_ROW_ID</td><td style="text-align:center;">隐藏主键，如果表结果没有指定主键，将会生成该隐藏字段。</td></tr></tbody></table><h3 id="undo-log-版本链" tabindex="-1">undo log 版本链 <a class="header-anchor" href="#undo-log-版本链" aria-label="Permalink to &quot;undo log 版本链&quot;">​</a></h3><p>回滚日志，在insert update delete 的时候产生的便于数据回滚的日志。</p><p>当insert 的时候，产生的undo log 日志只在回滚时需要，在事务提交后，可被立即删除。</p><p>而update、delete 的时候产生的undo log 日志不仅在回滚是需要，在快照读时也需要，不会被立即删除。</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301626253.png" alt="在这里插入图片描述"></p><p>不同事务或者相同事务对同一条记录进行修改，会导致该记录的undo log 生成一条记录版本链表，链表的头部是最新的旧记录，尾部是最旧的记录。</p><h3 id="读视图" tabindex="-1">读视图 <a class="header-anchor" href="#读视图" aria-label="Permalink to &quot;读视图&quot;">​</a></h3><p>读视图是快照读SQL 执行时MVCC 提取数据的一句，记录并维护系统当前活跃的事务（未提交的）ID</p><p>read view 包括了四个核心字段：</p><table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">m_ids</td><td style="text-align:center;">当前活跃的事务ID集合</td></tr><tr><td style="text-align:center;">min_trx_id</td><td style="text-align:center;">最小活跃事务ID</td></tr><tr><td style="text-align:center;">max_trx_id</td><td style="text-align:center;">预分配事务ID，当前最大事务ID+1（事务ID是自增的）</td></tr><tr><td style="text-align:center;">creator_trx_id</td><td style="text-align:center;">Read View 创建者的事务ID</td></tr></tbody></table>',39),t=p("p",{cases:""},"$$ 版本链数据访问规则 \\begin",-1),c=s(`<ol><li>trx—id=creator—trx—id, &amp;可以访问该版本 (当前事务更改的)\\</li><li>trx—id &lt; min—trx—id, &amp;可以访问该版本（数据已经提交）\\</li><li>trx—id &gt; max—trx—id, &amp;不可以访问该版本（当前事务是在ReadView 生成之后开启的）\\</li><li>min—trx—id \\le trx—id \\le max—trx—id, &amp;如果trx—id不在m-ids中是可以访问该版本的（事务已经提交） \\end{cases} $$</li></ol><p>不同的事务隔离级别，生成的readview 的时机不同。</p><p>RC 每次都生成 readview ，RR 只在事务第一次执行快照读的时候生成readview，后续复用该readview。</p><h4 id="原理分析-rc" tabindex="-1">原理分析（RC） <a class="header-anchor" href="#原理分析-rc" aria-label="Permalink to &quot;原理分析（RC）&quot;">​</a></h4><p><strong>RC 每次都生成 readview 。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301626479.png" alt="在这里插入图片描述"></p><h4 id="原理分析-rr" tabindex="-1">原理分析（RR） <a class="header-anchor" href="#原理分析-rr" aria-label="Permalink to &quot;原理分析（RR）&quot;">​</a></h4><p><strong>事务在第一次执行快照读时生成ReadView，后续复用该ReadView。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301626509.png" alt="在这里插入图片描述"></p><p>MVCC 主要还是通过隐藏字段（事务id，回滚指针）、undo log 版本链，readview 实现，MVCC + 锁保证了事务的隔离性。</p><h2 id="事务失效场景" tabindex="-1">事务失效场景 <a class="header-anchor" href="#事务失效场景" aria-label="Permalink to &quot;事务失效场景&quot;">​</a></h2><h3 id="_1-访问权限问题" tabindex="-1">1.访问权限问题 <a class="header-anchor" href="#_1-访问权限问题" aria-label="Permalink to &quot;1.访问权限问题&quot;">​</a></h3><p>java的访问权限主要有四种：private、default、protected、public，它们的权限从左到右，依次变大。</p><p>spring要求被代理方法必须是<code>public</code>的</p><p><code>AbstractFallbackTransactionAttributeSource</code>类的<code>computeTransactionAttribute</code>方法中有个判断，如果目标方法不是public，则<code>TransactionAttribute</code>返回null，即不支持事务。</p><h3 id="_2-方法用final修饰" tabindex="-1">2. 方法用final修饰 <a class="header-anchor" href="#_2-方法用final修饰" aria-label="Permalink to &quot;2. 方法用final修饰&quot;">​</a></h3><p>事务方法定义成final会导致事务失效</p><p>spring事务底层使用了aop，也就是通过jdk动态代理或者cglib，帮我们生成了代理类，在代理类中实现的事务功能。</p><p>但如果某个方法用final修饰了，那么在它的代理类中，就无法重写该方法，而添加事务功能。</p><blockquote><p>注意：如果某个方法是static的，同样无法通过动态代理，变成事务方法。</p></blockquote><h3 id="_3-方法内部调用" tabindex="-1">3.方法内部调用 <a class="header-anchor" href="#_3-方法内部调用" aria-label="Permalink to &quot;3.方法内部调用&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(UserModel </span><span style="color:#FFAB70;">userModel</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        userMapper.</span><span style="color:#B392F0;">insertUser</span><span style="color:#E1E4E8;">(userModel);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateStatus</span><span style="color:#E1E4E8;">(userModel);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateStatus</span><span style="color:#E1E4E8;">(UserModel </span><span style="color:#FFAB70;">userModel</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doSameThing</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(UserModel </span><span style="color:#E36209;">userModel</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        userMapper.</span><span style="color:#6F42C1;">insertUser</span><span style="color:#24292E;">(userModel);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">updateStatus</span><span style="color:#24292E;">(userModel);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateStatus</span><span style="color:#24292E;">(UserModel </span><span style="color:#E36209;">userModel</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doSameThing</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Spring在扫描Bean的时候会自动为标注了@Transactional注解的类生成一个代理类（proxy）,当有注解的方法被调用的时候，实际上是代理类调用的，代理类在调用之前会开启事务，执行事务的操作，但是同类中的方法互相调用，相当于this.B()，此时的B方法并非是代理类调用，而是直接通过原有的Bean直接调用，所以注解会失效。</p><blockquote><p>解决方案：<strong>通过AopContent类</strong></p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Servcie</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceA</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">queryData1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">queryData2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((ServiceA)AopContext.</span><span style="color:#B392F0;">currentProxy</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">doSave</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">rollbackFor</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Exception.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSave</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addData1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateData2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Servcie</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceA</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">queryData1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">queryData2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ((ServiceA)AopContext.</span><span style="color:#6F42C1;">currentProxy</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">doSave</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">rollbackFor</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Exception.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSave</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addData1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">updateData2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_4-未被spring管理" tabindex="-1">4.未被spring管理 <a class="header-anchor" href="#_4-未被spring管理" aria-label="Permalink to &quot;4.未被spring管理&quot;">​</a></h3><p>使用spring事务的前提是：对象要被spring管理，需要创建bean实例。</p><p>通常情况下，我们通过@Controller、@Service、@Component、@Repository等注解，可以自动实现bean实例化和依赖注入的功能。</p><h3 id="_5-多线程调用" tabindex="-1">5.多线程调用 <a class="header-anchor" href="#_5-多线程调用" aria-label="Permalink to &quot;5.多线程调用&quot;">​</a></h3><p>在不同的线程，拿到的数据库连接肯定是不一样的，所以是不同的事务。</p><h3 id="_6-表不支持事务" tabindex="-1">6.表不支持事务 <a class="header-anchor" href="#_6-表不支持事务" aria-label="Permalink to &quot;6.表不支持事务&quot;">​</a></h3><p>myisam<code>不支持事务</code></p><p>innodb<code>支持事务</code></p><h3 id="_7-错误的传播特性" tabindex="-1">7.错误的传播特性 <a class="header-anchor" href="#_7-错误的传播特性" aria-label="Permalink to &quot;7.错误的传播特性&quot;">​</a></h3><p>使用<code>@Transactional</code>注解时，是可以指定<code>propagation</code>参数的。</p><p>该参数的作用是指定事务的传播特性，spring目前支持7种传播特性：</p><ul><li><code>REQUIRED</code> 如果当前上下文中存在事务，那么加入该事务，如果不存在事务，创建一个事务，这是默认的传播属性值。</li><li><code>SUPPORTS</code> 如果当前上下文存在事务，则支持事务加入事务，如果不存在事务，则使用非事务的方式执行。</li><li><code>MANDATORY</code> 如果当前上下文中存在事务，否则抛出异常。</li><li><code>REQUIRES_NEW</code> 每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。</li><li><code>NOT_SUPPORTED</code> 如果当前上下文中存在事务，则挂起当前事务，然后新的方法在没有事务的环境中执行。</li><li><code>NEVER</code> 如果当前上下文中存在事务，则抛出异常，否则在无事务环境上执行代码。</li><li><code>NESTED</code> 如果当前上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。</li></ul><p>注解<code>@Transactional</code>中Propagation属性值设置错误</p><p>只有这三种传播特性才会创建新事务：REQUIRED，REQUIRES_NEW，NESTED。</p><h3 id="_8-未抛出异常" tabindex="-1">8.未抛出异常 <a class="header-anchor" href="#_8-未抛出异常" aria-label="Permalink to &quot;8.未抛出异常&quot;">​</a></h3><p>业务代码中存在异常时，使用try…catch…语句块捕获，而catch语句块没有throw new RuntimeExecption异常</p><h3 id="_9-嵌套事务回滚超出预期" tabindex="-1">9.嵌套事务回滚超出预期 <a class="header-anchor" href="#_9-嵌套事务回滚超出预期" aria-label="Permalink to &quot;9.嵌套事务回滚超出预期&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RoleService roleService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(UserModel </span><span style="color:#FFAB70;">userModel</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        userMapper.</span><span style="color:#B392F0;">insertUser</span><span style="color:#E1E4E8;">(userModel);</span></span>
<span class="line"><span style="color:#E1E4E8;">        roleService.</span><span style="color:#B392F0;">doOtherThing</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoleService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">propagation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Propagation.NESTED)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doOtherThing</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;保存role表数据&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RoleService roleService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(UserModel </span><span style="color:#E36209;">userModel</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        userMapper.</span><span style="color:#6F42C1;">insertUser</span><span style="color:#24292E;">(userModel);</span></span>
<span class="line"><span style="color:#24292E;">        roleService.</span><span style="color:#6F42C1;">doOtherThing</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoleService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">propagation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Propagation.NESTED)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doOtherThing</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;保存role表数据&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用了嵌套的内部事务，原本是希望调用roleService.doOtherThing方法时，如果出现了异常，只回滚doOtherThing方法里的内容，不回滚 userMapper.insertUser里的内容，即回滚保存点。但事实是，insertUser也回滚了。</p><p>因为doOtherThing方法出现了异常，没有手动捕获，会继续往上抛，到外层add方法的代理方法中捕获了异常。所以，这种情况是直接回滚了整个事务，不只回滚单个保存点。</p><blockquote><p>解决方案：将内部嵌套事务放在try/catch中，并且不继续往上抛异常。这样就能保证，如果内部嵌套事务中出现异常，只回滚内部事务，而不影响外部事务。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Slf4j</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RoleService roleService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(UserModel </span><span style="color:#FFAB70;">userModel</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        userMapper.</span><span style="color:#B392F0;">insertUser</span><span style="color:#E1E4E8;">(userModel);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 嵌套事务 try/catch</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            roleService.</span><span style="color:#B392F0;">doOtherThing</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">(), e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Slf4j</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserMapper userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RoleService roleService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(UserModel </span><span style="color:#E36209;">userModel</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        userMapper.</span><span style="color:#6F42C1;">insertUser</span><span style="color:#24292E;">(userModel);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 嵌套事务 try/catch</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            roleService.</span><span style="color:#6F42C1;">doOtherThing</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">(), e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_10-大事务问题" tabindex="-1">10.大事务问题 <a class="header-anchor" href="#_10-大事务问题" aria-label="Permalink to &quot;10.大事务问题&quot;">​</a></h3><h4 id="_1-用编程式事务处理业务" tabindex="-1">1.用编程式事务处理业务 <a class="header-anchor" href="#_1-用编程式事务处理业务" aria-label="Permalink to &quot;1.用编程式事务处理业务&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TransactionTemplate transactionTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> User user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">queryData1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">queryData2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">((status) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addData1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateData2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Boolean.TRUE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TransactionTemplate transactionTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> User user) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">queryData1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">queryData2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">((status) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addData1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">updateData2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Boolean.TRUE;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TransactionTemplate，在它的execute方法中，就实现了事务的功能</p><p>相较于<code>@Transactional</code>注解声明式事务，我更建议大家使用，基于<code>TransactionTemplate</code>的编程式事务。主要原因如下：</p><ol><li>避免由于spring aop问题，导致事务失效的问题。</li><li>能够更小粒度的控制事务的范围，更直观。</li></ol><h4 id="_2-将查询方法放到事务外" tabindex="-1">2.将查询方法放到事务外 <a class="header-anchor" href="#_2-将查询方法放到事务外" aria-label="Permalink to &quot;2.将查询方法放到事务外&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TransactionTemplate transactionTemplate;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> User user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">queryData1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">queryData2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    transactionTemplate.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">((status) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addData1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateData2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Boolean.TRUE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TransactionTemplate transactionTemplate;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> User user) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">queryData1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">queryData2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    transactionTemplate.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">((status) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addData1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">updateData2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Boolean.TRUE;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Servcie</span></span>
<span class="line"><span style="color:#E1E4E8;">publicclass ServiceA {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(User user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">queryData1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">queryData2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((ServiceA)AopContext.</span><span style="color:#B392F0;">currentProxy</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">doSave</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">rollbackFor</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Exception.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSave</span><span style="color:#E1E4E8;">(User user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addData1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateData2</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Servcie</span></span>
<span class="line"><span style="color:#24292E;">publicclass ServiceA {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(User user) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">queryData1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">queryData2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ((ServiceA)AopContext.</span><span style="color:#6F42C1;">currentProxy</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">doSave</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">rollbackFor</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Exception.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSave</span><span style="color:#24292E;">(User user) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addData1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">updateData2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-事务中避免远程调用" tabindex="-1">3.事务中避免远程调用 <a class="header-anchor" href="#_3-事务中避免远程调用" aria-label="Permalink to &quot;3.事务中避免远程调用&quot;">​</a></h4><h4 id="_4-事务中避免一次性处理太多数据" tabindex="-1">4.事务中避免一次性处理太多数据 <a class="header-anchor" href="#_4-事务中避免一次性处理太多数据" aria-label="Permalink to &quot;4.事务中避免一次性处理太多数据&quot;">​</a></h4><p>分页处理，1000条数据，分50页，一次只处理20条数据，这样可以大大减少大事务的出现。</p><h4 id="_5-非事务执行" tabindex="-1">5.非事务执行 <a class="header-anchor" href="#_5-非事务执行" aria-label="Permalink to &quot;5.非事务执行&quot;">​</a></h4><h4 id="_6-异步处理" tabindex="-1">6.异步处理 <a class="header-anchor" href="#_6-异步处理" aria-label="Permalink to &quot;6.异步处理&quot;">​</a></h4>`,61),r=[o,t,c];function E(i,y,d,u,h,F){return n(),l("div",null,r)}const v=a(e,[["render",E]]);export{b as __pageData,v as default};
