import{_ as t,o as a,c as e,Q as s}from"./chunks/framework.8048b864.js";const b=JSON.parse('{"title":"开发环境配置","description":"","frontmatter":{},"headers":[],"relativePath":"笔记/dev.md","filePath":"笔记/dev.md","lastUpdated":1718961457000}'),d={name:"笔记/dev.md"},o=s(`<h1 id="开发环境配置" tabindex="-1">开发环境配置 <a class="header-anchor" href="#开发环境配置" aria-label="Permalink to &quot;开发环境配置&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1、idea">1、IDEA</a><ul><li><a href="#模板配置">模板配置</a></li><li><a href="#常用插件">常用插件</a></li><li><a href="#debug技巧">Debug技巧</a></li></ul></li><li><a href="#_2、vscode">2、VsCode</a><ul><li><a href="#常用插件-1">常用插件</a></li></ul></li><li><a href="#_3、maven">3、Maven</a></li><li><a href="#_4、git">4、Git</a></li></ul></nav><h2 id="_1、idea" tabindex="-1">1、IDEA <a class="header-anchor" href="#_1、idea" aria-label="Permalink to &quot;1、IDEA&quot;">​</a></h2><h3 id="模板配置" tabindex="-1">模板配置 <a class="header-anchor" href="#模板配置" aria-label="Permalink to &quot;模板配置&quot;">​</a></h3><h4 id="类模板" tabindex="-1">类模板 <a class="header-anchor" href="#类模板" aria-label="Permalink to &quot;类模板&quot;">​</a></h4><p>Editor--&gt;File and Code Templates--&gt;File Header</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/**</span></span>
<span class="line"><span style="color:#e1e4e8;"> * \${TODO} </span></span>
<span class="line"><span style="color:#e1e4e8;"> * @author TheWe1</span></span>
<span class="line"><span style="color:#e1e4e8;"> * @date \${YEAR}年\${MONTH}月\${DAY}日 \${TIME}</span></span>
<span class="line"><span style="color:#e1e4e8;"> * @Description \${TODO}</span></span>
<span class="line"><span style="color:#e1e4e8;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/**</span></span>
<span class="line"><span style="color:#24292e;"> * \${TODO} </span></span>
<span class="line"><span style="color:#24292e;"> * @author TheWe1</span></span>
<span class="line"><span style="color:#24292e;"> * @date \${YEAR}年\${MONTH}月\${DAY}日 \${TIME}</span></span>
<span class="line"><span style="color:#24292e;"> * @Description \${TODO}</span></span>
<span class="line"><span style="color:#24292e;">*/</span></span></code></pre></div><h3 id="常用插件" tabindex="-1">常用插件 <a class="header-anchor" href="#常用插件" aria-label="Permalink to &quot;常用插件&quot;">​</a></h3><p>根据您提供的插件和工具列表，整理如下表格，并为每个条目添加简要描述：</p><table><thead><tr><th><strong>插件/工具名称</strong></th><th><strong>描述</strong></th><th>引用</th></tr></thead><tbody><tr><td>Key Promoter X</td><td>提示您在 IntelliJ IDEA 中使用键盘快捷键而不是鼠标操作。</td><td></td></tr><tr><td>CodeGlance</td><td>在编辑器侧边栏显示代码地图和快速导航功能。</td><td>Y</td></tr><tr><td>SonarLint</td><td>集成 SonarQube 静态代码分析，实时检查代码质量和安全性问题。</td><td></td></tr><tr><td>GenerateO2O</td><td>生成代码以支持线上到线下（O2O）业务模式的转换。</td><td></td></tr><tr><td>.ignore</td><td>提供在项目中忽略特定文件和目录的支持，生成.gitignore文件。</td><td>Y</td></tr><tr><td>Save Actions</td><td>自动保存、格式化和优化代码的插件。</td><td>Y</td></tr><tr><td>arthsa idea</td><td>阿里巴巴开源的 Java 诊断工具 Arthas 的 IDEA 插件。</td><td>Y</td></tr><tr><td>ArthasHotSwap</td><td>Arthas 的热部署插件，支持在运行时动态修改 Java 类。</td><td></td></tr><tr><td>Alibaba Cloud Toolkit</td><td>阿里云开发工具包，提供与阿里云服务集成的功能和工具。</td><td></td></tr><tr><td>AllFormat</td><td>提供代码格式化和样式统一的功能，支持不同语言和文件类型。</td><td></td></tr><tr><td>VisualVM Launcher3</td><td>Java 虚拟机监控和分析工具 VisualVM 的插件版本。</td><td>Y</td></tr><tr><td>CamelCase</td><td>支持在代码中自动转换驼峰命名和下划线命名。</td><td>Y</td></tr><tr><td>Alibaba Guidelines</td><td>阿里巴巴编码规范插件，帮助开发者遵循阿里巴巴的编码规范。</td><td>Y</td></tr><tr><td>Grep Console</td><td>在控制台中过滤、高亮和分析输出信息的插件。</td><td>Y</td></tr><tr><td>SequenceDiagram</td><td>根据代码生成时序图的插件，支持多种代码语言。</td><td>Y</td></tr><tr><td>LeetCode Editor</td><td>集成 LeetCode 在 IDE 中刷题的插件，提供代码编辑和测试环境。</td><td></td></tr><tr><td>idea-yapi</td><td>集成 Yapi 接口管理平台的插件。</td><td></td></tr><tr><td>JUnit 5 Mockito code generator</td><td>自动生成 JUnit 5 和 Mockito 测试代码的插件。</td><td></td></tr><tr><td>activate-power-mode</td><td>给 IDE 添加激动人心的动画效果，增强编码体验。</td><td></td></tr><tr><td>Rainbow Brackets</td><td>根据括号的深度显示不同颜色，增强代码块的可读性。</td><td>Y</td></tr><tr><td>cyan Light Theme</td><td>提供清爽的青色主题，改变 IDE 的视觉外观。</td><td></td></tr><tr><td>stackoverflow</td><td>提供 Stack Overflow 搜索和浏览功能，帮助解决编程问题。</td><td></td></tr><tr><td>GsonFormatPlus</td><td>自动生成 Gson 相关的 Java 类和代码，简化 Gson 使用。</td><td></td></tr><tr><td>any-rule</td><td>提供多种代码规范检查和自动修复功能的插件。</td><td></td></tr><tr><td>Translation</td><td>提供代码注释和文档的翻译功能，支持多种语言。</td><td></td></tr><tr><td>MybatisLogFormat</td><td>格式化 MyBatis 输出的 SQL 日志的插件。</td><td></td></tr><tr><td>MybatisX</td><td>MyBatis 代码生成和 SQL 语句分析工具。</td><td></td></tr><tr><td>MyBatisCodeHelperPro</td><td>MyBatis 开发辅助工具，提供自动补全和查询优化功能。</td><td></td></tr><tr><td>Maven Helper</td><td>提供 Maven 项目管理和依赖查看的工具。</td><td>Y</td></tr><tr><td>Lombok</td><td>自动化生成 Java 代码中的样板代码，简化开发流程。</td><td>Y</td></tr><tr><td>Codota</td><td>提供智能代码建议和自动补全功能，基于大数据分析。</td><td></td></tr><tr><td>JRebel</td><td>提供 Java 热部署功能，无需重启应用即可更新代码。</td><td></td></tr><tr><td>Git Commit Template</td><td>提供 Git 提交消息模板和管理功能的插件。</td><td></td></tr><tr><td>IDEA MapStruct</td><td>提供 MapStruct 映射框架的支持和代码生成功能。</td><td></td></tr></tbody></table><h3 id="debug技巧" tabindex="-1">Debug技巧 <a class="header-anchor" href="#debug技巧" aria-label="Permalink to &quot;Debug技巧&quot;">​</a></h3><h4 id="配置自动提示" tabindex="-1">配置自动提示 <a class="header-anchor" href="#配置自动提示" aria-label="Permalink to &quot;配置自动提示&quot;">​</a></h4><p>IDE是通过读取配置信息的元数据而实现自动提示的，而元数据在目录<code>META-INF</code>中的<code>spring-configuration-metadata.json</code> 或者 <code>additional-spring-configuration-metadata.json</code></p><p>工程中添加以下jar包</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-configuration-processor&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">optional</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">optional</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-configuration-processor&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">optional</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">optional</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>搜索<code>Annotation Processor</code>并设置<code>Enable annotation processing</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405292159859.png" alt="image-20220406185340536"></p><p>项目在重新编译后就会自动生成<code>spring-configuration-metadata.json</code>文件，自定义的配置实现自动提示</p><h4 id="debug调试" tabindex="-1">Debug调试 <a class="header-anchor" href="#debug调试" aria-label="Permalink to &quot;Debug调试&quot;">​</a></h4><p>通过Force Return，即强制返回来避免后续的流程。</p><p>点击Force Return，弹出Return Value的窗口，强制<strong>返回方法值</strong>或者<strong>设置表达式</strong>，从而不再进行后续的流程。</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405292159015.png" alt="image-20220326125138697"></p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405292159279.png" alt="image-20220326125212669"></p><p>在调用栈方法上选择要回退的方法，右键选择<code>Drop Frame</code>，回退到该方法的上一个方法调用处</p><h5 id="多线程调试" tabindex="-1">多线程调试 <a class="header-anchor" href="#多线程调试" aria-label="Permalink to &quot;多线程调试&quot;">​</a></h5><p>IDEA在Debug时默认阻塞级别是ALL，会阻塞其它线程，只有在当前调试线程走完时才会走其它线程。可以在View Breakpoints里选择Thread，如下图，然后点击Make Default设置为默认选项。</p><p>切换线程，在下图中Frames的下拉列表里，可以切换当前的线程，如下我这里有两个Debug的线程，切换另外一个则进入另一个Debug的线程。</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405292159615.png" alt="image-20220326125726762"></p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405292159127.png" alt="image-20220326125930896"></p><blockquote><p><strong>断点处添加 log</strong></p></blockquote><p>在正常加断点的地方使用快捷键 <code>Shift + 鼠标左键</code>，就会弹出下面的内容</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405292159751.png" alt="image-20220326130701407"></p><p>勾选上 <code>Evaluate and log</code>, 并自定义你想查看的 log/变量, 这样以 Debug 模式运行程序（正常模式运行，不会打印这些 log）</p><p>可以勾选上面图片绿色框线的 <code>&quot;Breakpoint hit&quot; message</code> ---&gt;Breakpoint reached</p><p>更详细的信息，勾选上 <code>Stack trace</code> ---&gt;堆栈信息</p><blockquote><p><strong>字段断点</strong></p></blockquote><p>使用：</p><ol><li><p>在字段定义处鼠标左键添加断点（会出现「眼睛」的图标）</p></li><li><p>在「眼睛」图标上鼠标右键</p></li><li><p>在弹框中勾选上<code>Field access</code> 和<code>Field modification</code> 两个选项</p><p>如果修改字段值的方法比较多，也可以在 <code>Condition</code> 的地方定义断点进入条件</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405292159677.png" alt="image-20220326131101917"></p></li></ol><blockquote><p><strong>异常断点</strong></p></blockquote><p><code>Exception Breakpoints</code></p><p>当抛出异常时，在 catch 的地方打上断点，可以通过下图的几个位置获取栈顶异常类型</p><blockquote><p><strong>方法断点</strong></p></blockquote><p>在接口方法上添加断点（快捷键 <code>cmd+F8</code>/<code>ctrl+F8</code>）：</p><ol><li><p>鼠标左键在方法处点击断点（♦️形状）</p></li><li><p>断点上鼠标右键</p><p>当以 Debug 模式运行程序的时候，会自动进入实现类的方法（注意断点形状）</p></li></ol><h2 id="_2、vscode" tabindex="-1">2、VsCode <a class="header-anchor" href="#_2、vscode" aria-label="Permalink to &quot;2、VsCode&quot;">​</a></h2><h3 id="常用插件-1" tabindex="-1">常用插件 <a class="header-anchor" href="#常用插件-1" aria-label="Permalink to &quot;常用插件&quot;">​</a></h3><table><thead><tr><th><strong>插件名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Vetur</td><td>Vue.js 开发必备插件，提供语法高亮、智能感知、Emmet 支持以及代码格式化功能。</td></tr><tr><td>EsLint</td><td>JavaScript 和 TypeScript 的语法检查工具，用于代码风格和错误的静态分析和纠正。</td></tr><tr><td>Auto Close Tag</td><td>自动闭合 HTML/XML 标签的插件，在输入开始标签时自动补全对应的结束标签。</td></tr><tr><td>Auto Rename Tag</td><td>自动同步修改 HTML/XML 标签对的另一侧标签，确保标签闭合时的一致性。</td></tr><tr><td>JavaScript(ES6) code snippets</td><td>提供 ES6 语法的智能提示和快速输入，支持 JavaScript、TypeScript、JSX、Vue 等多种文件类型。</td></tr><tr><td>HTML CSS Support</td><td>提供在 HTML 标签中写 class 属性时的智能提示，显示当前项目所支持的样式类。</td></tr><tr><td>HTML Snippets</td><td>提供 HTML 快速自动补全的功能，加速编写 HTML 文件时的标签输入。</td></tr><tr><td>Open in browser</td><td>可以快速在浏览器中打开当前编辑的 HTML 文件或网页。</td></tr><tr><td>Live Server</td><td>以内置服务器的方式运行并实时更新静态和动态页面，支持本地开发和调试。</td></tr><tr><td>Chinese (Simplified) Language Pack for Visual Studio Code</td><td>Visual Studio Code 的简体中文语言包，提供界面和编辑器内容的中文化支持。</td></tr></tbody></table><h2 id="_3、maven" tabindex="-1">3、Maven <a class="header-anchor" href="#_3、maven" aria-label="Permalink to &quot;3、Maven&quot;">​</a></h2><table><thead><tr><th>标识</th><th>生命周期</th></tr></thead><tbody><tr><td>compile</td><td>缺省值，适用于所有阶段（测试运行，编译，运行，打包）</td></tr><tr><td>provided</td><td>类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet-api.jar；适用于（测试运行，编译）阶段</td></tr><tr><td>runtime</td><td>只在运行时使用，如 mysql的驱动jar，适用于（运行，测试运行）阶段</td></tr><tr><td>test</td><td>只在测试时使用，适用于（编译，测试运行）阶段，如 junit.jar</td></tr><tr><td>system</td><td>Maven不会在仓库中查找对应依赖，在本地磁盘目录中查找；适用于（编译，测试运行，运行）阶段</td></tr></tbody></table><table><thead><tr><th>标识</th><th>命令</th></tr></thead><tbody><tr><td>clean</td><td>删除 target 目录及内容</td></tr><tr><td>validate</td><td></td></tr><tr><td>compile</td><td>将 src/main/java 下的文件编译为 class 文件输出到 target目录下</td></tr><tr><td>test</td><td>执行src/test/java下的单元测试类</td></tr><tr><td>package</td><td>对于 java 工程执行 package 打成 jar 包，对于web 工程打成war包</td></tr><tr><td>verify</td><td></td></tr><tr><td>install</td><td>将 maven 打成 jar 包或 war 包发布到本地仓库</td></tr><tr><td>site</td><td>生成项目报告，站点，发布站点</td></tr><tr><td>depoly</td><td>将最终的包复制到远程的仓库</td></tr></tbody></table><blockquote><p>Maven依赖是如何查找的？</p></blockquote><p>当需要依赖时，会从仓库中取查找，优先顺序为：</p><p>本地仓库 &gt; 私服(如果配置了的话) &gt; 公共仓库(如果配置了的话) &gt; 中央仓库</p><blockquote><p>Maven如何手动打包?</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">mvn install:install-file </span></span>
<span class="line"><span style="color:#e1e4e8;">-Dfile=D:\\canal.client-1.1.0.jar </span></span>
<span class="line"><span style="color:#e1e4e8;">-DgroupId=com.alibaba.otter </span></span>
<span class="line"><span style="color:#e1e4e8;">-DartifactId=canal.client </span></span>
<span class="line"><span style="color:#e1e4e8;">-Dversion=1.1.0 </span></span>
<span class="line"><span style="color:#e1e4e8;">-Dpackaging=jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mvn install:install-file </span></span>
<span class="line"><span style="color:#24292e;">-Dfile=D:\\canal.client-1.1.0.jar </span></span>
<span class="line"><span style="color:#24292e;">-DgroupId=com.alibaba.otter </span></span>
<span class="line"><span style="color:#24292e;">-DartifactId=canal.client </span></span>
<span class="line"><span style="color:#24292e;">-Dversion=1.1.0 </span></span>
<span class="line"><span style="color:#24292e;">-Dpackaging=jar</span></span></code></pre></div><blockquote><p>maven仓库配置</p></blockquote><h2 id="_4、git" tabindex="-1">4、Git <a class="header-anchor" href="#_4、git" aria-label="Permalink to &quot;4、Git&quot;">​</a></h2><blockquote><p>git commit后，如何撤销commit ?</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git reset --soft HEAD^</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git reset --soft HEAD^</span></span></code></pre></div><blockquote><p>HEAD^ 表示上一个版本，即上一次的commit，也可以写成HEAD~1 如果进行两次的commit，想要都撤回，可以使用HEAD~2</p><p>--soft 不删除工作空间的改动代码 ，撤销commit，不撤销git add file --hard 删除工作空间的改动代码，撤销commit且撤销add</p></blockquote>`,60),n=[o];function l(r,p,i,c,g,h){return a(),e("div",null,n)}const m=t(d,[["render",l]]);export{b as __pageData,m as default};
