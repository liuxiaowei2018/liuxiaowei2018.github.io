import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8048b864.js";const g=JSON.parse('{"title":"Vavr","description":"","frontmatter":{},"headers":[],"relativePath":"zeleted/util/vavr.md","filePath":"zeleted/util/vavr.md","lastUpdated":1697176108000}'),p={name:"zeleted/util/vavr.md"},o=l(`<h1 id="vavr" tabindex="-1">Vavr <a class="header-anchor" href="#vavr" aria-label="Permalink to &quot;Vavr&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1-元组-tuple">1. 元组 ( Tuple )</a></li><li><a href="#_2-函数-function">2. 函数 ( Function )</a></li><li><a href="#_3-组合">3.组合</a></li><li><a href="#_4-option">4.Option</a></li><li><a href="#_5-either">5.Either</a></li><li><a href="#_6-try">6.Try</a></li><li><a href="#_7-lazy">7.Lazy</a></li></ul></nav><blockquote><p>官方文档：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.vavr&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;vavr&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;0.10.3&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.vavr&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;vavr&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;0.10.3&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></blockquote><h2 id="_1-元组-tuple" tabindex="-1">1. 元组 ( Tuple ) <a class="header-anchor" href="#_1-元组-tuple" aria-label="Permalink to &quot;1. 元组 ( Tuple )&quot;">​</a></h2><ul><li>可以放入多个不同参数的数据类型。弥补Java的函数只能返回一个值的缺陷（可以理解为就是一个特殊对象）。</li><li>不易放入多个变量，会导致代码不易阅读。</li></ul><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//原数组的</span></span>
<span class="line"><span style="color:#E1E4E8;">Tuple2&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; tuple2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Tuple.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//对Tuple2内部变量进行操作</span></span>
<span class="line"><span style="color:#E1E4E8;">Tuple2&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; updatedTuple2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tuple2.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toUpperCase, v </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//进行Tuple2转换为某个特定的变量</span></span>
<span class="line"><span style="color:#E1E4E8;">String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> updatedTuple2.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">((str, number) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">,str, number.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//原数组的</span></span>
<span class="line"><span style="color:#24292E;">Tuple2&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; tuple2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Tuple.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//对Tuple2内部变量进行操作</span></span>
<span class="line"><span style="color:#24292E;">Tuple2&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; updatedTuple2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tuple2.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toUpperCase, v </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//进行Tuple2转换为某个特定的变量</span></span>
<span class="line"><span style="color:#24292E;">String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> updatedTuple2.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">((str, number) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">,str, number.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span></code></pre></div></blockquote><h2 id="_2-函数-function" tabindex="-1">2. 函数 ( Function ) <a class="header-anchor" href="#_2-函数-function" aria-label="Permalink to &quot;2. 函数 ( Function )&quot;">​</a></h2><ul><li>Java 8 中只提供了接受一个参数的 Function 和接受 2 个参数的 BiFunction。</li><li>Vavr 提供了函数式接口 Function0、Function1 到 Function8，可以描述最多接受 8 个参数的函数。</li><li>需要抛出异常，可以使用对应的接口 CheckedFunction0、CheckedFunction1 到 CheckedFunction8。</li></ul><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.yuanxindong.fp.vavr.data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.vavr.Function3;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.vavr.Tuple;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.vavr.Tuple3;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.function.Function;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"> /**</span></span>
<span class="line"><span style="color:#6A737D;">  * 使用普通Java8函数function</span></span>
<span class="line"><span style="color:#6A737D;">  *</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">valueToBeOperated</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">function</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modifyTheValue</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">valueToBeOperated</span><span style="color:#E1E4E8;">, Function&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">function</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> newValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(valueToBeOperated);</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(newValue);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"> /**</span></span>
<span class="line"><span style="color:#6A737D;">  * 使用vavr函数</span></span>
<span class="line"><span style="color:#6A737D;">  *</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">valueToBeOperated</span><span style="color:#6A737D;"> tuple的方式传递函数</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">function</span><span style="color:#6A737D;"> 函数</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modifyTheValue2</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">     Tuple3&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">valueToBeOperated</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">     Function3&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">function</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 将tuple中的参数放入</span></span>
<span class="line"><span style="color:#E1E4E8;">   String newValue </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">       function.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(valueToBeOperated._1, valueToBeOperated._2, valueToBeOperated._3);</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(newValue);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> incr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> myNumber </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 通过传递函数进行操作这个MyNumber这个值</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">modifyTheValue</span><span style="color:#E1E4E8;">(myNumber, val </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> incr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   Tuple3&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Tuple.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 使用vavr函数进行计算 val1 + val2 + val3的字符传</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">modifyTheValue2</span><span style="color:#E1E4E8;">(value, (val1, val2, val3) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> val1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> val2 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> val3 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.yuanxindong.fp.vavr.data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.vavr.Function3;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.vavr.Tuple;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.vavr.Tuple3;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.function.Function;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"> /**</span></span>
<span class="line"><span style="color:#6A737D;">  * 使用普通Java8函数function</span></span>
<span class="line"><span style="color:#6A737D;">  *</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">valueToBeOperated</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">function</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyTheValue</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">valueToBeOperated</span><span style="color:#24292E;">, Function&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">function</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> newValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(valueToBeOperated);</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(newValue);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"> /**</span></span>
<span class="line"><span style="color:#6A737D;">  * 使用vavr函数</span></span>
<span class="line"><span style="color:#6A737D;">  *</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">valueToBeOperated</span><span style="color:#6A737D;"> tuple的方式传递函数</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">function</span><span style="color:#6A737D;"> 函数</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyTheValue2</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">     Tuple3&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">valueToBeOperated</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     Function3&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">function</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 将tuple中的参数放入</span></span>
<span class="line"><span style="color:#24292E;">   String newValue </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">       function.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(valueToBeOperated._1, valueToBeOperated._2, valueToBeOperated._3);</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(newValue);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> incr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> myNumber </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 通过传递函数进行操作这个MyNumber这个值</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">modifyTheValue</span><span style="color:#24292E;">(myNumber, val </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> incr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   Tuple3&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Tuple.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 使用vavr函数进行计算 val1 + val2 + val3的字符传</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">modifyTheValue2</span><span style="color:#24292E;">(value, (val1, val2, val3) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> val1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> val2 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> val3 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h2 id="_3-组合" tabindex="-1">3.组合 <a class="header-anchor" href="#_3-组合" aria-label="Permalink to &quot;3.组合&quot;">​</a></h2><ul><li>函数的组合指的是用一个函数的执行结果作为参数，来调用另外一个函数所得到的新函数。</li><li>andThen和compose的区别: <ul><li>前者是先执行function函数，在执行function里面的函数。后者反之。</li></ul></li></ul><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCombinationDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 定义函数</span></span>
<span class="line"><span style="color:#E1E4E8;">   Function3&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; function3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (v1, v2, v3) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> (v1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> v2) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> v3;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 使用andThen对函数中的值进行操作</span></span>
<span class="line"><span style="color:#E1E4E8;">   Function3&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; composed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function3.</span><span style="color:#B392F0;">andThen</span><span style="color:#E1E4E8;">(v </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 使用apply进行函数包装</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> composed.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 输出结果 900</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//另一种表达方式</span></span>
<span class="line"><span style="color:#E1E4E8;">   Function1&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; function1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toUpperCase;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//先通过函数将对象转换为字符串，在通过函数将这个数据进行再次操作</span></span>
<span class="line"><span style="color:#E1E4E8;">   Function1&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; toUpperCase </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function1.</span><span style="color:#B392F0;">compose</span><span style="color:#E1E4E8;">(Object</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toString);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//输入数组</span></span>
<span class="line"><span style="color:#E1E4E8;">   String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toUpperCase.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(List.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 输出结果[A, B]</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCombinationDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 定义函数</span></span>
<span class="line"><span style="color:#24292E;">   Function3&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; function3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (v1, v2, v3) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> (v1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> v2) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> v3;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 使用andThen对函数中的值进行操作</span></span>
<span class="line"><span style="color:#24292E;">   Function3&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; composed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function3.</span><span style="color:#6F42C1;">andThen</span><span style="color:#24292E;">(v </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 使用apply进行函数包装</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> composed.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 输出结果 900</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//另一种表达方式</span></span>
<span class="line"><span style="color:#24292E;">   Function1&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; function1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toUpperCase;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//先通过函数将对象转换为字符串，在通过函数将这个数据进行再次操作</span></span>
<span class="line"><span style="color:#24292E;">   Function1&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; toUpperCase </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function1.</span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">(Object</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toString);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//输入数组</span></span>
<span class="line"><span style="color:#24292E;">   String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toUpperCase.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(List.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 输出结果[A, B]</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h2 id="_4-option" tabindex="-1">4.Option <a class="header-anchor" href="#_4-option" aria-label="Permalink to &quot;4.Option&quot;">​</a></h2><ul><li>进行判空处理。</li><li>Vavr 中的 Option 与 Java 8 中的 Optional 是相似的。不过 Vavr 的 Option 是一个接口，有两个实现类 Option.Some 和 Option.None，分别对应有值和无值两种情况。Option 也支持常用的 map、flatMap 和 filter 等操作</li></ul><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptionDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// vavr 进行操作 vavr的方法相对于Java8的更多一些</span></span>
<span class="line"><span style="color:#E1E4E8;">   Option&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Option.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// vavr的几个函数</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] es </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">((a) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;e&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 使用Map对其进行</span></span>
<span class="line"><span style="color:#E1E4E8;">   Option&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">length);</span></span>
<span class="line"><span style="color:#E1E4E8;">   Option&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; integers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(v </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Option.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(v.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">   Integer result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> integers.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> integers.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// Java8的几个函数</span></span>
<span class="line"><span style="color:#E1E4E8;">   Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; yes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;YES&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; no </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> yes.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toString);</span></span>
<span class="line"><span style="color:#E1E4E8;">   String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> no.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> no.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;no,为null&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// vavr 进行操作 vavr的方法相对于Java8的更多一些</span></span>
<span class="line"><span style="color:#24292E;">   Option&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Option.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// vavr的几个函数</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] es </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">((a) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;e&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 使用Map对其进行</span></span>
<span class="line"><span style="color:#24292E;">   Option&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">length);</span></span>
<span class="line"><span style="color:#24292E;">   Option&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; integers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(v </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Option.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(v.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">   Integer result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> integers.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> integers.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// Java8的几个函数</span></span>
<span class="line"><span style="color:#24292E;">   Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; yes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;YES&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; no </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> yes.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toString);</span></span>
<span class="line"><span style="color:#24292E;">   String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> no.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> no.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;no,为null&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h2 id="_5-either" tabindex="-1">5.Either <a class="header-anchor" href="#_5-either" aria-label="Permalink to &quot;5.Either&quot;">​</a></h2><ul><li>Either 表示可能有两种不同类型的值，分别称为左值或右值。只能是其中的一种情况。</li><li>Either 通常用来表示成功或失败两种情况。惯例是把成功的值作为右值，而失败的值作为左值。</li><li>可以在 Either 上添加应用于左值或右值的计算。应用于右值的计算只有在 Either 包含右值时才生效，对左值也是同理。</li></ul><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.vavr.control.Either;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Random;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EitherDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Random random </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> randomMath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> random.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   Either&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; compute </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(compute);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   Either&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; eitherLeft </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">compute</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(str </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;输出&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> str).</span><span style="color:#B392F0;">left</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toEither</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(eitherLeft);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   Either&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; eitherRight </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">compute</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(str </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;输出&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> str).</span><span style="color:#B392F0;">right</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toEither</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(eitherRight);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Either&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">compute</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> randomMath </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Either.</span><span style="color:#B392F0;">left</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;随机数大于5&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Either.</span><span style="color:#B392F0;">right</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;随机数小于5&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.vavr.control.Either;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Random;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EitherDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Random random </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> randomMath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> random.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   Either&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; compute </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(compute);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   Either&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; eitherLeft </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">compute</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(str </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;输出&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str).</span><span style="color:#6F42C1;">left</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toEither</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(eitherLeft);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   Either&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; eitherRight </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">compute</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(str </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;输出&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str).</span><span style="color:#6F42C1;">right</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toEither</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(eitherRight);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Either&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">compute</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> randomMath </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Either.</span><span style="color:#6F42C1;">left</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;随机数大于5&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Either.</span><span style="color:#6F42C1;">right</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;随机数小于5&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h2 id="_6-try" tabindex="-1">6.Try <a class="header-anchor" href="#_6-try" aria-label="Permalink to &quot;6.Try&quot;">​</a></h2><ul><li>Try 用来表示一个可能产生异常的计算。</li><li>Try 接口有两个实现类，Try.Success 和 Try.Failure，分别表示成功和失败的情况。</li><li>Try.Success 封装了计算成功时的返回值，而 Try.Failure 则封装了计算失败时的 Throwable 对象。</li><li>Try 的实例可以从接口 CheckedFunction0、Callable、Runnable 或 Supplier 中创建。</li><li>Try 也提供了 map 和 filter 等方法。</li><li>Try 的 recover 方法，可以在出现错误时根据异常进行恢复。</li></ul><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.vavr.control.Try;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.Files;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.file.Paths;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.function.Consumer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TryDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//使用try进行捕获异常，且对异常进行恢复</span></span>
<span class="line"><span style="color:#E1E4E8;">       Try&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Try.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">recover</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//of里面是一个function function异常就会捕获</span></span>
<span class="line"><span style="color:#E1E4E8;">       Try&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; lines </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Try.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Files.</span><span style="color:#B392F0;">readAllLines</span><span style="color:#E1E4E8;">(Paths.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1.txt&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(list </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, list))</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#B392F0;">andThen</span><span style="color:#E1E4E8;">((Consumer</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//of里面是一个function</span></span>
<span class="line"><span style="color:#E1E4E8;">       Try&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; lineResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Try.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Files.</span><span style="color:#B392F0;">readAllLines</span><span style="color:#E1E4E8;">(Paths.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1.txt&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">               .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(list </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">, list)).</span><span style="color:#B392F0;">andThen</span><span style="color:#E1E4E8;">((Consumer</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> success </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lineResult.</span><span style="color:#B392F0;">isSuccess</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(lineResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.vavr.control.Try;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.Files;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.file.Paths;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.function.Consumer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TryDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//使用try进行捕获异常，且对异常进行恢复</span></span>
<span class="line"><span style="color:#24292E;">       Try&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Try.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">recover</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//of里面是一个function function异常就会捕获</span></span>
<span class="line"><span style="color:#24292E;">       Try&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lines </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Try.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">readAllLines</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1.txt&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(list </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, list))</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#6F42C1;">andThen</span><span style="color:#24292E;">((Consumer</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//of里面是一个function</span></span>
<span class="line"><span style="color:#24292E;">       Try&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lineResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Try.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">readAllLines</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1.txt&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(list </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">, list)).</span><span style="color:#6F42C1;">andThen</span><span style="color:#24292E;">((Consumer</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lineResult.</span><span style="color:#6F42C1;">isSuccess</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(lineResult);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h2 id="_7-lazy" tabindex="-1">7.Lazy <a class="header-anchor" href="#_7-lazy" aria-label="Permalink to &quot;7.Lazy&quot;">​</a></h2><ul><li>Lazy 表示的是一个延迟计算的值。</li><li>在第一次访问时才会进行求值操作，而且该值只会计算一次。之后的访问操作获取的是缓存的值。</li></ul><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.vavr.Lazy;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.math.BigInteger;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LazyDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//使用lazy将将值缓存到内存中，再次获取的时候可以直接获取</span></span>
<span class="line"><span style="color:#E1E4E8;">     Lazy&lt;</span><span style="color:#F97583;">BigInteger</span><span style="color:#E1E4E8;">&gt; lazy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Lazy.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">             BigInteger.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//判断是否已经求过值</span></span>
<span class="line"><span style="color:#E1E4E8;">     System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(lazy.</span><span style="color:#B392F0;">isEvaluated</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//获取lazy的值</span></span>
<span class="line"><span style="color:#E1E4E8;">     System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(lazy.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//判断是否有进行计算过</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(lazy.</span><span style="color:#B392F0;">isEvaluated</span><span style="color:#E1E4E8;">()){</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//将lazy进行map 再次求绝对值</span></span>
<span class="line"><span style="color:#E1E4E8;">         BigInteger  abs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lazy.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">     System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(lazy.</span><span style="color:#B392F0;">isEvaluated</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.vavr.Lazy;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.math.BigInteger;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LazyDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//使用lazy将将值缓存到内存中，再次获取的时候可以直接获取</span></span>
<span class="line"><span style="color:#24292E;">     Lazy&lt;</span><span style="color:#D73A49;">BigInteger</span><span style="color:#24292E;">&gt; lazy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lazy.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">             BigInteger.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//判断是否已经求过值</span></span>
<span class="line"><span style="color:#24292E;">     System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(lazy.</span><span style="color:#6F42C1;">isEvaluated</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//获取lazy的值</span></span>
<span class="line"><span style="color:#24292E;">     System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(lazy.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//判断是否有进行计算过</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(lazy.</span><span style="color:#6F42C1;">isEvaluated</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//将lazy进行map 再次求绝对值</span></span>
<span class="line"><span style="color:#24292E;">         BigInteger  abs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lazy.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">     System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(lazy.</span><span style="color:#6F42C1;">isEvaluated</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote>`,24),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{g as __pageData,A as default};
