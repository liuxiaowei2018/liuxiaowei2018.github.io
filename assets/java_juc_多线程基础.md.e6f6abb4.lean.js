import{_ as n,o as l,c as p,Q as a,k as s}from"./chunks/framework.8048b864.js";const b=JSON.parse('{"title":"并发编程-多线程基础","description":"","frontmatter":{},"headers":[],"relativePath":"java/juc/多线程基础.md","filePath":"java/juc/多线程基础.md","lastUpdated":1719210606000}'),o={name:"java/juc/多线程基础.md"},e=a("",10),t=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"方法定义"),s("th",null,"含义"),s("th",null,"使用方式")])]),s("tbody",null,[s("tr",null,[s("td",{"……":""},"public synchronized void start()"),s("td",null,"启动线程"),s("td",null,"MyThread myThread = new MyThread(); myThread.start();")]),s("tr",null,[s("td",null,"public static native Thread currentThread();"),s("td",null,"获取当前线程实例对象"),s("td",null,"Thread thread = Thread.currentThread();")]),s("tr",null,[s("td",null,"public static native void yield();"),s("td",null,"让出CPU时间片"),s("td",null,"Thread.yield();")]),s("tr",null,[s("td",null,"public static native void sleep(long millis);"),s("td",null,"睡眠指定时间"),s("td",null,"Thread.sleep(1L);")]),s("tr",null,[s("td",{"……":""},"public void interrupt()"),s("td",null,"中断线程"),s("td",null,"MyThread myThread = new MyThread(); myThread.interrupt();")]),s("tr",null,[s("td",{"……":""},"public static boolean interrupted()"),s("td",null,"判断线程是否已中断"),s("td",null,"MyThread myThread = new MyThread(); boolean interrupted = myThread.isInterrupted();")]),s("tr",null,[s("td",null,"public final native boolean isAlive();"),s("td",null,"判断线程是否是存活状态"),s("td",null,"MyThread myThread = new MyThread(); boolean alive = myThread.isAlive();")]),s("tr",null,[s("td",{"……":""},"public final String getName()"),s("td",null,"获取线程名称"),s("td",null,"MyThread myThread = new MyThread(); String name = myThread.getName();")]),s("tr",null,[s("td",{"……":""},"public State getState()"),s("td",null,"获取线程状态"),s("td",null,"MyThread myThread = new MyThread(); Thread.State state = myThread.getState();")]),s("tr",null,[s("td",{"……":""},"public long getId()"),s("td",null,"获取线程ID"),s("td",null,"MyThread myThread = new MyThread(); long id = myThread.getId();")]),s("tr",null,[s("td",{"……":""},"public final void join()"),s("td",null,"等待其他线程执行完再执行"),s("td",null,"MyThread myThread = new MyThread(); myThread.join();")])])],-1),r=a("",34),c=[e,t,r];function E(y,i,d,F,u,A){return l(),p("div",null,c)}const D=n(o,[["render",E]]);export{b as __pageData,D as default};
