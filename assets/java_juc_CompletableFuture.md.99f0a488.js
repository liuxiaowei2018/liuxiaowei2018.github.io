import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8048b864.js";const A=JSON.parse('{"title":"并发编程-CompletableFuture","description":"","frontmatter":{},"headers":[],"relativePath":"java/juc/CompletableFuture.md","filePath":"java/juc/CompletableFuture.md","lastUpdated":1719110524000}'),p={name:"java/juc/CompletableFuture.md"},o=l(`<h1 id="并发编程-completablefuture" tabindex="-1">并发编程-CompletableFuture <a class="header-anchor" href="#并发编程-completablefuture" aria-label="Permalink to &quot;并发编程-CompletableFuture&quot;">​</a></h1><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="提交任务" tabindex="-1">提交任务 <a class="header-anchor" href="#提交任务" aria-label="Permalink to &quot;提交任务&quot;">​</a></h3><h4 id="supplyasync" tabindex="-1">supplyAsync <a class="header-anchor" href="#supplyasync" aria-label="Permalink to &quot;supplyAsync&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用默认内置线程池ForkJoinPool.commonPool()，根据supplier构建执行任务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">supplyAsync</span><span style="color:#E1E4E8;">(Supplier</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> supplier)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自定义线程，根据supplier构建执行任务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">supplyAsync</span><span style="color:#E1E4E8;">(Supplier</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> supplier, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用默认内置线程池ForkJoinPool.commonPool()，根据supplier构建执行任务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">supplyAsync</span><span style="color:#24292E;">(Supplier</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> supplier)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自定义线程，根据supplier构建执行任务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">supplyAsync</span><span style="color:#24292E;">(Supplier</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> supplier, Executor executor)</span></span></code></pre></div><h4 id="runasync" tabindex="-1">runAsync <a class="header-anchor" href="#runasync" aria-label="Permalink to &quot;runAsync&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用默认内置线程池ForkJoinPool.commonPool()，根据runnable构建执行任务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(Runnable runnable) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自定义线程，根据runnable构建执行任务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(Runnable runnable,  Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用默认内置线程池ForkJoinPool.commonPool()，根据runnable构建执行任务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(Runnable runnable) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自定义线程，根据runnable构建执行任务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(Runnable runnable,  Executor executor)</span></span></code></pre></div><h3 id="结果转换" tabindex="-1">结果转换 <a class="header-anchor" href="#结果转换" aria-label="Permalink to &quot;结果转换&quot;">​</a></h3><h4 id="thenrun-thenrunasync" tabindex="-1">thenRun/thenRunAsync <a class="header-anchor" href="#thenrun-thenrunasync" aria-label="Permalink to &quot;thenRun/thenRunAsync&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenRun</span><span style="color:#E1E4E8;">(Runnable action);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenRunAsync</span><span style="color:#E1E4E8;">(Runnable action);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenRunAsync</span><span style="color:#E1E4E8;">(Runnable action, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenRun</span><span style="color:#24292E;">(Runnable action);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenRunAsync</span><span style="color:#24292E;">(Runnable action);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenRunAsync</span><span style="color:#24292E;">(Runnable action, Executor executor)</span></span></code></pre></div><blockquote><p><strong>thenRun 和thenRunAsync有什么区别呢</strong>？</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Executor asyncPool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useCommonPool </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">        ForkJoinPool.</span><span style="color:#B392F0;">commonPool</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPerTaskExecutor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenRun</span><span style="color:#E1E4E8;">(Runnable action) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uniRunStage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, action);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenRunAsync</span><span style="color:#E1E4E8;">(Runnable action) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uniRunStage</span><span style="color:#E1E4E8;">(asyncPool, action);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Executor asyncPool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> useCommonPool </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">        ForkJoinPool.</span><span style="color:#6F42C1;">commonPool</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPerTaskExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenRun</span><span style="color:#24292E;">(Runnable action) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uniRunStage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, action);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenRunAsync</span><span style="color:#24292E;">(Runnable action) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uniRunStage</span><span style="color:#24292E;">(asyncPool, action);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>如果你执行第一个任务的时候，传入了一个自定义线程池：</p><ul><li>调用thenRun方法执行第二个任务时，则第二个任务和第一个任务是<strong>共用同一个线程池</strong>。</li><li>调用thenRunAsync执行第二个任务时，则第一个任务使用的是你自己传入的线程池，<strong>第二个任务使用的是ForkJoin线程池</strong></li></ul><p><strong>TIPS:</strong> thenAccept和thenAcceptAsync，thenApply和thenApplyAsync等，它们之间的区别也是这个。</p><h4 id="thenapply-thenapplyasync" tabindex="-1">thenApply/thenApplyAsync <a class="header-anchor" href="#thenapply-thenapplyasync" aria-label="Permalink to &quot;thenApply/thenApplyAsync&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenApply</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenApplyAsync</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenApplyAsync</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenApply</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenApplyAsync</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenApplyAsync</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn, Executor executor)</span></span></code></pre></div><p>CompletableFuture的thenApply方法表示，第一个任务执行完成后，执行第二个回调方法任务，会将该任务的执行结果，作为入参，传递到回调方法中，并且回调方法是有返回值的。</p><h4 id="thenaccept-thenacceptasync" tabindex="-1">thenAccept/thenAcceptAsync <a class="header-anchor" href="#thenaccept-thenacceptasync" aria-label="Permalink to &quot;thenAccept/thenAcceptAsync&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenAccept</span><span style="color:#E1E4E8;">(Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenAcceptAsync</span><span style="color:#E1E4E8;">(Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenAcceptAsync</span><span style="color:#E1E4E8;">(Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenAccept</span><span style="color:#24292E;">(Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenAcceptAsync</span><span style="color:#24292E;">(Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenAcceptAsync</span><span style="color:#24292E;">(Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action, Executor executor)</span></span></code></pre></div><p>CompletableFuture的thenAccept方法表示，第一个任务执行完成后，执行第二个回调方法任务，会将该任务的执行结果，作为入参，传递到回调方法中，但是回调方法是<strong>没有返回值</strong>的。</p><h4 id="thenacceptboth" tabindex="-1">thenAcceptBoth <a class="header-anchor" href="#thenacceptboth" aria-label="Permalink to &quot;thenAcceptBoth&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenAcceptBoth</span><span style="color:#E1E4E8;">(CompletionStage</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other, BiConsumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenAcceptBothAsync</span><span style="color:#E1E4E8;">(CompletionStage</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other, BiConsumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenAcceptBothAsync</span><span style="color:#E1E4E8;">(CompletionStage</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other, BiConsumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenAcceptBoth</span><span style="color:#24292E;">(CompletionStage</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other, BiConsumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenAcceptBothAsync</span><span style="color:#24292E;">(CompletionStage</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other, BiConsumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenAcceptBothAsync</span><span style="color:#24292E;">(CompletionStage</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other, BiConsumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action, Executor executor)</span></span></code></pre></div><p>thenAcceptBoth这一组函数入参包括CompletionStage以及BiConsumer，CompletionStage是JDK1.8新增的接口，在JDK中只有一个实现类：CompletableFuture，所以第一个入参就是CompletableFuture，这一组函数是用来接受两个CompletableFuture的返回值，并将其组合到一起。BiConsumer这个函数式接口有两个入参，并且没有返回值，BiConsumer的第一个入参就是调用方CompletableFuture的执行结果，第二个入参就是thenAcceptBoth接口入参的CompletableFuture的执行结果。所以这一组函数意思是将两个CompletableFuture执行结果合并到一起。</p><h4 id="handle" tabindex="-1">handle <a class="header-anchor" href="#handle" aria-label="Permalink to &quot;handle&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(BiFunction</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, Throwable, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleAsync</span><span style="color:#E1E4E8;">(BiFunction</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, Throwable, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleAsync</span><span style="color:#E1E4E8;">(BiFunction</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, Throwable, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(BiFunction</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, Throwable, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleAsync</span><span style="color:#24292E;">(BiFunction</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, Throwable, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleAsync</span><span style="color:#24292E;">(BiFunction</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, Throwable, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn, Executor executor)</span></span></code></pre></div><p>CompletableFuture的handle方法表示，<strong>某个任务执行完成后，执行回调方法，并且是有返回值的</strong>;</p><p>并且handle方法返回的CompletableFuture的result是<strong>回调方法</strong>执行的结果。</p><p>同时如果有异常，需要手动处理异常。</p><h4 id="thencombine" tabindex="-1">thenCombine <a class="header-anchor" href="#thencombine" aria-label="Permalink to &quot;thenCombine&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U,V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenCombine</span><span style="color:#E1E4E8;">(CompletionStage</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other, BiFunction</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> U,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U,V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenCombineAsync</span><span style="color:#E1E4E8;">(CompletionStage</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other, BiFunction</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> U,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U,V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenCombineAsync</span><span style="color:#E1E4E8;">(CompletionStage</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> other, BiFunction</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> U,</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenCombine</span><span style="color:#24292E;">(CompletionStage</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other, BiFunction</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> U,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenCombineAsync</span><span style="color:#24292E;">(CompletionStage</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other, BiFunction</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> U,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenCombineAsync</span><span style="color:#24292E;">(CompletionStage</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> other, BiFunction</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> U,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn, Executor executor)</span></span></code></pre></div><p>thenCombine这一组函数和thenAcceptBoth类似，入参都包含一个CompletionStage，也就是CompletableFuture对象，意思也是组合两个CompletableFuture的执行结果，不同的是thenCombine的第二个入参为BiFunction，该函数式接口有两个入参，同时有一个返回值。所以与thenAcceptBoth不同的是，thenCombine将两个任务结果合并后会返回一个全新的值作为出参。</p><h4 id="thencompose" tabindex="-1">thenCompose <a class="header-anchor" href="#thencompose" aria-label="Permalink to &quot;thenCompose&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenCompose</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends CompletionStage</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> fn)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenComposeAsync</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends CompletionStage</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> fn)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thenComposeAsync</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends CompletionStage</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> fn, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenCompose</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends CompletionStage</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> fn)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenComposeAsync</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends CompletionStage</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> fn)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thenComposeAsync</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends CompletionStage</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> fn, Executor executor)</span></span></code></pre></div><p>thenCompose方法会在某个任务执行完成后，将该任务的执行结果,作为方法入参,去执行指定的方法。</p><p>该方法会返回一个新的CompletableFuture实例</p><ul><li>如果该CompletableFuture实例的result不为null，则返回一个基于该result新的CompletableFuture实例；</li><li>如果该CompletableFuture实例为null，然后就执行这个新任务</li></ul><h3 id="回调方法" tabindex="-1">回调方法 <a class="header-anchor" href="#回调方法" aria-label="Permalink to &quot;回调方法&quot;">​</a></h3><h3 id="whencomplete" tabindex="-1">whenComplete <a class="header-anchor" href="#whencomplete" aria-label="Permalink to &quot;whenComplete&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">whenComplete</span><span style="color:#E1E4E8;">(BiConsumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">whenCompleteAsync</span><span style="color:#E1E4E8;">(BiConsumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">whenCompleteAsync</span><span style="color:#E1E4E8;">(BiConsumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action, Executor executor)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">whenComplete</span><span style="color:#24292E;">(BiConsumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">whenCompleteAsync</span><span style="color:#24292E;">(BiConsumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">whenCompleteAsync</span><span style="color:#24292E;">(BiConsumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action, Executor executor)</span></span></code></pre></div><p>CompletableFuture的whenComplete方法表示，某个任务执行完成后，执行的回调方法，<strong>无返回值</strong>；</p><p>并且whenComplete方法返回的CompletableFuture的<strong>result是上个任务的结果</strong>。</p><h3 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h3><h3 id="exceptionally" tabindex="-1">exceptionally <a class="header-anchor" href="#exceptionally" aria-label="Permalink to &quot;exceptionally&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exceptionally</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Throwable, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exceptionally</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Throwable, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn)</span></span></code></pre></div><p><strong>exceptionally</strong>是用来处理异常的，当任务抛出异常后，可以通过exceptionally来进行处理，也可以选择使用handle来进行处理，不过两者有些不同，hand是用来处理上一个任务的结果，如果有异常情况，就处理异常。而exceptionally可以放在CompletableFuture处理的最后，作为兜底逻辑来处理未知异常。</p><h3 id="获取结果" tabindex="-1">获取结果 <a class="header-anchor" href="#获取结果" aria-label="Permalink to &quot;获取结果&quot;">​</a></h3><h4 id="allof" tabindex="-1">AllOf <a class="header-anchor" href="#allof" aria-label="Permalink to &quot;AllOf&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">allOf</span><span style="color:#E1E4E8;">(CompletableFuture</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">... cfs)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">allOf</span><span style="color:#24292E;">(CompletableFuture</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">... cfs)</span></span></code></pre></div><p>所有任务都执行完成后，才执行 allOf返回的CompletableFuture。</p><p>如果任意一个任务异常，allOf的CompletableFuture，执行get方法，会抛出异常</p><h4 id="anyof" tabindex="-1">AnyOf <a class="header-anchor" href="#anyof" aria-label="Permalink to &quot;AnyOf&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">anyOf</span><span style="color:#E1E4E8;">(CompletableFuture</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">... cfs)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">anyOf</span><span style="color:#24292E;">(CompletableFuture</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">... cfs)</span></span></code></pre></div><p>任意一个任务执行完，就执行anyOf返回的CompletableFuture。</p><p>如果执行的任务异常，anyOf的CompletableFuture，执行get方法，会抛出异常</p><h4 id="get-getnow-join" tabindex="-1">get/getNow/join <a class="header-anchor" href="#get-getnow-join" aria-label="Permalink to &quot;get/getNow/join&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() throws InterruptedException, ExecutionException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getNow</span><span style="color:#E1E4E8;">(T valueIfAbsent)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() throws InterruptedException, ExecutionException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getNow</span><span style="color:#24292E;">(T valueIfAbsent)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">()</span></span></code></pre></div><p><strong>get</strong>方法一个是不带超时时间的，一个是带有超时时间的。</p><p><strong>getNow</strong>方法则是立即返回结果，如果还没有结果，则返回默认值，也就是该方法的入参。</p><p><strong>join</strong>方法是不带超时时间的等待任务完成。</p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><h3 id="创建异步任务" tabindex="-1">创建异步任务 <a class="header-anchor" href="#创建异步任务" aria-label="Permalink to &quot;创建异步任务&quot;">​</a></h3><table><thead><tr><th></th><th>描述</th><th>是否支持返回值</th></tr></thead><tbody><tr><td>supplyAsync</td><td>执行CompletableFuture任务</td><td>支持</td></tr><tr><td>runAsync</td><td>执行CompletableFuture任务</td><td>不支持</td></tr></tbody></table><h3 id="任务异步回调" tabindex="-1">任务异步回调 <a class="header-anchor" href="#任务异步回调" aria-label="Permalink to &quot;任务异步回调&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202406221707023.png" alt="image-20240622170740957"></p><h3 id="多任务组合" tabindex="-1">多任务组合 <a class="header-anchor" href="#多任务组合" aria-label="Permalink to &quot;多任务组合&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202406221714194.png" alt="image-20240622171457127"></p><table><thead><tr><th>CompletableFuture</th><th>作用</th><th>区别</th></tr></thead><tbody><tr><td><strong>AND组合关系</strong></td><td>将两个CompletableFuture组合起来，只有这两个都正常执行完了，才会执行某个任务</td><td></td></tr><tr><td>thenCombine</td><td></td><td>将两个任务的执行结果作为方法入参，传递到指定方法中，且<strong>有返回值</strong></td></tr><tr><td>thenAcceptBoth</td><td></td><td>将两个任务的执行结果作为方法入参，传递到指定方法中，且<strong>无返回值</strong></td></tr><tr><td>runAfterBoth</td><td></td><td>不会把执行结果当做方法入参，且没有返回值。</td></tr><tr><td><strong>OR 组合关系</strong></td><td>将两个CompletableFuture组合起来，只要其中一个执行完了,就会执行某个任务</td><td></td></tr><tr><td>applyToEither</td><td></td><td>会将已经执行完成的任务，作为方法入参，传递到指定方法中，且有返回值</td></tr><tr><td>acceptEither</td><td></td><td>会将已经执行完成的任务，作为方法入参，传递到指定方法中，且无返回值</td></tr><tr><td>runAfterEither</td><td></td><td>不会把执行结果当做方法入参，且没有返回值。</td></tr><tr><td></td><td></td><td></td></tr><tr><td>AnyOf</td><td></td><td></td></tr><tr><td>AllOf</td><td></td><td></td></tr><tr><td>thenCompose</td><td></td><td></td></tr></tbody></table><h2 id="使用注意事项" tabindex="-1">使用注意事项 <a class="header-anchor" href="#使用注意事项" aria-label="Permalink to &quot;使用注意事项&quot;">​</a></h2><h3 id="_1-future需要获取返回值-才能获取异常信息" tabindex="-1">1. Future需要获取返回值，才能获取异常信息 <a class="header-anchor" href="#_1-future需要获取返回值-才能获取异常信息" aria-label="Permalink to &quot;1. Future需要获取返回值，才能获取异常信息&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ExecutorService executorService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5L</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                         TimeUnit.SECONDS, </span></span>
<span class="line"><span style="color:#E1E4E8;">                                                         </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayBlockingQueue&lt;&gt;(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">supplyAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">666</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">},executorService).</span><span style="color:#B392F0;">thenAccept</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//如果不加 get()方法这一行，看不到异常信息</span></span>
<span class="line"><span style="color:#E1E4E8;">future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ExecutorService executorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5L</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                         TimeUnit.SECONDS, </span></span>
<span class="line"><span style="color:#24292E;">                                                         </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayBlockingQueue&lt;&gt;(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">supplyAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">666</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">},executorService).</span><span style="color:#6F42C1;">thenAccept</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//如果不加 get()方法这一行，看不到异常信息</span></span>
<span class="line"><span style="color:#24292E;">future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><p>Future需要获取返回值，才能获取到异常信息。如果不加 get()/join()方法，看不到异常信息。使用的时候考虑是否</p><p>加try...catch...或者使用exceptionally方法。</p><h3 id="_2-completablefuture的get-方法是阻塞的。" tabindex="-1">2. CompletableFuture的get()方法是阻塞的。 <a class="header-anchor" href="#_2-completablefuture的get-方法是阻塞的。" aria-label="Permalink to &quot;2. CompletableFuture的get()方法是阻塞的。&quot;">​</a></h3><p>CompletableFuture的get()方法是阻塞的，如果使用它来获取异步调用的返回值，需要添加超时时间</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 反例</span></span>
<span class="line"><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 正例</span></span>
<span class="line"><span style="color:#E1E4E8;">CompletableFuture.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 反例</span></span>
<span class="line"><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 正例</span></span>
<span class="line"><span style="color:#24292E;">CompletableFuture.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, TimeUnit.SECONDS);</span></span></code></pre></div><h3 id="_3-completablefuture默认线程池" tabindex="-1">3. CompletableFuture默认线程池 <a class="header-anchor" href="#_3-completablefuture默认线程池" aria-label="Permalink to &quot;3. CompletableFuture默认线程池&quot;">​</a></h3><p>CompletableFuture代码中又使用了默认的线程池，处理的线程个数是电脑CPU核数-1。<strong>大量请求过来的时候，处理逻辑复杂的话，响应会很慢</strong>。一般建议使用自定义线程池，优化线程池配置参数。</p><p>当自定义线程池拒绝策略是<code>DiscardPolicy</code>或者<code>DiscardOldestPolicy</code>，当线程池饱和时，会直接丢弃任务，不会抛弃异常。</p><p>因此建议，CompletableFuture线程池策略<strong>最好使用AbortPolicy</strong>，然后耗时的异步线程，做好<strong>线程池隔离</strong>。</p><h2 id="测试用例" tabindex="-1">测试用例 <a class="header-anchor" href="#测试用例" aria-label="Permalink to &quot;测试用例&quot;">​</a></h2><h3 id="商品详情页" tabindex="-1">商品详情页 <a class="header-anchor" href="#商品详情页" aria-label="Permalink to &quot;商品详情页&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GmallPmsFeign pmsFeign;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GmallSmsFeign smsFeign;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GmallWmsFeign wmsFeign;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ThreadPoolExecutor threadPoolExecutor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ItemVO </span><span style="color:#B392F0;">loadData</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">skuId</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ExecutionException, InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ItemVO itemVO </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemVO</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1. 获取sku的基本信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 后续获取sku的促销信息、spu的销售属性和spu详情信息（需要sku中的spuId）都需要skuInfoEntity</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// supplyAsync有返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// runAsync无返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 所以这里需要使用supplyAsync</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">SkuInfoEntity</span><span style="color:#E1E4E8;">&gt; skuFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">supplyAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Resp&lt;</span><span style="color:#F97583;">SkuInfoEntity</span><span style="color:#E1E4E8;">&gt; skuInfoEntityResp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pmsFeign.</span><span style="color:#B392F0;">querySkuById</span><span style="color:#E1E4E8;">(skuId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            SkuInfoEntity skuInfoEntity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> skuInfoEntityResp.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (skuInfoEntity </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                BeanUtils.</span><span style="color:#B392F0;">copyProperties</span><span style="color:#E1E4E8;">(skuInfoEntity, itemVO);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> skuInfoEntity;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2. 获取sku的图片信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; skuImageFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Resp&lt;List&lt;</span><span style="color:#F97583;">SkuImagesEntity</span><span style="color:#E1E4E8;">&gt;&gt; listResp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pmsFeign.</span><span style="color:#B392F0;">queryImagesBySkuId</span><span style="color:#E1E4E8;">(skuId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">SkuImagesEntity</span><span style="color:#E1E4E8;">&gt; images </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> listResp.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">CollectionUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(images)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; imageUrls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> images.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(image </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> image.</span><span style="color:#B392F0;">getImgUrl</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                itemVO.</span><span style="color:#B392F0;">setPics</span><span style="color:#E1E4E8;">(imageUrls);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 3. 获取sku的促销信息 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 4. 获取spu的所有销售属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// thenAcceptAsync：有参数，无返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// thenApplyAsync: 有参数，有返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 后续spu详情也需要skuInfoEntity中的spuId，所以这里使用thenApplyAsync</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">SkuInfoEntity</span><span style="color:#E1E4E8;">&gt; spuFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> skuFuture.</span><span style="color:#B392F0;">thenApplyAsync</span><span style="color:#E1E4E8;">(skuInfoEntity </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Resp&lt;List&lt;</span><span style="color:#F97583;">SkuSaleAttrValueEntity</span><span style="color:#E1E4E8;">&gt;&gt; skuSaleAttrValueResp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pmsFeign.</span><span style="color:#B392F0;">querySkuSaleAttrValueBySpuId</span><span style="color:#E1E4E8;">(skuInfoEntity.</span><span style="color:#B392F0;">getSpuId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">SkuSaleAttrValueEntity</span><span style="color:#E1E4E8;">&gt; skuSaleAttrValueEntities </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> skuSaleAttrValueResp.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            itemVO.</span><span style="color:#B392F0;">setSaleAttrs</span><span style="color:#E1E4E8;">(skuSaleAttrValueEntities);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> skuInfoEntity;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 5. 获取规格参数组及组下的规格参数 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 6. spu详情 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">allOf</span><span style="color:#E1E4E8;">(skuFuture, skuImageFuture, spuFuture);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 阻塞主进程，等待子进程全部执行完毕！</span></span>
<span class="line"><span style="color:#E1E4E8;">        future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> itemVO;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GmallPmsFeign pmsFeign;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GmallSmsFeign smsFeign;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GmallWmsFeign wmsFeign;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ThreadPoolExecutor threadPoolExecutor;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ItemVO </span><span style="color:#6F42C1;">loadData</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">skuId</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ExecutionException, InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        ItemVO itemVO </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemVO</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1. 获取sku的基本信息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 后续获取sku的促销信息、spu的销售属性和spu详情信息（需要sku中的spuId）都需要skuInfoEntity</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// supplyAsync有返回值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// runAsync无返回值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 所以这里需要使用supplyAsync</span></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">SkuInfoEntity</span><span style="color:#24292E;">&gt; skuFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">supplyAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Resp&lt;</span><span style="color:#D73A49;">SkuInfoEntity</span><span style="color:#24292E;">&gt; skuInfoEntityResp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pmsFeign.</span><span style="color:#6F42C1;">querySkuById</span><span style="color:#24292E;">(skuId);</span></span>
<span class="line"><span style="color:#24292E;">            SkuInfoEntity skuInfoEntity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> skuInfoEntityResp.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (skuInfoEntity </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                BeanUtils.</span><span style="color:#6F42C1;">copyProperties</span><span style="color:#24292E;">(skuInfoEntity, itemVO);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> skuInfoEntity;</span></span>
<span class="line"><span style="color:#24292E;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2. 获取sku的图片信息</span></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; skuImageFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Resp&lt;List&lt;</span><span style="color:#D73A49;">SkuImagesEntity</span><span style="color:#24292E;">&gt;&gt; listResp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pmsFeign.</span><span style="color:#6F42C1;">queryImagesBySkuId</span><span style="color:#24292E;">(skuId);</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">SkuImagesEntity</span><span style="color:#24292E;">&gt; images </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> listResp.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">CollectionUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(images)) {</span></span>
<span class="line"><span style="color:#24292E;">                List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; imageUrls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> images.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(image </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> image.</span><span style="color:#6F42C1;">getImgUrl</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                itemVO.</span><span style="color:#6F42C1;">setPics</span><span style="color:#24292E;">(imageUrls);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3. 获取sku的促销信息 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4. 获取spu的所有销售属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// thenAcceptAsync：有参数，无返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// thenApplyAsync: 有参数，有返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 后续spu详情也需要skuInfoEntity中的spuId，所以这里使用thenApplyAsync</span></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">SkuInfoEntity</span><span style="color:#24292E;">&gt; spuFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> skuFuture.</span><span style="color:#6F42C1;">thenApplyAsync</span><span style="color:#24292E;">(skuInfoEntity </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Resp&lt;List&lt;</span><span style="color:#D73A49;">SkuSaleAttrValueEntity</span><span style="color:#24292E;">&gt;&gt; skuSaleAttrValueResp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pmsFeign.</span><span style="color:#6F42C1;">querySkuSaleAttrValueBySpuId</span><span style="color:#24292E;">(skuInfoEntity.</span><span style="color:#6F42C1;">getSpuId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">SkuSaleAttrValueEntity</span><span style="color:#24292E;">&gt; skuSaleAttrValueEntities </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> skuSaleAttrValueResp.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            itemVO.</span><span style="color:#6F42C1;">setSaleAttrs</span><span style="color:#24292E;">(skuSaleAttrValueEntities);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> skuInfoEntity;</span></span>
<span class="line"><span style="color:#24292E;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 5. 获取规格参数组及组下的规格参数 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 6. spu详情 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">allOf</span><span style="color:#24292E;">(skuFuture, skuImageFuture, spuFuture);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 阻塞主进程，等待子进程全部执行完毕！</span></span>
<span class="line"><span style="color:#24292E;">        future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> itemVO;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GmallPmsFeign pmsFeign;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GmallSmsFeign smsFeign;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GmallWmsFeign wmsFeign;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ThreadPoolExecutor threadPoolExecutor;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ItemVO </span><span style="color:#B392F0;">loadData</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">skuId</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ExecutionException, InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ItemVO itemVO </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemVO</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1. 获取sku的基本信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 后续获取sku的促销信息、spu的销售属性和spu详情信息（需要sku中的spuId）都需要skuInfoEntity</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// supplyAsync有返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// runAsync无返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 所以这里需要使用supplyAsync</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">SkuInfoEntity</span><span style="color:#E1E4E8;">&gt; skuFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">supplyAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Resp&lt;</span><span style="color:#F97583;">SkuInfoEntity</span><span style="color:#E1E4E8;">&gt; skuInfoEntityResp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pmsFeign.</span><span style="color:#B392F0;">querySkuById</span><span style="color:#E1E4E8;">(skuId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            SkuInfoEntity skuInfoEntity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> skuInfoEntityResp.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (skuInfoEntity </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                BeanUtils.</span><span style="color:#B392F0;">copyProperties</span><span style="color:#E1E4E8;">(skuInfoEntity, itemVO);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> skuInfoEntity;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2. 获取sku的图片信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; skuImageFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Resp&lt;List&lt;</span><span style="color:#F97583;">SkuImagesEntity</span><span style="color:#E1E4E8;">&gt;&gt; listResp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pmsFeign.</span><span style="color:#B392F0;">queryImagesBySkuId</span><span style="color:#E1E4E8;">(skuId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">SkuImagesEntity</span><span style="color:#E1E4E8;">&gt; images </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> listResp.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">CollectionUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(images)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; imageUrls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> images.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(image </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> image.</span><span style="color:#B392F0;">getImgUrl</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                itemVO.</span><span style="color:#B392F0;">setPics</span><span style="color:#E1E4E8;">(imageUrls);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 3. 获取sku的促销信息 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 4. 获取spu的所有销售属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// thenAcceptAsync：有参数，无返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// thenApplyAsync: 有参数，有返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 后续spu详情也需要skuInfoEntity中的spuId，所以这里使用thenApplyAsync</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">SkuInfoEntity</span><span style="color:#E1E4E8;">&gt; spuFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> skuFuture.</span><span style="color:#B392F0;">thenApplyAsync</span><span style="color:#E1E4E8;">(skuInfoEntity </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Resp&lt;List&lt;</span><span style="color:#F97583;">SkuSaleAttrValueEntity</span><span style="color:#E1E4E8;">&gt;&gt; skuSaleAttrValueResp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pmsFeign.</span><span style="color:#B392F0;">querySkuSaleAttrValueBySpuId</span><span style="color:#E1E4E8;">(skuInfoEntity.</span><span style="color:#B392F0;">getSpuId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">SkuSaleAttrValueEntity</span><span style="color:#E1E4E8;">&gt; skuSaleAttrValueEntities </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> skuSaleAttrValueResp.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            itemVO.</span><span style="color:#B392F0;">setSaleAttrs</span><span style="color:#E1E4E8;">(skuSaleAttrValueEntities);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> skuInfoEntity;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 5. 获取规格参数组及组下的规格参数 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 6. spu详情 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">allOf</span><span style="color:#E1E4E8;">(skuFuture, skuImageFuture, spuFuture);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 阻塞主进程，等待子进程全部执行完毕！</span></span>
<span class="line"><span style="color:#E1E4E8;">        future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> itemVO;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GmallPmsFeign pmsFeign;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GmallSmsFeign smsFeign;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GmallWmsFeign wmsFeign;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ThreadPoolExecutor threadPoolExecutor;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ItemVO </span><span style="color:#6F42C1;">loadData</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">skuId</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ExecutionException, InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        ItemVO itemVO </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemVO</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1. 获取sku的基本信息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 后续获取sku的促销信息、spu的销售属性和spu详情信息（需要sku中的spuId）都需要skuInfoEntity</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// supplyAsync有返回值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// runAsync无返回值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 所以这里需要使用supplyAsync</span></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">SkuInfoEntity</span><span style="color:#24292E;">&gt; skuFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">supplyAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Resp&lt;</span><span style="color:#D73A49;">SkuInfoEntity</span><span style="color:#24292E;">&gt; skuInfoEntityResp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pmsFeign.</span><span style="color:#6F42C1;">querySkuById</span><span style="color:#24292E;">(skuId);</span></span>
<span class="line"><span style="color:#24292E;">            SkuInfoEntity skuInfoEntity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> skuInfoEntityResp.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (skuInfoEntity </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                BeanUtils.</span><span style="color:#6F42C1;">copyProperties</span><span style="color:#24292E;">(skuInfoEntity, itemVO);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> skuInfoEntity;</span></span>
<span class="line"><span style="color:#24292E;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2. 获取sku的图片信息</span></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; skuImageFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Resp&lt;List&lt;</span><span style="color:#D73A49;">SkuImagesEntity</span><span style="color:#24292E;">&gt;&gt; listResp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pmsFeign.</span><span style="color:#6F42C1;">queryImagesBySkuId</span><span style="color:#24292E;">(skuId);</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">SkuImagesEntity</span><span style="color:#24292E;">&gt; images </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> listResp.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">CollectionUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(images)) {</span></span>
<span class="line"><span style="color:#24292E;">                List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; imageUrls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> images.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(image </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> image.</span><span style="color:#6F42C1;">getImgUrl</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                itemVO.</span><span style="color:#6F42C1;">setPics</span><span style="color:#24292E;">(imageUrls);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3. 获取sku的促销信息 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4. 获取spu的所有销售属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// thenAcceptAsync：有参数，无返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// thenApplyAsync: 有参数，有返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 后续spu详情也需要skuInfoEntity中的spuId，所以这里使用thenApplyAsync</span></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">SkuInfoEntity</span><span style="color:#24292E;">&gt; spuFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> skuFuture.</span><span style="color:#6F42C1;">thenApplyAsync</span><span style="color:#24292E;">(skuInfoEntity </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Resp&lt;List&lt;</span><span style="color:#D73A49;">SkuSaleAttrValueEntity</span><span style="color:#24292E;">&gt;&gt; skuSaleAttrValueResp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pmsFeign.</span><span style="color:#6F42C1;">querySkuSaleAttrValueBySpuId</span><span style="color:#24292E;">(skuInfoEntity.</span><span style="color:#6F42C1;">getSpuId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">SkuSaleAttrValueEntity</span><span style="color:#24292E;">&gt; skuSaleAttrValueEntities </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> skuSaleAttrValueResp.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            itemVO.</span><span style="color:#6F42C1;">setSaleAttrs</span><span style="color:#24292E;">(skuSaleAttrValueEntities);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> skuInfoEntity;</span></span>
<span class="line"><span style="color:#24292E;">        }, threadPoolExecutor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 5. 获取规格参数组及组下的规格参数 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 6. spu详情 TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">allOf</span><span style="color:#24292E;">(skuFuture, skuImageFuture, spuFuture);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 阻塞主进程，等待子进程全部执行完毕！</span></span>
<span class="line"><span style="color:#24292E;">        future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> itemVO;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// SkuInfoServiceImpl</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SkuItemVo </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">(Long skuId) throws ExecutionException, InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    SkuItemVo skuItemVo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SkuItemVo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture&lt;</span><span style="color:#F97583;">SkuInfoEntity</span><span style="color:#E1E4E8;">&gt; infoFutrue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">supplyAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//1 sku基本信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        SkuInfoEntity info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getById</span><span style="color:#E1E4E8;">(skuId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        skuItemVo.</span><span style="color:#B392F0;">setInfo</span><span style="color:#E1E4E8;">(info);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> info;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; ImgageFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//2 sku图片信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">SkuImagesEntity</span><span style="color:#E1E4E8;">&gt; images </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> imagesService.</span><span style="color:#B392F0;">getImagesBySkuId</span><span style="color:#E1E4E8;">(skuId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        skuItemVo.</span><span style="color:#B392F0;">setImages</span><span style="color:#E1E4E8;">(images);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; saleAttrFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">infoFutrue.</span><span style="color:#B392F0;">thenAcceptAsync</span><span style="color:#E1E4E8;">(res </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//3 获取spu销售属性组合 list</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">ItemSaleAttrVo</span><span style="color:#E1E4E8;">&gt; saleAttrVos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> skuSaleAttrValueService.</span><span style="color:#B392F0;">getSaleAttrsBuSpuId</span><span style="color:#E1E4E8;">(res.</span><span style="color:#B392F0;">getSpuId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        skuItemVo.</span><span style="color:#B392F0;">setSaleAttr</span><span style="color:#E1E4E8;">(saleAttrVos);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; descFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> infoFutrue.</span><span style="color:#B392F0;">thenAcceptAsync</span><span style="color:#E1E4E8;">(res </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//4 获取spu介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpuInfoDescEntity spuInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> spuInfoDescService.</span><span style="color:#B392F0;">getById</span><span style="color:#E1E4E8;">(res.</span><span style="color:#B392F0;">getSpuId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        skuItemVo.</span><span style="color:#B392F0;">setDesc</span><span style="color:#E1E4E8;">(spuInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; baseAttrFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> infoFutrue.</span><span style="color:#B392F0;">thenAcceptAsync</span><span style="color:#E1E4E8;">(res </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//5 获取spu规格参数信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">SpuItemAttrGroup</span><span style="color:#E1E4E8;">&gt; attrGroups </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> attrGroupService.</span><span style="color:#B392F0;">getAttrGroupWithAttrsBySpuId</span><span style="color:#E1E4E8;">(res.</span><span style="color:#B392F0;">getSpuId</span><span style="color:#E1E4E8;">(), res.</span><span style="color:#B392F0;">getCatalogId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        skuItemVo.</span><span style="color:#B392F0;">setGroupAttrs</span><span style="color:#E1E4E8;">(attrGroups);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 6.查询当前sku是否参与秒杀优惠</span></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; secKillFuture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        R skuSeckillInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> seckillFeignService.</span><span style="color:#B392F0;">getSkuSeckillInfo</span><span style="color:#E1E4E8;">(skuId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (skuSeckillInfo.</span><span style="color:#B392F0;">getCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            SeckillInfoVo seckillInfoVo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> skuSeckillInfo.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TypeReference&lt;</span><span style="color:#F97583;">SeckillInfoVo</span><span style="color:#E1E4E8;">&gt;() {});</span></span>
<span class="line"><span style="color:#E1E4E8;">            skuItemVo.</span><span style="color:#B392F0;">setSeckillInfoVo</span><span style="color:#E1E4E8;">(seckillInfoVo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 等待所有任务都完成再返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    CompletableFuture.</span><span style="color:#B392F0;">allOf</span><span style="color:#E1E4E8;">(ImgageFuture,saleAttrFuture,descFuture,baseAttrFuture,secKillFuture).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> skuItemVo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// SkuInfoServiceImpl</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SkuItemVo </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">(Long skuId) throws ExecutionException, InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    SkuItemVo skuItemVo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SkuItemVo</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture&lt;</span><span style="color:#D73A49;">SkuInfoEntity</span><span style="color:#24292E;">&gt; infoFutrue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">supplyAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1 sku基本信息</span></span>
<span class="line"><span style="color:#24292E;">        SkuInfoEntity info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getById</span><span style="color:#24292E;">(skuId);</span></span>
<span class="line"><span style="color:#24292E;">        skuItemVo.</span><span style="color:#6F42C1;">setInfo</span><span style="color:#24292E;">(info);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> info;</span></span>
<span class="line"><span style="color:#24292E;">    }, executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; ImgageFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2 sku图片信息</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">SkuImagesEntity</span><span style="color:#24292E;">&gt; images </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> imagesService.</span><span style="color:#6F42C1;">getImagesBySkuId</span><span style="color:#24292E;">(skuId);</span></span>
<span class="line"><span style="color:#24292E;">        skuItemVo.</span><span style="color:#6F42C1;">setImages</span><span style="color:#24292E;">(images);</span></span>
<span class="line"><span style="color:#24292E;">    }, executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; saleAttrFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">infoFutrue.</span><span style="color:#6F42C1;">thenAcceptAsync</span><span style="color:#24292E;">(res </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//3 获取spu销售属性组合 list</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">ItemSaleAttrVo</span><span style="color:#24292E;">&gt; saleAttrVos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> skuSaleAttrValueService.</span><span style="color:#6F42C1;">getSaleAttrsBuSpuId</span><span style="color:#24292E;">(res.</span><span style="color:#6F42C1;">getSpuId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        skuItemVo.</span><span style="color:#6F42C1;">setSaleAttr</span><span style="color:#24292E;">(saleAttrVos);</span></span>
<span class="line"><span style="color:#24292E;">    },executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; descFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> infoFutrue.</span><span style="color:#6F42C1;">thenAcceptAsync</span><span style="color:#24292E;">(res </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//4 获取spu介绍</span></span>
<span class="line"><span style="color:#24292E;">        SpuInfoDescEntity spuInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> spuInfoDescService.</span><span style="color:#6F42C1;">getById</span><span style="color:#24292E;">(res.</span><span style="color:#6F42C1;">getSpuId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        skuItemVo.</span><span style="color:#6F42C1;">setDesc</span><span style="color:#24292E;">(spuInfo);</span></span>
<span class="line"><span style="color:#24292E;">    },executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; baseAttrFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> infoFutrue.</span><span style="color:#6F42C1;">thenAcceptAsync</span><span style="color:#24292E;">(res </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//5 获取spu规格参数信息</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">SpuItemAttrGroup</span><span style="color:#24292E;">&gt; attrGroups </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> attrGroupService.</span><span style="color:#6F42C1;">getAttrGroupWithAttrsBySpuId</span><span style="color:#24292E;">(res.</span><span style="color:#6F42C1;">getSpuId</span><span style="color:#24292E;">(), res.</span><span style="color:#6F42C1;">getCatalogId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        skuItemVo.</span><span style="color:#6F42C1;">setGroupAttrs</span><span style="color:#24292E;">(attrGroups);</span></span>
<span class="line"><span style="color:#24292E;">    }, executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 6.查询当前sku是否参与秒杀优惠</span></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; secKillFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        R skuSeckillInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> seckillFeignService.</span><span style="color:#6F42C1;">getSkuSeckillInfo</span><span style="color:#24292E;">(skuId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (skuSeckillInfo.</span><span style="color:#6F42C1;">getCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            SeckillInfoVo seckillInfoVo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> skuSeckillInfo.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TypeReference&lt;</span><span style="color:#D73A49;">SeckillInfoVo</span><span style="color:#24292E;">&gt;() {});</span></span>
<span class="line"><span style="color:#24292E;">            skuItemVo.</span><span style="color:#6F42C1;">setSeckillInfoVo</span><span style="color:#24292E;">(seckillInfoVo);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }, executor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 等待所有任务都完成再返回</span></span>
<span class="line"><span style="color:#24292E;">    CompletableFuture.</span><span style="color:#6F42C1;">allOf</span><span style="color:#24292E;">(ImgageFuture,saleAttrFuture,descFuture,baseAttrFuture,secKillFuture).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> skuItemVo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2Fqq_31865983%2Farticle%2Fdetails%2F106137777" target="_blank" rel="noreferrer">Java8 CompletableFuture 用法全解</a></p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtDr9Bh0x4RiXU66VknoGOw" target="_blank" rel="noreferrer">详解 java CompletableFuture</a></p><p><a href="https://juejin.cn/post/6902655550031413262#heading-5" target="_blank" rel="noreferrer">基础篇：异步编程不会？我教你啊！</a></p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F111841508" target="_blank" rel="noreferrer">编程老司机带你玩转 CompletableFuture 异步编程</a></p><p><a href="https://juejin.cn/post/6970558076642394142?searchId=202406221656082F6DD7A414A9301E9B90" target="_blank" rel="noreferrer">CompletableFuture详解 ｜Java 开发实战</a></p><p><a href="https://juejin.cn/post/7209612932367089719?searchId=202406221656082F6DD7A414A9301E9B90#heading-25" target="_blank" rel="noreferrer">CompletableFuture实现异步编排全面分析和总结</a></p><p><a href="https://juejin.cn/post/7124124854747398175?searchId=202406221656082F6DD7A414A9301E9B90" target="_blank" rel="noreferrer">JAVA基于CompletableFuture的流水线并行处理深度实践</a></p>`,93),e=[o];function t(c,r,E,y,i,u){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{A as __pageData,g as default};
