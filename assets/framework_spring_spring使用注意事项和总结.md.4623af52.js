import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8048b864.js";const F=JSON.parse('{"title":"Spring","description":"","frontmatter":{},"headers":[],"relativePath":"framework/spring/spring使用注意事项和总结.md","filePath":"framework/spring/spring使用注意事项和总结.md","lastUpdated":1719037022000}'),p={name:"framework/spring/spring使用注意事项和总结.md"},o=l(`<h1 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-label="Permalink to &quot;Spring&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#使用注意事项和总结">使用注意事项和总结</a><ul><li><a href="#springtask">SpringTask</a></li><li><a href="#stopwatch">StopWatch</a></li><li><a href="#springasync">SpringAsync</a></li><li><a href="#springretry">SpringRetry</a></li></ul></li></ul></nav><h2 id="使用注意事项和总结" tabindex="-1">使用注意事项和总结 <a class="header-anchor" href="#使用注意事项和总结" aria-label="Permalink to &quot;使用注意事项和总结&quot;">​</a></h2><h3 id="springtask" tabindex="-1">SpringTask <a class="header-anchor" href="#springtask" aria-label="Permalink to &quot;SpringTask&quot;">​</a></h3><h4 id="scheduled注解" tabindex="-1">@Scheduled注解 <a class="header-anchor" href="#scheduled注解" aria-label="Permalink to &quot;@Scheduled注解&quot;">​</a></h4><ul><li><code>cron</code> 属性：Spring Cron 表达式。</li><li><code>fixedDelay</code> 属性：固定执行间隔，单位：毫秒。注意，以调用<strong>完成时刻</strong>为开始计时时间。</li><li><code>fixedRate</code> 属性：固定执行间隔，单位：毫秒。注意，以调用<strong>开始时刻</strong>为开始计时时间。</li><li><code>initialDelay</code> 属性：初始化的定时任务执行延迟，单位：毫秒。</li><li><code>zone</code> 属性：解析 Spring Cron 表达式的所属的时区。默认情况下，使用服务器的本地时区。</li><li><code>initialDelayString</code> 属性：<code>initialDelay</code> 的字符串形式。</li><li><code>fixedDelayString</code> 属性：<code>fixedDelay</code> 的字符串形式。</li><li><code>fixedRateString</code> 属性：<code>fixedRate</code> 的字符串形式。</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">task</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># Spring Task 调度任务的配置,对应 TaskSchedulingProperties 配置类</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#85E89D;">scheduling</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#85E89D;">thread-name-prefix</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pikaqiu-demo-</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 线程池的线程名的前缀 默认为 scheduling- </span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#85E89D;">pool</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#85E89D;">size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 线程池大小 默认为1,根据自己应用来设置</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#85E89D;">shutdown</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#85E89D;">await-termination</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 应用关闭时,是否等待定时任务执行完成 默认为 false,建议设置为 true</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#85E89D;">await-termination-period</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 等待任务完成的最大时长,单位为秒。默认为 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">task</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;"># Spring Task 调度任务的配置,对应 TaskSchedulingProperties 配置类</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#22863A;">scheduling</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#22863A;">thread-name-prefix</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pikaqiu-demo-</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 线程池的线程名的前缀 默认为 scheduling- </span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#22863A;">pool</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#22863A;">size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 线程池大小 默认为1,根据自己应用来设置</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#22863A;">shutdown</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#22863A;">await-termination</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 应用关闭时,是否等待定时任务执行完成 默认为 false,建议设置为 true</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#22863A;">await-termination-period</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 等待任务完成的最大时长,单位为秒。默认为 0</span></span></code></pre></div><h3 id="stopwatch" tabindex="-1">StopWatch <a class="header-anchor" href="#stopwatch" aria-label="Permalink to &quot;StopWatch&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test1</span><span style="color:#E1E4E8;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    StopWatch sw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StopWatch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        sw.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;task1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// do something</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        sw.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        sw.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;task2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// do something</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        throws </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterruptedException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        sw.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sw.</span><span style="color:#B392F0;">prettyPrint</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sw.</span><span style="color:#B392F0;">shortSummary</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(sw.</span><span style="color:#B392F0;">getTotalTimeMillis</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    StopWatch sw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StopWatch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        sw.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;task1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// do something</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        sw.</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        sw.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;task2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// do something</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        throws </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterruptedException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">finally</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        sw.</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sw.</span><span style="color:#6F42C1;">prettyPrint</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sw.</span><span style="color:#6F42C1;">shortSummary</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sw.</span><span style="color:#6F42C1;">getTotalTimeMillis</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h4><ul><li>优点： spring自带工具类，可直接使用 代码实现简单，使用更简单 统一归纳，展示每项任务耗时与占用总时间的百分比，展示结果直观 性能消耗相对较小，并且最大程度的保证了start与stop之间的时间记录的准确性 可在start时直接指定任务名字，从而更加直观的显示记录结果</li><li>缺点： 一个StopWatch实例一次只能开启一个task，不能同时start多个task，并且在该task未stop之前不能start一个新的task，必须在该task stop之后才能开启新的task，若要一次开启多个，需要new不同的StopWatch实例代码侵入式使用，需要改动多处代码</li></ul><h3 id="springasync" tabindex="-1">SpringAsync <a class="header-anchor" href="#springasync" aria-label="Permalink to &quot;SpringAsync&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.scheduling.annotation.AsyncConfigurerSupport;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.scheduling.annotation.EnableAsync;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.Executor;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.ThreadPoolExecutor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableAsync</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncConfigurerSupport</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> AsyncUncaughtExceptionHandler </span><span style="color:#B392F0;">getAsyncUncaughtExceptionHandler</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CusAsyncExceptionHandler</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;executor&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Executor </span><span style="color:#B392F0;">executor</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;executor 线程启动---&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ThreadPoolTaskExecutor scheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadPoolTaskExecutor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        scheduler.</span><span style="color:#B392F0;">setCorePoolSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);    </span><span style="color:#6A737D;">//基本线程数量</span></span>
<span class="line"><span style="color:#E1E4E8;">        scheduler.</span><span style="color:#B392F0;">setQueueCapacity</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">//队列最大长度</span></span>
<span class="line"><span style="color:#E1E4E8;">        scheduler.</span><span style="color:#B392F0;">setMaxPoolSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);    </span><span style="color:#6A737D;">//最大线程数量</span></span>
<span class="line"><span style="color:#E1E4E8;">        scheduler.</span><span style="color:#B392F0;">setRejectedExecutionHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ThreadPoolExecutor.</span><span style="color:#B392F0;">CallerRunsPolicy</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        scheduler.</span><span style="color:#B392F0;">setThreadNamePrefix</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Myself-Executor-&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        scheduler.</span><span style="color:#B392F0;">setKeepAliveSeconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//允许空闲时间</span></span>
<span class="line"><span style="color:#E1E4E8;">        scheduler.</span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> scheduler;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.scheduling.annotation.AsyncConfigurerSupport;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.scheduling.annotation.EnableAsync;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.Executor;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.ThreadPoolExecutor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableAsync</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncConfigurerSupport</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AsyncUncaughtExceptionHandler </span><span style="color:#6F42C1;">getAsyncUncaughtExceptionHandler</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CusAsyncExceptionHandler</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;executor&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Executor </span><span style="color:#6F42C1;">executor</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;executor 线程启动---&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ThreadPoolTaskExecutor scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolTaskExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.</span><span style="color:#6F42C1;">setCorePoolSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">//基本线程数量</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.</span><span style="color:#6F42C1;">setQueueCapacity</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//队列最大长度</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.</span><span style="color:#6F42C1;">setMaxPoolSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">//最大线程数量</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.</span><span style="color:#6F42C1;">setRejectedExecutionHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ThreadPoolExecutor.</span><span style="color:#6F42C1;">CallerRunsPolicy</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.</span><span style="color:#6F42C1;">setThreadNamePrefix</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Myself-Executor-&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.</span><span style="color:#6F42C1;">setKeepAliveSeconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//允许空闲时间</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> scheduler;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="springretry" tabindex="-1">SpringRetry <a class="header-anchor" href="#springretry" aria-label="Permalink to &quot;SpringRetry&quot;">​</a></h3><p>1.依赖</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.retry&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-retry&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.retry&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-retry&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>2.配置类加 <code>@EnableRetry</code>注解，启用重试</p><p>3.在方法上添加<code>@Retryable</code></p><p>4.方法调用实例</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestRetryService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Retryable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Exception.class,</span><span style="color:#79B8FF;">maxAttempts</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">backoff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Backoff</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">delay</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">multiplier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.5</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception{</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test被调用,时间：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">LocalTime.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (code</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;情况不对头！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test被调用,情况对头了！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestRetryService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Retryable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Exception.class,</span><span style="color:#005CC5;">maxAttempts</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">backoff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Backoff</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">delay</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">multiplier</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">code</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception{</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test被调用,时间：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">LocalTime.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (code</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;情况不对头！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test被调用,情况对头了！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>参数含义：</p><ul><li><code>value</code>：抛出指定异常才会重试</li><li><code>include</code>：和value一样，默认为空，当exclude也为空时，默认所有异常</li><li><code>exclude</code>：指定不处理的异常</li><li><code>maxAttempts</code>：最大重试次数，默认3次</li><li><code>backoff</code>：重试等待策略，默认使用<code>@Backoff</code>，<code>@Backoff</code>的value默认为1000L，我们设置为2000L；<code>multiplier</code>（指定延迟倍数）默认为0，表示固定暂停1秒后进行重试，如果把<code>multiplier</code>设置为1.5，则第一次重试为2秒，第二次为3秒，第三次为4.5秒。</li></ul><p>当重试耗尽时，<code>RetryOperations</code>可以将控制传递给另一个回调，即<code>RecoveryCallback</code>。<code>Spring-Retry</code>还提供了<code>@Recover</code>注解，用于@Retryable重试失败后处理方法。如果不需要回调方法，可以直接不写回调方法，那么实现的效果是，重试次数完了后，如果还是没成功没符合业务判断，就抛出异常。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Recover</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recover</span><span style="color:#E1E4E8;">(Exception e, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> code){</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;回调方法执行！！！！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//记日志到数据库 或者调用其余的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Recover</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recover</span><span style="color:#24292E;">(Exception e, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> code){</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;回调方法执行！！！！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//记日志到数据库 或者调用其余的方法</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">400</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到传参里面写的是 <code>Exception e</code>，这个是作为回调的接头暗号（重试次数用完了，还是失败，我们抛出这个<code>Exception e</code>通知触发这个回调方法）。对于<code>@Recover</code>注解的方法，需要特别注意的是：</p><ul><li>方法的返回值必须与<code>@Retryable</code>方法一致</li><li>方法的第一个参数，必须是Throwable类型的，建议是与<code>@Retryable</code>配置的异常一致，其他的参数，需要哪个参数，写进去就可以了（<code>@Recover</code>方法中有的）</li><li>该回调方法与重试方法写在同一个实现类里面</li></ul></blockquote><p>5.注意事项</p><ul><li>由于是基于AOP实现，所以不支持类里自调用方法</li><li>如果重试失败需要给<code>@Recover</code>注解的方法做后续处理，那这个重试的方法不能有返回值，只能是void</li><li>方法内不能使用<code>try catch</code>，只能往外抛异常</li><li><code>@Recover</code>注解来开启重试失败后调用的方法(注意,需跟重处理方法在同一个类中)，此注解注释的方法参数一定要是<code>@Retryable</code>抛出的异常，否则无法识别，可以在该方法中进行日志处理。</li></ul>`,23),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
