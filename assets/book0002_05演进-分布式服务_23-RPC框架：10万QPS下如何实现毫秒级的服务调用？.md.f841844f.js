import{_ as e,c as l,o as i,a as t}from"./app.467f35a9.js";const u=JSON.parse('{"title":"23-RPC框架：10万QPS下如何实现毫秒级的服务调用？","description":"","frontmatter":{},"headers":[{"level":3,"title":"你所知道的 RPC","slug":"你所知道的-rpc","link":"#你所知道的-rpc","children":[]},{"level":3,"title":"如何提升网络传输性能","slug":"如何提升网络传输性能","link":"#如何提升网络传输性能","children":[]},{"level":3,"title":"选择合适的序列化方式","slug":"选择合适的序列化方式","link":"#选择合适的序列化方式","children":[]},{"level":3,"title":"课程小结","slug":"课程小结","link":"#课程小结","children":[]},{"level":3,"title":"一课一思","slug":"一课一思","link":"#一课一思","children":[]}],"relativePath":"book0002/05演进-分布式服务/23-RPC框架：10万QPS下如何实现毫秒级的服务调用？.md"}'),a={name:"book0002/05演进-分布式服务/23-RPC框架：10万QPS下如何实现毫秒级的服务调用？.md"},p=t('<h1 id="_23-rpc框架-10万qps下如何实现毫秒级的服务调用" tabindex="-1">23-RPC框架：10万QPS下如何实现毫秒级的服务调用？ <a class="header-anchor" href="#_23-rpc框架-10万qps下如何实现毫秒级的服务调用" aria-hidden="true">#</a></h1><p>在<a href="./21-系统架构：每秒1万次请求的系统要做服务化拆分吗？.html">21 讲</a>和<a href="./22-微服务架构：微服务化后系统架构要如何改造？.html">22 讲</a>中，你的团队已经决定对垂直电商系统做服务化拆分，以便解决扩展性和研发成本高的问题。与此同时，你们在不断学习的过程中还发现系统做了服务化拆分之后会引入一些新的问题，这些问题我在上节课提到过，归纳起来主要是两点：</p><ul><li>服务拆分单独部署后，引入的服务跨网络通信的问题；</li><li>在拆分成多个小服务之后，服务如何治理的问题。</li></ul><p>如果想要解决这两方面问题，你需要了解微服务化所需要的中间件的基本原理和使用技巧，那么本节课，我会带你掌握解决第一个问题的核心组件：<strong>RPC 框架。</strong></p><p>来思考这样一个场景：你的垂直电商系统的 QPS 已经达到了每秒 2 万次，在做了服务化拆分之后，由于我们把业务逻辑都拆分到了单独部署的服务中，那么假设你在完成一次完整的请求时需要调用 4～5 次服务，计算下来，RPC 服务需要承载大概每秒 10 万次的请求。而你该如何设计 RPC 框架承载如此大的请求量呢？我建议你：</p><ul><li>选择合适的网络模型，有针对性地调整网络参数优化网络传输性能；</li><li>选择合适的序列化方式，以提升封包、解包的性能。</li></ul><p>接下来我从原理出发，让你对于 RPC 有一个理性的认识，这样你在设计 RPC 框架时就可以清晰地知道自己的设计目标是什么了。</p><h3 id="你所知道的-rpc" tabindex="-1">你所知道的 RPC <a class="header-anchor" href="#你所知道的-rpc" aria-hidden="true">#</a></h3><p>说到 RPC（Remote Procedure Call，远程过程调用），你不会陌生，它指的是通过网络调用另一台计算机上部署服务的技术。</p><p>而 RPC 框架就封装了网络调用的细节，让你像调用本地服务一样调用远程部署的服务。你也许觉得只有像 Dubbo、Grpc、Thrift 这些新兴的框架才算是 RPC 框架，<strong>其实严格来说，你很早之前就接触到与 RPC 相关的技术了。</strong></p><p>比如，Java 原生就有一套远程调用框架叫做 RMI（Remote Method Invocation），它可以让 Java 程序通过网络调用另一台机器上的 Java 对象的方法。它是一种远程调用的方法，也是 J2EE 时代大名鼎鼎的 EJB 的实现基础。</p><ul><li>RMI 使用专为 Java 远程对象定制的协议 JRMP（Java Remote Messaging Protocol）进行通信，这限制了它的通信双方只能是 Java 语言的程序，无法实现跨语言通信；</li><li>RMI 使用 Java 原生的对象序列化方式，生成的字节数组空间较大，效率很差。</li></ul><p><strong>另一个你可能听过的技术是 Web Service</strong>，它也可以认为是 RPC 的一种实现方式。它的优势是使用 HTTP+SOAP 协议，保证了调用可以跨语言、跨平台。只要你支持 HTTP 协议，可以解析 XML，那么就能够使用 Web Service。在我看来，由于它使用 XML 封装数据，数据包大，性能还是比较差。</p><p><strong>借上面几个例子我主要是想告诉你</strong>，RPC 并不是互联网时代的产物，也不是服务化之后才衍生出来的技术，而是一种规范，只要是封装了网络调用的细节能够实现远程调用其他服务，就可以算作是一种 RPC 技术了。</p><p><strong>那么你的垂直电商项目在使用 RPC 框架之后会产生什么变化呢？</strong></p><p>在我看来，在性能上的变化是不可忽视的，我给你举个例子。 比方说，你的电商系统中商品详情页面需要商品数据、评论数据还有店铺数据，如果在一体化的架构中，你只需要从商品库、评论库和店铺库获取数据就可以了，不考虑缓存的情况下有三次网络请求。</p><p>但是如果独立出商品服务、评论服务和店铺服务之后，那么就需要分别调用这三个服务，而这三个服务又会分别调用各自的数据库，这就是六次网络请求。如果你服务拆分得更细粒度，那么多出的网络调用就会越多，请求的延迟就会更长，而这就是你为了提升系统的扩展性在性能上所付出的代价。</p><p><img src="https://static001.geekbang.org/resource/image/1d/ce/1dba9b34e2973ec185b353becfc64fce.jpg?wh=1142*392" alt=""></p><p>那么我们要如何优化 RPC 的性能，从而尽量减少网络调用对于性能的影响呢？在这里，你首先需要了解一次 RPC 的调用都经过了哪些步骤，因为这样你才可以针对这些步骤中可能存在的性能瓶颈点提出优化方案。步骤如下：</p><ul><li>在一次 RPC 调用过程中，客户端首先会将调用的类名、方法名、参数名、参数值等信息，序列化成二进制流；</li><li>然后客户端将二进制流通过网络发送给服务端；</li><li>服务端接收到二进制流之后将它反序列化，得到需要调用的类名、方法名、参数名和参数值，再通过动态代理的方式调用对应的方法得到返回值；</li><li>服务端将返回值序列化，再通过网络发送给客户端；</li><li>客户端对结果反序列化之后，就可以得到调用的结果了。</li></ul><p><strong>过程图如下：</strong></p><p><img src="https://static001.geekbang.org/resource/image/f9/3e/f98bd80af8a4e7258251db1084e0383e.jpg?wh=1142*330" alt=""></p><p>从这张图中你可以看到网络传输的过程，将请求序列化和反序列化的过程， 所以如果要提升 RPC 框架的性能，需要从<strong>网络传输和序列化</strong>两方面来优化。</p><h3 id="如何提升网络传输性能" tabindex="-1">如何提升网络传输性能 <a class="header-anchor" href="#如何提升网络传输性能" aria-hidden="true">#</a></h3><p>在网络传输优化中，你首先要做的是选择一种高性能的 I/O 模型。所谓 I/O 模型，就是我们处理 I/O 的方式。而一般单次 I/O 请求会分为两个阶段，每个阶段对于 I/O 的处理方式是不同的。</p><p><strong>首先，I/O 会经历一个等待资源的阶段</strong>，比方说，等待网络传输数据可用，在这个过程中我们对 I/O 会有两种处理方式：</p><ul><li>阻塞。指的是在数据不可用时 I/O 请求一直阻塞，直到数据返回；</li><li>非阻塞。指的是数据不可用时 I/O 请求立即返回，直到被通知资源可用为止。</li></ul><p><strong>然后是使用资源的阶段</strong>，比如说从网络上接收到数据，并且拷贝到应用程序的缓冲区里面。在这个阶段我们也会有两种处理方式：</p><ul><li>同步处理。指的是 I/O 请求在读取或者写入数据时会阻塞，直到读取或者写入数据完成；</li><li>异步处理。指的是 I/O 请求在读取或者写入数据时立即返回，当操作系统处理完成 I/O 请求并且将数据拷贝到用户提供的缓冲区后，再通知应用 I/O 请求执行完成。</li></ul><p>将这两个阶段的四种处理方式做一些排列组合，再做一些补充，就得到了我们常见的五种 I/O 模型：</p><ul><li>同步阻塞 I/O；</li><li>同步非阻塞 I/O；</li><li>同步多路 I/O 复用；</li><li>信号驱动 I/O；</li><li>异步 I/O。</li></ul><p>你需要理解这五种 I/O 模型的区别和特点，不过在理解上你可能会有些难度，所以我来做个比喻方便你理解。</p><p>我们把 I/O 过程比喻成烧水倒水的过程，等待资源（就是烧水的过程），使用资源（就是倒水的过程）：</p><ul><li>如果你站在灶台边上一直等着（等待资源）水烧开，然后倒水（使用资源），那么就是同步阻塞 I/O；</li><li>如果你偷点儿懒，在烧水的时候躺在沙发上看会儿电视（不再时时刻刻等待资源），但是还是要时不时地去看看水开了没有，一旦水开了，马上去倒水（使用资源），那么这就是同步非阻塞 I/O；</li><li>如果你想要洗澡，需要同时烧好多壶水，那你就在看电视的间隙去看看哪壶水开了（等待多个资源），哪一壶开了就先倒哪一壶，这样就加快了烧水的速度，这就是同步多路 I/O 复用；</li><li>不过你发现自己总是跑厨房去看水开了没，太累了，于是你考虑给你的水壶加一个报警器（信号），只要水开了就马上去倒水，这就是信号驱动 I/O；</li><li>最后一种就高级了，你发明了一个智能水壶，在水烧好后自动就可以把水倒好，这就是异步 I/O。</li></ul><p>这五种 I/O 模型中最被广泛使用的是<strong>多路 I/O 复用</strong>，Linux 系统中的 select、epoll 等系统调用都是支持多路 I/O 复用模型的，Java 中的高性能网络框架 Netty 默认也是使用这种模型。你可以选择它。</p><p>选择好了一种高性能的 I/O 模型，是不是就能实现数据在网络上的高效传输呢？其实并没有那么简单，网络性能的调优涉及很多方面，其中不可忽视的一项就是<strong>网络参数的调优</strong>，接下来我带你了解其中一个典型例子。当然，你可以结合网络基础知识以及成熟 RPC 框架（比如 Dubbo）的源码来深入了解网络参数调优的方方面面。</p><p>在之前的项目中，我的团队曾经写过一个简单的 RPC 通信框架。在进行测试的时候发现远程调用一个空业务逻辑的方法时，平均响应时间居然可以到几十毫秒，这明显不符合我们的预期，在我们看来，运行一个空的方法应该在 1 毫秒之内可以返回。于是，我先在测试的时候使用 tcpdump 抓了包，发现一次请求的 ACK 包竟然要经过 40ms 才返回。在网上 google 了一下原因，发现和一个叫做 tcp_nodelay 的参数有关。这个参数是什么作用呢？</p><p>TCP 协议的包头有 20 字节，IP 协议的包头也有 20 字节，如果仅仅传输 1 字节的数据在网络上传输的就有 20 + 20 + 1 = 41 字节，其中真正有用的数据只有 1 个字节，这对效率和带宽是极大的浪费。所以在 1984 年的时候，John Nagle 提出了以他的名字命名的 Nagle`s 算法，他希望：</p><blockquote><p>如果是连续的小数据包，大小没有一个 MSS（Maximum SegmentSize，最大分段大小），并且还没有收到之前发送的数据包的 Ack 信息，那么这些小数据包就会在发送端暂存起来，直到小数据包累积到一个 MSS，或者收到一个 Ack 为止。</p></blockquote><p>这原本是为了减少不必要的网络传输，但是如果接收端开启了 DelayedACK（延迟 ACK 的发送，这样可以合并多个 ACK，提升网络传输效率），那就会发生发送端发送第一个数据包后接收端没有返回 ACK，这时发送端发送了第二个数据包，因为 Nagle`s 算法的存在，并且第一个发送包的 ACK 还没有返回，所以第二个包会暂存起来。而 DelayedACK 的超时时间默认是 40ms，所以一旦到了 40ms，接收端回给发送端 ACK，那么发送端才会发送第二个包，这样就增加了延迟。</p><p><strong>解决的方式非常简单</strong>：只要在 Socket 上开启 tcp_nodelay 就好了，这个参数关闭了 Nagle`s 算法，这样发送端就不需要等到上一个发送包的 ACK 返回直接发送新的数据包就好了。这对于强网络交互的场景来说非常的适用，基本上，如果你要自己实现一套网络框架，tcp_nodelay 这个参数最好是要开启的。</p><h3 id="选择合适的序列化方式" tabindex="-1">选择合适的序列化方式 <a class="header-anchor" href="#选择合适的序列化方式" aria-hidden="true">#</a></h3><p><strong>在对网络数据传输完成调优之后，另外一个需要关注的点就是数据的序列化和反序列化</strong>。通常所说的序列化是将传输对象转换成二进制串的过程，而反序列化则是相反的动作，是将二进制串转换成对象的过程。</p><p>从上面的 RPC 调用过程中你可以看到，一次 RPC 调用需要经历两次数据序列化的过程和两次数据反序列化的过程，可见它们对于 RPC 的性能影响是很大的，那么我们在选择序列化方式的时候需要考虑哪些因素呢？</p><p>首先需要考虑的肯定是性能嘛，性能包括时间上的开销和空间上的开销，时间上的开销就是序列化和反序列化的速度，这是显而易见需要重点考虑的，而空间上的开销则是序列化后的二进制串的大小，过大的二进制串也会占据传输带宽影响传输效率。</p><p>除去性能之外，我们需要考虑的是它是否可以跨语言、跨平台，这一点也非常重要，因为一般的公司的技术体系都不是单一的，使用的语言也不是单一的，那么如果你的 RPC 框架中传输的数据只能被一种语言解析，这无疑限制了框架的使用。</p><p>另外，扩展性也是一个需要考虑的重点问题。你想想，如果对象增加了一个字段就会造成传输协议的不兼容，导致服务调用失败，这会是多么可怕的事情。</p><p>综合上面的几个考虑点，在我看来，<strong>我们的序列化备选方案主要有以下几种</strong>：</p><p>首先是大家熟知的 JSON，它起源于 JavaScript 是一种最广泛使用的序列化协议，它的优势简单易用，同时在性能上相比 XML 有比较大的优势。</p><p>另外的 Thrift 和 Protobuf 都是需要引入 IDL（Interface description language）的，也就是需要按照约定的语法写一个 IDL 文件，然后通过特定的编译器将它转换成各语言对应的代码，从而实现跨语言的特点。</p><p>Thrift 是 Facebook 开源的高性能的序列化协议，也是一个轻量级的 RPC 框架；Protobuf 是谷歌开源的序列化协议。它们的共同特点是无论在空间上还是时间上都有着很高的性能，缺点就是由于 IDL 存在带来一些使用上的不方便。</p><p>那么你要如何选择这几种序列化协议呢？这里我给你几点建议：</p><ul><li>如果对于性能要求不高，在传输数据占用带宽不大的场景下可以使用 JSON 作为序列化协议；</li><li>如果对于性能要求比较高，那么使用 Thrift 或者 Protobuf 都可以。而 Thrift 提供了配套的 RPC 框架，所以想要一体化的解决方案，你可以优先考虑 Thrift；</li><li>在一些存储的场景下，比如说你的缓存中存储的数据占用空间较大，那么你可以考虑使用 Protobuf 替换 JSON 作为存储数据的序列化方式。</li></ul><h3 id="课程小结" tabindex="-1">课程小结 <a class="header-anchor" href="#课程小结" aria-hidden="true">#</a></h3><p>为了优化 RPC 框架的性能，本节课我带你了解了网络 I/O 模型和序列化方式的选择，它们是实现高并发 RPC 框架的要素，总结起来有三个要点：</p><ol><li>选择高性能的 I/O 模型，这里我推荐使用同步多路 I/O 复用模型；</li><li>调试网络参数，这里面有一些经验值的推荐。比如将 tcp_nodelay 设置为 true，也有一些参数需要在运行中来调试，比如接受缓冲区和发送缓冲区的大小，客户端连接请求缓冲队列的大小（back log）等等；</li><li>序列化协议依据具体业务来选择。如果对性能要求不高可以选择 JSON，否则可以从 Thrift 和 Protobuf 中选择其一。</li></ol><p>在学习本节课的过程中，我建议你阅读一下成熟的 RPC 框架的源代码。比如阿里开源的 Dubbo、微博的 Motan 等等，理解它们的实现原理和细节，这样你会更有信心维护好你的微服务系统；同时你也可以从优秀的代码中学习到代码设计的技巧，比如说 Dubbo 对于 RPC 的抽象，SPI 扩展点的设计，这样可以有助你提升代码能力。</p><p>当然了，本节课我不仅仅想让你了解 RPC 框架实现的一些原理，更想让你了解在做网络编程时需要考虑哪些关键点，这样你在设计此类型的系统时就会有一些考虑的方向和思路了。</p><h3 id="一课一思" tabindex="-1">一课一思 <a class="header-anchor" href="#一课一思" aria-hidden="true">#</a></h3><p>你在实际的工作中可能已经使用过一些 RPC 框架，那么结合你的实际经验，可以和我说说在 RPC 框架使用过程中，遇到了哪些问题吗？又是如何排查和解决的呢？欢迎在留言区与我分享你的经验。</p>',60),r=[p];function o(n,s,c,h,P,d){return i(),l("div",null,r)}const C=e(a,[["render",o]]);export{u as __pageData,C as default};
