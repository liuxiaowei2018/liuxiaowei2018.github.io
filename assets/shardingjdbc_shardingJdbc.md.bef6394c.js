import{_ as a,o as e,c as r,Q as t}from"./chunks/framework.8048b864.js";const b=JSON.parse('{"title":"ShardingJDBC","description":"","frontmatter":{},"headers":[],"relativePath":"shardingjdbc/shardingJdbc.md","filePath":"shardingjdbc/shardingJdbc.md","lastUpdated":1719110524000}'),i={name:"shardingjdbc/shardingJdbc.md"},l=t('<h1 id="shardingjdbc" tabindex="-1">ShardingJDBC <a class="header-anchor" href="#shardingjdbc" aria-label="Permalink to &quot;ShardingJDBC&quot;">​</a></h1><nav class="table-of-contents"><ul></ul></nav><blockquote><p>Sharding-JDBC 官方文档：<a href="https://github.com/apache/shardingsphere" target="_blank" rel="noreferrer">https://github.com/apache/shardingsphere</a></p></blockquote><blockquote><p>ShardingSphere 提供。</p><ul><li><a href="https://shardingsphere.apache.org/document/current/cn/manual/sharding-proxy/" target="_blank" rel="noreferrer">《Sharding-Proxy》</a></li><li><a href="https://shardingsphere.apache.org/document/current/cn/manual/sharding-ui/" target="_blank" rel="noreferrer">《Sharding-UI》</a></li><li><a href="https://shardingsphere.apache.org/document/current/cn/manual/sharding-jdbc/usage/orchestration/" target="_blank" rel="noreferrer">《编排治理》</a></li><li><a href="https://shardingsphere.apache.org/document/current/cn/manual/sharding-jdbc/usage/transaction/" target="_blank" rel="noreferrer">《分布式事务》</a></li><li><a href="https://shardingsphere.apache.org/document/current/cn/manual/sharding-jdbc/usage/encrypt/" target="_blank" rel="noreferrer">《数据脱敏》</a></li></ul></blockquote><h4 id="sql解析" tabindex="-1">SQL解析 <a class="header-anchor" href="#sql解析" aria-label="Permalink to &quot;SQL解析&quot;">​</a></h4><p>当Sharding-JDBC接受到一条SQL语句时，会陆续执行 SQL解析 =&gt; 查询优化 =&gt; SQL路由 =&gt; SQL改写 =&gt; SQL执行=&gt; 结果归并 ，最终返回执行结果。</p><p>SQL解析过程分为词法解析和语法解析。 词法解析器用于将SQL拆解为不可再分的原子符号，称为Token。并根据不同数据库方言所提供的字典，将其归类为关键字，表达式，字面量和操作符。 再使用语法解析器将SQL转换为抽象语法树。</p><p>供分片使用的解析上下文包含查询选择项（Select Items）、表信息（Table）、分片条件（Sharding Condition）、 自增主键信息（Auto increment Primary Key）、排序信息（Order By）、分组信息（Group By）以及分页信息（Limit、Rownum、Top）。</p><h4 id="sql路由" tabindex="-1">SQL路由 <a class="header-anchor" href="#sql路由" aria-label="Permalink to &quot;SQL路由&quot;">​</a></h4><blockquote></blockquote><h4 id="sql改写" tabindex="-1">SQL改写 <a class="header-anchor" href="#sql改写" aria-label="Permalink to &quot;SQL改写&quot;">​</a></h4><blockquote></blockquote><h4 id="sql执行" tabindex="-1">SQL执行 <a class="header-anchor" href="#sql执行" aria-label="Permalink to &quot;SQL执行&quot;">​</a></h4><blockquote></blockquote><h4 id="结果归并" tabindex="-1">结果归并 <a class="header-anchor" href="#结果归并" aria-label="Permalink to &quot;结果归并&quot;">​</a></h4><blockquote></blockquote><h4 id="分布式事务" tabindex="-1">分布式事务 <a class="header-anchor" href="#分布式事务" aria-label="Permalink to &quot;分布式事务&quot;">​</a></h4><p>Sharding-JDBC 提供了两种 <strong>柔性事务</strong>：</p><ul><li>最大努力送达型 BED ：已经实现</li><li>事务补偿型 TCC ：计划中</li></ul><h5 id="最大努力送达型" tabindex="-1">最大努力送达型 <a class="header-anchor" href="#最大努力送达型" aria-label="Permalink to &quot;最大努力送达型&quot;">​</a></h5><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301635799.png" alt="image-20230212144109161"></p><p>执行过程有 <strong>四种</strong> 情况：</p><ol><li>【红线】执行成功</li><li>【棕线】执行失败，同步重试成功</li><li>【粉线】执行失败，同步重试失败，异步重试成功</li><li>【绿线】执行失败，同步重试失败，异步重试失败，事务日志保留</li></ol><p>整体成漏斗倒三角，上一个阶段失败，交给下一个阶段重试：</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301635960.png" alt="image-20230212144134036"></p><p>整个过程通过如下 <strong>组件</strong> 完成：</p><ul><li>柔性事务管理器</li><li>最大努力送达型柔性事务</li><li>最大努力送达型事务监听器</li><li>事务日志存储器</li><li>最大努力送达型异步作业</li></ul>',27),n=[l];function o(h,s,c,d,g,u){return e(),r("div",null,n)}const m=a(i,[["render",o]]);export{b as __pageData,m as default};
