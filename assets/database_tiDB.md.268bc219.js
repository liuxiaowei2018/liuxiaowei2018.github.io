import{_ as e,o as a,c as i,Q as t}from"./chunks/framework.8048b864.js";const l="/assets/image-20230630100811247.9e645683.png",r="/assets/image-20230630101059306.db53c50a.png",o="/assets/image-20230630101800974.b05a08b7.png",d="/assets/image-20230630101938278.d78ccbe5.png",n="/assets/image-20230630102231299.3524c223.png",c="/assets/image-20230630102255210.5d1b4fbc.png",h="/assets/image-20230630102319538.fd939b0e.png",s="/assets/image-20230630102400783.7d90efb8.png",k=JSON.parse('{"title":"TiDB","description":"","frontmatter":{},"headers":[],"relativePath":"database/tiDB.md","filePath":"database/tiDB.md","lastUpdated":1697176108000}'),p={name:"database/tiDB.md"},T=t('<h1 id="tidb" tabindex="-1">TiDB <a class="header-anchor" href="#tidb" aria-label="Permalink to &quot;TiDB&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><img src="'+l+'" alt="image-20230630100811247"></p><blockquote><p>TiDB 是一个分布式 NewSQL 数据库。它支持水平弹性扩展、ACID 事务、标准 SQL、MySQL 语法和 MySQL 协议，具有数据强一致的高可用特性，是一个不仅适合 OLTP 场景还适合 OLAP 场景的混合数据库。</p></blockquote><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fpingcap%2Ftidb" target="_blank" rel="noreferrer">TiDB</a> 是 <a href="https://link.juejin.cn?target=https%3A%2F%2Fpingcap.com%2Fabout-cn%2F" target="_blank" rel="noreferrer">PingCAP</a> 公司自主设计、研发的开源分布式关系型数据库，是一款同时支持在线事务处理与在线分析处理 (Hybrid Transactional and Analytical Processing, HTAP）的融合型分布式数据库产品，具备水平扩容或者缩容、金融级高可用、实时 HTAP、云原生的分布式数据库、兼容 MySQL 5.7 协议和 MySQL 生态等重要特性。目标是为用户提供一站式 OLTP (Online Transactional Processing)、OLAP (Online Analytical Processing)、HTAP 解决方案。TiDB 适合高可用、强一致要求较高、数据规模较大等各种应用场景。</p><h3 id="newsql" tabindex="-1">NewSQL <a class="header-anchor" href="#newsql" aria-label="Permalink to &quot;NewSQL&quot;">​</a></h3><ul><li>SQL 支持，支持复杂查询和大数据分析。</li><li>支持 ACID 事务，支持隔离级别。</li><li>弹性伸缩，扩容缩容对于业务层完全透明。</li><li>高可用，自动容灾。</li></ul><p><img src="'+r+'" alt="image-20230630101059306"></p><h3 id="oltp-olap" tabindex="-1">OLTP&amp;OLAP <a class="header-anchor" href="#oltp-olap" aria-label="Permalink to &quot;OLTP&amp;OLAP&quot;">​</a></h3><h5 id="oltp-联机事务处理" tabindex="-1">OLTP(联机事务处理) <a class="header-anchor" href="#oltp-联机事务处理" aria-label="Permalink to &quot;OLTP(联机事务处理)&quot;">​</a></h5><p>OLTP(Online Transactional Processing) 即联机事务处理，OLTP 是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，记录即时的增、删、改、查，比如在银行存取一笔款，就是一个事务交易</p><p>联机事务处理是事务性非常高的系统，一般都是高可用的在线系统，以小的事务以及小的查询为主，评估其系统的时候，一般看其每秒执行的Transaction以及Execute SQL的数量。在这样的系统中，单个数据库每秒处理的Transaction往往超过几百个，或者是几千个，Select 语句的执行量每秒几千甚至几万个。典型的OLTP系统有电子商务系统、银行、证券等，如美国eBay的业务数据库，就是很典型的OLTP数据库。</p><h5 id="olap-联机分析处理" tabindex="-1">OLAP(联机分析处理) <a class="header-anchor" href="#olap-联机分析处理" aria-label="Permalink to &quot;OLAP(联机分析处理)&quot;">​</a></h5><p>OLAP(Online Analytical Processing) 即联机分析处理，是数据仓库的核心部心，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。典型的应用就是复杂的动态报表系统</p><p>在这样的系统中，语句的执行量不是考核标准，因为一条语句的执行时间可能会非常长，读取的数据也非常多。所以，在这样的系统中，考核的标准往往是磁盘子系统的吞吐量（带宽），如能达到多少MB/s的流量。</p><blockquote><p>OLTP和OLAP的特性对比</p></blockquote><table><thead><tr><th>—</th><th>OLTP</th><th>OLAP</th></tr></thead><tbody><tr><td>实时性</td><td>OLTP 实时性要求高，OLTP 数据库旨在使事务应用程序仅写入所需的数据，以便尽快处理单个事务</td><td>OLAP 的实时性要求不是很高，很多应用顶多是每天更新一下数据</td></tr><tr><td>数据量</td><td>OLTP 数据量不是很大，一般只读 / 写数十条记录，处理简单的事务</td><td>OLAP 数据量大，因为 OLAP 支持的是动态查询，所以用户也许要通过将很多数据的统计后才能得到想要知道的信息，例如时间序列分析等等，所以处理的数据量很大</td></tr><tr><td>用户和系统的面向性</td><td>OLTP 是面向顾客的，用于事务和查询处理</td><td>OLAP 是面向市场的，用于数据分析</td></tr><tr><td>数据库设计</td><td>OLTP 采用实体 - 联系 ER 模型和面向应用的数据库设计</td><td>OLAP 采用星型或雪花模型和面向主题的数据库设计</td></tr></tbody></table><blockquote><p>设计角度区别</p></blockquote><table><thead><tr><th>—</th><th>OLTP</th><th>OLAP</th></tr></thead><tbody><tr><td>用户</td><td>操作人员，低层管理人员</td><td>决策人员，高级管理人员</td></tr><tr><td>功能</td><td>日常操作处理</td><td>分析决策</td></tr><tr><td>主要工作</td><td>增、删、改</td><td>查询</td></tr><tr><td>DB 设计</td><td>面向应用</td><td>面向主题</td></tr><tr><td>数据</td><td>当前的，最新的细节，二维的，分立的</td><td>历史的，聚集的，多维集成的，统一的</td></tr><tr><td>存取</td><td>读/写数十条记录</td><td>读上百万条记录</td></tr><tr><td>工作单位</td><td>简单的事务</td><td>复杂的查询</td></tr><tr><td>用户数</td><td>上千个</td><td>上百个</td></tr><tr><td>DB 大小</td><td>100MB-GB</td><td>100GB-TB</td></tr></tbody></table><h3 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h3><h4 id="水平弹性扩展" tabindex="-1">水平弹性扩展 <a class="header-anchor" href="#水平弹性扩展" aria-label="Permalink to &quot;水平弹性扩展&quot;">​</a></h4><blockquote><p>通过简单地增加新节点即可实现 TiDB 的水平扩展，按需扩展吞吐或存储，轻松应对高并发、海量数据场景</p></blockquote><p>得益于 TiDB 存储计算分离的架构的设计，可按需对计算、存储分别进行在线扩容或者缩容，扩容或者缩容过程中对应用运维人员透明。</p><h4 id="分布式事务支持" tabindex="-1">分布式事务支持 <a class="header-anchor" href="#分布式事务支持" aria-label="Permalink to &quot;分布式事务支持&quot;">​</a></h4><p>TiDB 100% 支持标准的 ACID 事务</p><h4 id="金融级高可用" tabindex="-1">金融级高可用 <a class="header-anchor" href="#金融级高可用" aria-label="Permalink to &quot;金融级高可用&quot;">​</a></h4><blockquote><p>相比于传统主从 (M-S) 复制方案，基于 Raft 的多数派选举协议可以提供金融级的 100% 数据强一致性保证，且在不丢失大多数副本的前提下，可以实现故障的自动恢复 (auto-failover)，无需人工介入</p></blockquote><p>数据采用多副本存储，数据副本通过 Multi-Raft 协议同步事务日志，多数派写入成功事务才能提交，确保数据强一致性且少数副本发生故障时不影响数据的可用性。可按需配置副本地理位置、副本数量等策略满足不同容灾级别的要求。</p><h4 id="实时-htap" tabindex="-1">实时 HTAP <a class="header-anchor" href="#实时-htap" aria-label="Permalink to &quot;实时 HTAP&quot;">​</a></h4><blockquote><p>TiDB 作为典型的 OLTP 行存数据库，同时兼具强大的 OLAP 性能，配合 TiSpark，可提供一站式 HTAP 解决方案，一份存储同时处理 OLTP &amp; OLAP 无需传统繁琐的 ETL 过程</p></blockquote><p>提供行存储引擎 TiKV、列存储引擎 TiFlash 两款存储引擎，TiFlash 通过 Multi-Raft Learner 协议实时从 TiKV 复制数据，确保行存储引擎 TiKV 和列存储引擎 TiFlash 之间的数据强一致。TiKV、TiFlash 可按需部署在不同的机器，解决 HTAP 资源隔离的问题。</p><h4 id="云原生的分布式数据库" tabindex="-1">云原生的分布式数据库 <a class="header-anchor" href="#云原生的分布式数据库" aria-label="Permalink to &quot;云原生的分布式数据库&quot;">​</a></h4><p>TiDB 是为云而设计的数据库，同 Kubernetes 深度耦合，支持公有云、私有云和混合云，使部署、配置和维护变得十分简单。TiDB 的设计目标是 100% 的 OLTP 场景和 80% 的 OLAP 场景，更复杂的 OLAP 分析可以通过 TiSpark 项目来完成。 TiDB 对业务没有任何侵入性，能优雅的替换传统的数据库中间件、数据库分库分表等 Sharding 方案。同时它也让开发运维人员不用关注数据库 Scale 的细节问题，专注于业务开发，极大的提升研发的生产力</p><h4 id="高度兼容-mysql" tabindex="-1">高度兼容 MySQL <a class="header-anchor" href="#高度兼容-mysql" aria-label="Permalink to &quot;高度兼容 MySQL&quot;">​</a></h4><p>兼容 MySQL 5.7 协议、MySQL 常用的功能、MySQL 生态，应用无需或者修改少量代码即可从 MySQL 迁移到 TiDB。</p><p>提供丰富的数据迁移工具帮助应用便捷完成数据迁移，大多数情况下，无需修改代码即可从 MySQL 轻松迁移至 TiDB，分库分表后的 MySQL 集群亦可通过 TiDB 工具进行实时迁移。</p><h2 id="整体架构" tabindex="-1">整体架构 <a class="header-anchor" href="#整体架构" aria-label="Permalink to &quot;整体架构&quot;">​</a></h2><blockquote><p>与传统的单机数据库相比，TiDB 具有以下优势：</p></blockquote><ul><li>纯分布式架构，拥有良好的扩展性，支持弹性的扩缩容</li><li>支持 SQL，对外暴露 MySQL 的网络协议，并兼容大多数 MySQL 的语法，在大多数场景下可以直接替换 MySQL</li><li>默认支持高可用，在少数副本失效的情况下，数据库本身能够自动进行数据修复和故障转移，对业务透明</li><li>支持 ACID 事务，对于一些有强一致需求的场景友好，例如：银行转账</li><li>具有丰富的工具链生态，覆盖数据迁移、同步、备份等多种场景</li></ul><p><img src="'+o+'" alt="image-20230630101800974"></p><p>TiDB 集群主要包括三个核心组件：TiDB Server，PD Server 和 TiKV Server，此外，还有用于解决用户复杂 OLAP 需求的 TiSpark 组件。</p><p>在内核设计上，TiDB 分布式数据库将整体架构拆分成了多个模块，各模块之间互相通信，组成完整的 TiDB 系统。</p><h3 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h3><h4 id="tidb-server" tabindex="-1">TiDB Server <a class="header-anchor" href="#tidb-server" aria-label="Permalink to &quot;TiDB Server&quot;">​</a></h4><p>TiDB Server 负责接收 SQL 请求，处理 SQL 相关的逻辑，并通过 PD 找到存储计算所需数据的 TiKV 地址，与 TiKV 交互获取数据，最终返回结果。TiDB Server 是无状态的，其本身并不存储数据，只负责计算，可以无限水平扩展，可以通过负载均衡组件（如 LVS、HAProxy 或 F5）对外提供统一的接入地址。</p><h4 id="pd-placement-driver-server" tabindex="-1">PD (Placement Driver) Server <a class="header-anchor" href="#pd-placement-driver-server" aria-label="Permalink to &quot;PD (Placement Driver) Server&quot;">​</a></h4><blockquote><p>Placement Driver (简称 PD) 是整个集群的管理模块，其主要工作有三个：</p></blockquote><ul><li>一是存储集群的元信息（某个 Key 存储在哪个 TiKV 节点）；</li><li>二是对 TiKV 集群进行调度和负载均衡（如数据的迁移、Raft group leader 的迁移等）；</li><li>三是分配全局唯一且递增的事务 ID。</li></ul><p>PD 通过 Raft 协议保证数据的安全性。Raft 的 leader server 负责处理所有操作，其余的 PD server 仅用于保证高可用。建议部署奇数个 PD 节点</p><h4 id="tikv-server" tabindex="-1">TiKV Server <a class="header-anchor" href="#tikv-server" aria-label="Permalink to &quot;TiKV Server&quot;">​</a></h4><p>TiKV Server 负责存储数据，从外部看 TiKV 是一个分布式的提供事务的 Key-Value 存储引擎。存储数据的基本单位是 Region，每个 Region 负责存储一个 Key Range（从 StartKey 到 EndKey 的左闭右开区间）的数据，每个 TiKV 节点会负责多个 Region。TiKV 使用 Raft 协议做复制，保持数据的一致性和容灾。副本以 Region 为单位进行管理，不同节点上的多个 Region 构成一个 Raft Group，互为副本。数据在多个 TiKV 之间的负载均衡由 PD 调度，这里也是以 Region 为单位进行调度。</p><blockquote><p>与传统的整节点备份方式不同的，TiKV是将数据按照 key 的范围划分成大致相等的切片（下文统称为 Region），每一个切片会有多个副本（通常是 3 个），其中一个副本是 Leader，提供读写服务。TiKV 通过 PD 对这些 Region 以及副本进行调度，以保证数据和读写负载都均匀地分散在各个 TiKV 上，这样的设计保证了整个集群资源的充分利用并且可以随着机器数量的增加水平扩展。</p></blockquote><p><img src="'+d+'" alt="image-20230630101938278"></p><h5 id="region分裂与合并" tabindex="-1">Region分裂与合并 <a class="header-anchor" href="#region分裂与合并" aria-label="Permalink to &quot;Region分裂与合并&quot;">​</a></h5><p>当某个 Region 的大小超过一定限制（默认是 144MB）后，TiKV 会将它分裂为两个或者更多个 Region，以保证各个 Region 的大小是大致接近的，这样更有利于 PD 进行调度决策。同样，当某个 Region 因为大量的删除请求导致 Region 的大小变得更小时，TiKV 会将比较小的两个相邻 Region 合并为一个。</p><h5 id="region调度" tabindex="-1">Region调度 <a class="header-anchor" href="#region调度" aria-label="Permalink to &quot;Region调度&quot;">​</a></h5><p>Region 与副本之间通过 Raft 协议来维持数据一致性，任何写请求都只能在 Leader 上写入，并且需要写入多数副本后（默认配置为 3 副本，即所有请求必须至少写入两个副本成功）才会返回客户端写入成功。</p><p>当 PD 需要把某个 Region 的一个副本从一个 TiKV 节点调度到另一个上面时，PD 会先为这个 Raft Group 在目标节点上增加一个 Learner 副本（复制 Leader 的数据）。当这个 Learner 副本的进度大致追上 Leader 副本时，Leader 会将它变更为 Follower，之后再移除操作节点的 Follower 副本，这样就完成了 Region 副本的一次调度。</p><p>Leader 副本的调度原理也类似，不过需要在目标节点的 Learner 副本变为 Follower 副本后，再执行一次 Leader Transfer，让该 Follower 主动发起一次选举成为新 Leader，之后新 Leader 负责删除旧 Leader 这个副本。</p><h5 id="分布式事务" tabindex="-1">分布式事务 <a class="header-anchor" href="#分布式事务" aria-label="Permalink to &quot;分布式事务&quot;">​</a></h5><p>TiKV 支持分布式事务，用户（或者 TiDB）可以一次性写入多个 key-value 而不必关心这些 key-value 是否处于同一个数据切片 (Region) 上，TiKV 通过两阶段提交保证了这些读写请求的 ACID 约束。</p><h4 id="tispark" tabindex="-1">TiSpark <a class="header-anchor" href="#tispark" aria-label="Permalink to &quot;TiSpark&quot;">​</a></h4><p>TiSpark 作为 TiDB 中解决用户复杂 OLAP 需求的主要组件，将 Spark SQL 直接运行在 TiDB 存储层上，同时融合 TiKV 分布式集群的优势，并融入大数据社区生态。至此，TiDB 可以通过一套系统，同时支持 OLTP 与 OLAP，免除用户数据同步的烦恼。</p><h4 id="tiflash" tabindex="-1">TiFlash <a class="header-anchor" href="#tiflash" aria-label="Permalink to &quot;TiFlash&quot;">​</a></h4><p>TiFlash 是一类特殊的存储节点。和普通 TiKV 节点不一样的是，在 TiFlash 内部，数据是以列式的形式进行存储，主要的功能是为分析型的场景加速。</p><h3 id="高可用架构" tabindex="-1">高可用架构 <a class="header-anchor" href="#高可用架构" aria-label="Permalink to &quot;高可用架构&quot;">​</a></h3><blockquote><p>高可用是 TiDB 的另一大特点，TiDB/TiKV/PD 这三个组件都能容忍部分实例失效，不影响整个集群的可用性。下面分别说明这三个组件的可用性、单个实例失效后的后果以及如何恢复。</p></blockquote><h4 id="tidb高可用" tabindex="-1">TiDB高可用 <a class="header-anchor" href="#tidb高可用" aria-label="Permalink to &quot;TiDB高可用&quot;">​</a></h4><p>TiDB 是无状态的，推荐至少部署两个实例，前端通过负载均衡组件对外提供服务。当单个实例失效时，会影响正在这个实例上进行的 Session，从应用的角度看，会出现单次请求失败的情况，重新连接后即可继续获得服务。单个实例失效后，可以重启这个实例或者部署一个新的实例。</p><h4 id="pd高可用" tabindex="-1">PD高可用 <a class="header-anchor" href="#pd高可用" aria-label="Permalink to &quot;PD高可用&quot;">​</a></h4><p>PD 是一个集群，通过 Raft 协议保持数据的一致性，单个实例失效时，如果这个实例不是 Raft 的 leader，那么服务完全不受影响；如果这个实例是 Raft 的 leader，会重新选出新的 Raft leader，自动恢复服务。PD 在选举的过程中无法对外提供服务，这个时间大约是3秒钟。推荐至少部署三个 PD 实例，单个实例失效后，重启这个实例或者添加新的实例。</p><h4 id="tikv高可用" tabindex="-1">TiKV高可用 <a class="header-anchor" href="#tikv高可用" aria-label="Permalink to &quot;TiKV高可用&quot;">​</a></h4><p>TiKV 是一个集群，通过 Raft 协议保持数据的一致性（副本数量可配置，默认保存三副本），并通过 PD 做负载均衡调度。单个节点失效时，会影响这个节点上存储的所有 Region。对于 Region 中的 Leader 结点，会中断服务，等待重新选举；对于 Region 中的 Follower 节点，不会影响服务。当某个 TiKV 节点失效，并且在一段时间内（默认 10 分钟）无法恢复，PD 会将其上的数据迁移到其他的 TiKV 节点上。</p><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><h3 id="mysql分片与合并" tabindex="-1">MySQL分片与合并 <a class="header-anchor" href="#mysql分片与合并" aria-label="Permalink to &quot;MySQL分片与合并&quot;">​</a></h3><p><img src="'+n+'" alt="image-20230630102231299"></p><p>TiDB 应用的第一类场景是 MySQL 的分片与合并。对于已经在用 MySQL 的业务，分库、分表、分片、中间件是常用手段，随着分片的增多，跨分片查询是一大难题。TiDB 在业务层兼容 MySQL 的访问协议，PingCAP 做了一个数据同步的工具——Syncer，它可以把黄东旭 TiDB 作为一个 MySQL Slave，将 TiDB 作为现有数据库的从库接在主 MySQL 库的后方，在这一层将数据打通，可以直接进行复杂的跨库、跨表、跨业务的实时 SQL 查询。黄东旭提到，“过去的数据库都是一主多从，有了 TiDB 以后，可以反过来做到多主一从。”</p><h3 id="直接替换mysql" tabindex="-1">直接替换MySQL <a class="header-anchor" href="#直接替换mysql" aria-label="Permalink to &quot;直接替换MySQL&quot;">​</a></h3><p><img src="'+c+'" alt="image-20230630102255210"></p><p>用 TiDB 直接去替换 MySQL。如果你的IT架构在搭建之初并未考虑分库分表的问题，全部用了 MySQL，随着业务的快速增长，海量高并发的 OLTP 场景越来越多，如何解决架构上的弊端呢?</p><p>在一个 TiDB 的数据库上，所有业务场景不需要做分库分表，所有的分布式工作都由数据库层完成。TiDB 兼容 MySQL 协议，所以可以直接替换 MySQL，而且基本做到了开箱即用，完全不用担心传统分库分表方案带来繁重的工作负担和复杂的维护成本，友好的用户界面让常规的技术人员可以高效地进行维护和管理。另外，TiDB 具有 NoSQL 类似的扩容能力，在数据量和访问流量持续增长的情况下能够通过水平扩容提高系统的业务支撑能力，并且响应延迟稳定。</p><h3 id="数据仓库" tabindex="-1">数据仓库 <a class="header-anchor" href="#数据仓库" aria-label="Permalink to &quot;数据仓库&quot;">​</a></h3><p><img src="'+h+'" alt="image-20230630102319538"></p><p>TPC-H 是数据分析领域的一个测试集，TiDB 2.0 在 OLAP 场景下的性能有了大幅提升，原来只能在数据仓库里面跑的一些复杂的 Query，在 TiDB 2.0 里面跑，时间基本都能控制在 10 秒以内。当然，因为 OLAP 的范畴非常大，TiDB 的 SQL 也有搞不定的情况，为此 PingCAP 开源了 TiSpark，TiSpark 是一个 Spark 插件，用户可以直接用 Spark SQL 实时地在 TiKV 上做大数据分析。</p><h3 id="作为其他系统的模块" tabindex="-1">作为其他系统的模块 <a class="header-anchor" href="#作为其他系统的模块" aria-label="Permalink to &quot;作为其他系统的模块&quot;">​</a></h3><p><img src="'+s+'" alt="image-20230630102400783"></p><p>TiDB 是一个传统的存储跟计算分离的项目，其底层的 Key-Value 层，可以单独作为一个 HBase 的 Replacement 来用，它同时支持跨行事务。TiDB 对外提供两个 API 接口，一个是 ACID Transaction 的 API，用于支持跨行事务；另一个是 Raw API，它可以做单行的事务，换来的是整个性能的提升，但不提供跨行事务的 ACID 支持。用户可以根据自身的需求在两个 API 之间自行选择。例如有一些用户直接在 TiKV 之上实现了 Redis 协议，将 TiKV 替换一些大容量，对延迟要求不高的 Redis 场景。</p><h2 id="tidb兼容性" tabindex="-1">TiDB兼容性 <a class="header-anchor" href="#tidb兼容性" aria-label="Permalink to &quot;TiDB兼容性&quot;">​</a></h2><h3 id="tidb与mysql兼容性" tabindex="-1">TiDB与MySQL兼容性 <a class="header-anchor" href="#tidb与mysql兼容性" aria-label="Permalink to &quot;TiDB与MySQL兼容性&quot;">​</a></h3><ul><li>TiDB<strong>支持MySQL</strong>传输协议及其绝大多数的语法。这意味着您现有的MySQL连接器和客户端都可以继续使用。 大多数情况下您现有的应用都可以迁移至 TiDB，无需任何代码修改。</li><li>当前TiDB服务器官方支持的版本为<strong>MySQL 5.7</strong>。大部分MySQL运维工具（如PHPMyAdmin, Navicat, MySQL Workbench等），以及备份恢复工具（如 mysqldump, Mydumper/myloader）等都可以直接使用。</li><li>不过一些特性由于在分布式环境下没法很好的实现，目前暂时不支持或者是表现与MySQL有差异</li><li><strong>一些MySQL语法在TiDB中可以解析通过，但是不会做任何后续的处理</strong>，例如Create Table语句中Engine，是解析并忽略。</li></ul><h4 id="tidb不支持的mysql特性" tabindex="-1">TiDB不支持的MySql特性 <a class="header-anchor" href="#tidb不支持的mysql特性" aria-label="Permalink to &quot;TiDB不支持的MySql特性&quot;">​</a></h4><ul><li>存储过程与函数</li><li>触发器</li><li>事件</li><li>自定义函数</li><li>外键约束</li><li>临时表</li><li>全文/空间函数与索引</li><li>非 <code>ascii</code>/<code>latin1</code>/<code>binary</code>/<code>utf8</code>/<code>utf8mb4</code> 的字符集</li><li>SYS schema</li><li>MySQL 追踪优化器</li><li>XML 函数</li><li>X-Protocol</li><li>Savepoints</li><li>列级权限</li><li><code>XA</code> 语法（TiDB 内部使用两阶段提交，但并没有通过 SQL 接口公开）</li><li><code>CREATE TABLE tblName AS SELECT stmt</code> 语法</li><li><code>CHECK TABLE</code> 语法</li><li><code>CHECKSUM TABLE</code> 语法</li><li><code>GET_LOCK</code> 和 <code>RELEASE_LOCK</code> 函数</li></ul><h4 id="自增id" tabindex="-1">自增ID <a class="header-anchor" href="#自增id" aria-label="Permalink to &quot;自增ID&quot;">​</a></h4><p>TiDB 的自增列仅保证唯一，也能保证在单个 TiDB server 中自增，但不保证多个 TiDB server 中自增，不保证自动分配的值的连续性，建议不要将缺省值和自定义值混用，若混用可能会收 <code>Duplicated Error</code> 的错误信息。</p><p>TiDB 可通过 <code>tidb_allow_remove_auto_inc</code> 系统变量开启或者关闭允许移除列的 <code>AUTO_INCREMENT</code> 属性。删除列属性的语法是：<code>alter table modify</code> 或 <code>alter table change</code>。</p><p>TiDB 不支持添加列的 <code>AUTO_INCREMENT</code> 属性，移除该属性后不可恢复。</p><h4 id="select-的限制" tabindex="-1">SELECT 的限制 <a class="header-anchor" href="#select-的限制" aria-label="Permalink to &quot;SELECT 的限制&quot;">​</a></h4><ul><li>不支持 <code>SELECT ... INTO @变量</code> 语法。</li><li>不支持 <code>SELECT ... GROUP BY ... WITH ROLLUP</code> 语法。</li><li>TiDB 中的 <code>SELECT .. GROUP BY expr</code> 的返回结果与 MySQL 5.7 并不一致。MySQL 5.7 的结果等价于 <code>GROUP BY expr ORDER BY expr</code>。而 TiDB 中该语法所返回的结果并不承诺任何顺序，与 MySQL 8.0 的行为一致。</li></ul><h4 id="视图" tabindex="-1">视图 <a class="header-anchor" href="#视图" aria-label="Permalink to &quot;视图&quot;">​</a></h4><p>目前TiDB<strong>不支持</strong>对视图进行UPDATE、INSERT、DELETE等<strong>写入操作</strong>。</p><h4 id="默认设置差异" tabindex="-1">默认设置差异 <a class="header-anchor" href="#默认设置差异" aria-label="Permalink to &quot;默认设置差异&quot;">​</a></h4><h5 id="字符集" tabindex="-1">字符集 <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;字符集&quot;">​</a></h5><ul><li>TiDB 默认：<code>utf8mb4</code>。</li><li>MySQL 5.7 默认：<code>latin1</code>。</li><li>MySQL 8.0 默认：<code>utf8mb4</code>。</li></ul><h5 id="排序规则" tabindex="-1">排序规则 <a class="header-anchor" href="#排序规则" aria-label="Permalink to &quot;排序规则&quot;">​</a></h5><ul><li>TiDB 中 <code>utf8mb4</code> 字符集默认：<code>utf8mb4_bin</code>。</li><li>MySQL 5.7 中 <code>utf8mb4</code> 字符集默认：<code>utf8mb4_general_ci</code>。</li><li>MySQL 8.0 中 <code>utf8mb4</code> 字符集默认：<code>utf8mb4_0900_ai_ci</code>。</li></ul><h5 id="大小写敏感" tabindex="-1">大小写敏感 <a class="header-anchor" href="#大小写敏感" aria-label="Permalink to &quot;大小写敏感&quot;">​</a></h5><blockquote><p>关于<code>lower_case_table_names</code>的配置</p></blockquote><ul><li>TiDB 默认：<code>2</code>，且仅支持设置该值为 <code>2</code>。</li><li>MySQL 默认如下： <ul><li>Linux 系统中该值为 <code>0</code></li><li>Windows 系统中该值为 <code>1</code></li><li>macOS 系统中该值为 <code>2</code></li></ul></li></ul><h6 id="参数解释" tabindex="-1">参数解释 <a class="header-anchor" href="#参数解释" aria-label="Permalink to &quot;参数解释&quot;">​</a></h6><ul><li>lower_case_table_names=0 表名存储为给定的大小和比较是区分大小写的</li><li>lower_case_table_names = 1 表名存储在磁盘是小写的，但是比较的时候是不区分大小写</li><li>lower_case_table_names=2 表名存储为给定的大小写但是比较的时候是小写的</li></ul><h5 id="timestamp类型字段更新" tabindex="-1">timestamp类型字段更新 <a class="header-anchor" href="#timestamp类型字段更新" aria-label="Permalink to &quot;timestamp类型字段更新&quot;">​</a></h5><blockquote><p>默认情况下，timestamp类型字段所在数据行被更新时，该字段会自动更新为当前时间，而参数explicit_defaults_for_timestamp控制这一种行为。</p></blockquote><ul><li>TiDB 默认：<code>ON</code>，且仅支持设置该值为 <code>ON</code>。</li><li>MySQL 5.7 默认：<code>OFF</code>。</li><li>MySQL 8.0 默认：<code>ON</code>。</li></ul><h6 id="参数解释-1" tabindex="-1">参数解释 <a class="header-anchor" href="#参数解释-1" aria-label="Permalink to &quot;参数解释&quot;">​</a></h6><ul><li>explicit_defaults_for_timestamp=off，数据行更新时，timestamp类型字段更新为当前时间</li><li>explicit_defaults_for_timestamp=on，数据行更新时，timestamp类型字段不更新为当前时间。</li></ul><h5 id="外键支持" tabindex="-1">外键支持 <a class="header-anchor" href="#外键支持" aria-label="Permalink to &quot;外键支持&quot;">​</a></h5><ul><li>TiDB 默认：<code>OFF</code>，且仅支持设置该值为 <code>OFF</code>。</li><li>MySQL 5.7 默认：<code>ON</code>。</li></ul>',117),u=[T];function b(P,m,L,q,D,S){return a(),i("div",null,u)}const B=e(p,[["render",b]]);export{k as __pageData,B as default};
