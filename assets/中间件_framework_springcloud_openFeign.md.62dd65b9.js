import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8048b864.js";const u=JSON.parse('{"title":"SpringCloud OpenFeign","description":"","frontmatter":{},"headers":[],"relativePath":"中间件/framework/springcloud/openFeign.md","filePath":"中间件/framework/springcloud/openFeign.md","lastUpdated":null}'),p={name:"中间件/framework/springcloud/openFeign.md"},e=l(`<h1 id="springcloud-openfeign" tabindex="-1">SpringCloud OpenFeign <a class="header-anchor" href="#springcloud-openfeign" aria-label="Permalink to &quot;SpringCloud OpenFeign&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1、openfeign入门">1、OpenFeign入门</a></li><li><a href="#_2、openfeign应用">2、OpenFeign应用</a></li><li><a href="#_3、openfeign扩展">3、OpenFeign扩展</a></li></ul></nav><blockquote><p>官网地址：<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noreferrer">https://github.com/OpenFeign/feign</a></p></blockquote><h2 id="_1、openfeign入门" tabindex="-1">1、OpenFeign入门 <a class="header-anchor" href="#_1、openfeign入门" aria-label="Permalink to &quot;1、OpenFeign入门&quot;">​</a></h2><p>利用RestTemplate发起远程调用代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//url</span></span>
<span class="line"><span style="color:#E1E4E8;">String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://user-service:8081/user/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> order.</span><span style="color:#B392F0;">getUserId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//发起调用</span></span>
<span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> restTemplate.</span><span style="color:#B392F0;">getForObject</span><span style="color:#E1E4E8;">(url,User.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//url</span></span>
<span class="line"><span style="color:#24292E;">String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://user-service:8081/user/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">getUserId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//发起调用</span></span>
<span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> restTemplate.</span><span style="color:#6F42C1;">getForObject</span><span style="color:#24292E;">(url,User.class);</span></span></code></pre></div><p>此时代码可读性差，参数复杂 URL 难以维护。</p><p>而 Feign 是一个声明式的http客户端，其作用就是帮助我们优雅的实现 http 请求的发送。</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301657193.png" alt="image-20220420132922691"></p><blockquote><p>Feign集成了Ribbon、RestTemplate实现了负载均衡的执行Http调用，对原有的方式（Ribbon+RestTemplate）进行了封装</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301657767.png" alt="image-20220114114153161"></p><p>OpenFeign是springcloud在Feign的基础上支持了SpringMVC的注解，如<code>@RequestMapping</code>等等。OpenFeign的<code>@FeignClient</code>可以解析SpringMVC的<code>@RequestMapping</code>注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p></blockquote><h2 id="_2、openfeign应用" tabindex="-1">2、OpenFeign应用 <a class="header-anchor" href="#_2、openfeign应用" aria-label="Permalink to &quot;2、OpenFeign应用&quot;">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-openfeign&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-openfeign&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableDiscoveryClient</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableFeignClients</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OpenFeignApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(OpenFeignApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableDiscoveryClient</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableFeignClients</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OpenFeignApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(OpenFeignApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_3、openfeign扩展" tabindex="-1">3、OpenFeign扩展 <a class="header-anchor" href="#_3、openfeign扩展" aria-label="Permalink to &quot;3、OpenFeign扩展&quot;">​</a></h2><h4 id="openfeign传参问题" tabindex="-1">openFeign传参问题 <a class="header-anchor" href="#openfeign传参问题" aria-label="Permalink to &quot;openFeign传参问题&quot;">​</a></h4><h5 id="_1-传递json数据" tabindex="-1">1.传递JSON数据 <a class="header-anchor" href="#_1-传递json数据" aria-label="Permalink to &quot;1.传递JSON数据&quot;">​</a></h5><p>在Spring Boot 中通过<code>@RequestBody</code>标识入参。</p><p>注意：<code>openFeign</code>默认的传参方式就是JSON传参（<code>@RequestBody</code>），因此定义接口的时候可以不用<code>@RequestBody</code>注解标注，不过为了规范，一般都填上。</p><h5 id="_2-pojo表单传参" tabindex="-1">2.POJO表单传参 <a class="header-anchor" href="#_2-pojo表单传参" aria-label="Permalink to &quot;2.POJO表单传参&quot;">​</a></h5><p>openFeign提供了一个注解<code>@SpringQueryMap</code>解决POJO表单传参。</p><h5 id="_3-url中携带参数" tabindex="-1">3.URL中携带参数 <a class="header-anchor" href="#_3-url中携带参数" aria-label="Permalink to &quot;3.URL中携带参数&quot;">​</a></h5><p>针对restful方式中的GET请求,使用注解<code>@PathVariable</code>接收url中的占位符</p><h5 id="_4-普通表单参数" tabindex="-1">4.普通表单参数 <a class="header-anchor" href="#_4-普通表单参数" aria-label="Permalink to &quot;4.普通表单参数&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FeignClient</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;openFeign-provider&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OpenFeignService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 必须要@RequestParam注解标注，且value属性必须填上参数名</span></span>
<span class="line"><span style="color:#6A737D;">     * 方法参数名可以任意，但是@RequestParam注解中的value属性必须和provider中的参数名相同</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/openfeign/provider/test2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">arg1</span><span style="color:#E1E4E8;">,@</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">arg2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">FeignClient</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;openFeign-provider&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OpenFeignService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 必须要@RequestParam注解标注，且value属性必须填上参数名</span></span>
<span class="line"><span style="color:#6A737D;">     * 方法参数名可以任意，但是@RequestParam注解中的value属性必须和provider中的参数名相同</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/openfeign/provider/test2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">arg1</span><span style="color:#24292E;">,@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">arg2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="openfeign超时机制" tabindex="-1">openFeign超时机制 <a class="header-anchor" href="#openfeign超时机制" aria-label="Permalink to &quot;openFeign超时机制&quot;">​</a></h4><blockquote><p>openFeign其实是有默认的超时时间的，默认分别是连接超时时间<code>10秒</code>、读超时时间<code>60秒</code></p><p>\`\`feign.Request.Options#Options()\`</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301657526.png" alt="image-20220114115106129"></p><p>openFeign集成了Ribbon，Ribbon的默认超时连接时间、读超时时间都是是1秒<code>org.springframework.cloud.openfeign.ribbon.FeignLoadBalancer#execute</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301657277.png" alt="image-20220114115143806"></p><p><code>如果openFeign没有设置对应得超时时间，那么将会采用Ribbon的默认超时时间。</code></p></blockquote><h5 id="超时解决方案" tabindex="-1">超时解决方案 <a class="header-anchor" href="#超时解决方案" aria-label="Permalink to &quot;超时解决方案&quot;">​</a></h5><blockquote><ul><li>设置openFeign的超时时间</li><li>设置Ribbon的超时时间</li></ul><h6 id="_1-设置ribbon的超时时间-不推荐" tabindex="-1">1.设置Ribbon的超时时间（不推荐） <a class="header-anchor" href="#_1-设置ribbon的超时时间-不推荐" aria-label="Permalink to &quot;1.设置Ribbon的超时时间（不推荐）&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ribbon:</span></span>
<span class="line"><span style="color:#e1e4e8;"># 值的是建立链接所用的时间，适用于网络状况正常的情况下， 两端链接所用的时间</span></span>
<span class="line"><span style="color:#e1e4e8;">ReadTimeout: 5000</span></span>
<span class="line"><span style="color:#e1e4e8;"># 指的是建立链接后从服务器读取可用资源所用的时间</span></span>
<span class="line"><span style="color:#e1e4e8;">ConectTimeout: 5000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ribbon:</span></span>
<span class="line"><span style="color:#24292e;"># 值的是建立链接所用的时间，适用于网络状况正常的情况下， 两端链接所用的时间</span></span>
<span class="line"><span style="color:#24292e;">ReadTimeout: 5000</span></span>
<span class="line"><span style="color:#24292e;"># 指的是建立链接后从服务器读取可用资源所用的时间</span></span>
<span class="line"><span style="color:#24292e;">ConectTimeout: 5000</span></span></code></pre></div><h6 id="_2-设置openfeign的超时时间-推荐" tabindex="-1">2.设置openFeign的超时时间（推荐） <a class="header-anchor" href="#_2-设置openfeign的超时时间-推荐" aria-label="Permalink to &quot;2.设置openFeign的超时时间（推荐）&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">feign:</span></span>
<span class="line"><span style="color:#e1e4e8;">client:</span></span>
<span class="line"><span style="color:#e1e4e8;">  config:</span></span>
<span class="line"><span style="color:#e1e4e8;">    # default设置全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span>
<span class="line"><span style="color:#e1e4e8;">    default:</span></span>
<span class="line"><span style="color:#e1e4e8;">      connectTimeout: 5000</span></span>
<span class="line"><span style="color:#e1e4e8;">      readTimeout: 5000</span></span>
<span class="line"><span style="color:#e1e4e8;">    # 为serviceXXX这个服务单独配置超时时间(单个配置的超时时间将会覆盖全局配置)</span></span>
<span class="line"><span style="color:#e1e4e8;">    serviceXXX:</span></span>
<span class="line"><span style="color:#e1e4e8;">      connectTimeout: 30000</span></span>
<span class="line"><span style="color:#e1e4e8;">      readTimeout: 30000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">feign:</span></span>
<span class="line"><span style="color:#24292e;">client:</span></span>
<span class="line"><span style="color:#24292e;">  config:</span></span>
<span class="line"><span style="color:#24292e;">    # default设置全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span>
<span class="line"><span style="color:#24292e;">    default:</span></span>
<span class="line"><span style="color:#24292e;">      connectTimeout: 5000</span></span>
<span class="line"><span style="color:#24292e;">      readTimeout: 5000</span></span>
<span class="line"><span style="color:#24292e;">    # 为serviceXXX这个服务单独配置超时时间(单个配置的超时时间将会覆盖全局配置)</span></span>
<span class="line"><span style="color:#24292e;">    serviceXXX:</span></span>
<span class="line"><span style="color:#24292e;">      connectTimeout: 30000</span></span>
<span class="line"><span style="color:#24292e;">      readTimeout: 30000</span></span></code></pre></div></blockquote><h4 id="openfeign日志增强" tabindex="-1">openFeign日志增强 <a class="header-anchor" href="#openfeign日志增强" aria-label="Permalink to &quot;openFeign日志增强&quot;">​</a></h4><blockquote><p>openFeign的日志级别如下：</p><ul><li><strong>NONE</strong>：默认的，不显示任何日志;</li><li><strong>BASIC</strong>：仅记录请求方法、URL、响应状态码及执行时间;</li><li><strong>HEADERS</strong>：除了BASIC中定义的信息之外，还有请求和响应的头信息;</li><li><strong>FULL</strong>：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。</li></ul></blockquote><h5 id="_1-配置类中配置日志级别" tabindex="-1">1.配置类中配置日志级别 <a class="header-anchor" href="#_1-配置类中配置日志级别" aria-label="Permalink to &quot;1.配置类中配置日志级别&quot;">​</a></h5><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> feign.Logger;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OpenFeignConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">Logger.Level </span><span style="color:#B392F0;">feignLoggerLevel</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Logger.Level.FULL;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> feign.Logger;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OpenFeignConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">Logger.Level </span><span style="color:#6F42C1;">feignLoggerLevel</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Logger.Level.FULL;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h5 id="_2-yaml文件中设置接口日志级别" tabindex="-1">2.yaml文件中设置接口日志级别 <a class="header-anchor" href="#_2-yaml文件中设置接口日志级别" aria-label="Permalink to &quot;2.yaml文件中设置接口日志级别&quot;">​</a></h5><blockquote><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">logging</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">level</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">cn.open.feign</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">debug</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#openFeign接口所在的包</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">logging</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">level</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">cn.open.feign</span><span style="color:#24292E;">: </span><span style="color:#032F62;">debug</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#openFeign接口所在的包</span></span></code></pre></div></blockquote><h4 id="openfeign替换httpclient" tabindex="-1">openFeign替换httpclient <a class="header-anchor" href="#openfeign替换httpclient" aria-label="Permalink to &quot;openFeign替换httpclient&quot;">​</a></h4><blockquote><p>Feign在默认情况下使用的是JDK原生的<strong>URLConnection</strong>发送HTTP请求，没有连接池，但是对每个地址会保持一个长连接，即利用HTTP的persistence connection。</p><p>在生产环境中，通常不使用默认的http client，通常有如下两种选择：</p><ul><li>使用<strong>ApacheHttpClient</strong></li><li>使用<strong>OkHttp</strong></li></ul></blockquote><h5 id="使用apachehttpclient替换" tabindex="-1">使用ApacheHttpClient替换 <a class="header-anchor" href="#使用apachehttpclient替换" aria-label="Permalink to &quot;使用ApacheHttpClient替换&quot;">​</a></h5><h6 id="_1-添加依赖" tabindex="-1">1.添加依赖 <a class="header-anchor" href="#_1-添加依赖" aria-label="Permalink to &quot;1.添加依赖&quot;">​</a></h6><p>在openFeign接口服务的pom文件添加如下依赖：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--使用Apache HttpClient替换Feign原生httpclient--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.httpcomponents&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;httpclient&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.github.openfeign&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;feign-httpclient&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;9.3.1&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--使用Apache HttpClient替换Feign原生httpclient--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.httpcomponents&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;httpclient&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.github.openfeign&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;feign-httpclient&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;9.3.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>为什么要添加上面的依赖呢？从源码中不难看出，请看<code>org.springframework.cloud.openfeign.FeignAutoConfiguration.HttpClientFeignConfiguration</code></p><h6 id="_2-配置文件" tabindex="-1">2.配置文件 <a class="header-anchor" href="#_2-配置文件" aria-label="Permalink to &quot;2.配置文件&quot;">​</a></h6><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">feign</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">client</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">httpclient</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 开启 Http Client</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">feign</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">client</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">httpclient</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 开启 Http Client</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span></code></pre></div><h6 id="_3-验证成功" tabindex="-1">3.验证成功 <a class="header-anchor" href="#_3-验证成功" aria-label="Permalink to &quot;3.验证成功&quot;">​</a></h6><p>在<code>feign.SynchronousMethodHandler#executeAndDecode()</code>这个方法中可以清楚的看出调用哪个client</p><h5 id="使用okhttp替换" tabindex="-1">使用OkHttp替换 <a class="header-anchor" href="#使用okhttp替换" aria-label="Permalink to &quot;使用OkHttp替换&quot;">​</a></h5><h6 id="_1-添加依赖-1" tabindex="-1">1.添加依赖 <a class="header-anchor" href="#_1-添加依赖-1" aria-label="Permalink to &quot;1.添加依赖&quot;">​</a></h6><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.github.openfeign&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;feign-okhttp&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;10.2.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.github.openfeign&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;feign-okhttp&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;10.2.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h6 id="_2-配置文件-1" tabindex="-1">2.配置文件 <a class="header-anchor" href="#_2-配置文件-1" aria-label="Permalink to &quot;2.配置文件&quot;">​</a></h6><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">feign</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">okhttp</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#85E89D;">ribbon</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">okhttp</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">feign</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">okhttp</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#22863A;">ribbon</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">okhttp</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span></code></pre></div><h4 id="openfeign通讯优化" tabindex="-1">openFeign通讯优化 <a class="header-anchor" href="#openfeign通讯优化" aria-label="Permalink to &quot;openFeign通讯优化&quot;">​</a></h4><blockquote><p><strong>当GZIP压缩到一个纯文本数据时，效果是非常明显的，大约可以减少70％以上的数据大小。</strong></p><p>网络数据经过压缩后实际上降低了网络传输的字节数，最明显的好处就是可以加快网页加载的速度。网页加载速度加快的好处不言而喻，除了节省流量，改善用户的浏览体验外，另一个潜在的好处是GZIP与搜索引擎的抓取工具有着更好的关系。例如 Google就可以通过直接读取GZIP文件来比普通手工抓取更快地检索网页。</p><p>GZIP压缩传输的原理如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301657030.webp" alt="图片"></p><p>按照上图拆解出的步骤如下：</p><ul><li>客户端向服务器请求头中带有：<code>Accept-Encoding:gzip,deflate</code> 字段，向服务器表示，客户端支持的压缩格式（gzip或者deflate)，如果不发送该消息头，服务器是不会压缩的。</li><li>服务端在收到请求之后，如果发现请求头中含有<code>Accept-Encoding</code>字段，并且支持该类型的压缩，就对响应报文压缩之后返回给客户端，并且携带<code>Content-Encoding:gzip</code>消息头，表示响应报文是根据该格式压缩过的。</li><li>客户端接收到响应之后，先判断是否有Content-Encoding消息头，如果有，按该格式解压报文。否则按正常报文处理。</li></ul><p>openFeign支持<strong>请求/响应</strong>开启GZIP压缩，整体的流程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301657110.webp" alt="图片"></p><p>上图中涉及到GZIP传输的只有两块，分别是<strong>Application client -&gt; Application Service</strong>、 <strong>Application Service-&gt;Application client</strong>。</p><p><strong>注意</strong>：openFeign支持的GZIP仅仅是在openFeign接口的请求和响应，即是openFeign消费者调用服务提供者的接口。</p></blockquote><h5 id="openfeign开启gzip" tabindex="-1">openFeign开启GZIP <a class="header-anchor" href="#openfeign开启gzip" aria-label="Permalink to &quot;openFeign开启GZIP&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">feign:</span></span>
<span class="line"><span style="color:#e1e4e8;">  ## 开启压缩</span></span>
<span class="line"><span style="color:#e1e4e8;">  compression:</span></span>
<span class="line"><span style="color:#e1e4e8;">    request:</span></span>
<span class="line"><span style="color:#e1e4e8;">      enabled: true</span></span>
<span class="line"><span style="color:#e1e4e8;">      ## 开启压缩的阈值，单位字节，默认2048，即是2k，这里为了演示效果设置成10字节</span></span>
<span class="line"><span style="color:#e1e4e8;">      min-request-size: 10</span></span>
<span class="line"><span style="color:#e1e4e8;">      mime-types: text/xml,application/xml,application/json</span></span>
<span class="line"><span style="color:#e1e4e8;">    response:</span></span>
<span class="line"><span style="color:#e1e4e8;">      enabled: true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">feign:</span></span>
<span class="line"><span style="color:#24292e;">  ## 开启压缩</span></span>
<span class="line"><span style="color:#24292e;">  compression:</span></span>
<span class="line"><span style="color:#24292e;">    request:</span></span>
<span class="line"><span style="color:#24292e;">      enabled: true</span></span>
<span class="line"><span style="color:#24292e;">      ## 开启压缩的阈值，单位字节，默认2048，即是2k，这里为了演示效果设置成10字节</span></span>
<span class="line"><span style="color:#24292e;">      min-request-size: 10</span></span>
<span class="line"><span style="color:#24292e;">      mime-types: text/xml,application/xml,application/json</span></span>
<span class="line"><span style="color:#24292e;">    response:</span></span>
<span class="line"><span style="color:#24292e;">      enabled: true</span></span></code></pre></div><h4 id="openfeign熔断降级" tabindex="-1">openFeign熔断降级 <a class="header-anchor" href="#openfeign熔断降级" aria-label="Permalink to &quot;openFeign熔断降级&quot;">​</a></h4><h5 id="使用openfeign-sentinel进行整合实现服务降级" tabindex="-1">使用<strong>openFeign+Sentinel</strong>进行整合实现服务降级 <a class="header-anchor" href="#使用openfeign-sentinel进行整合实现服务降级" aria-label="Permalink to &quot;使用**openFeign+Sentinel**进行整合实现服务降级&quot;">​</a></h5><h6 id="_1-添加sentinel依赖" tabindex="-1">1.添加Sentinel依赖 <a class="header-anchor" href="#_1-添加sentinel依赖" aria-label="Permalink to &quot;1.添加Sentinel依赖&quot;">​</a></h6><p>在消费者的pom文件添加sentinel依赖，如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-alibaba-sentinel&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-sentinel&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h6 id="_2-配置文件中开启sentinel熔断降级" tabindex="-1">2.配置文件中开启sentinel熔断降级 <a class="header-anchor" href="#_2-配置文件中开启sentinel熔断降级" aria-label="Permalink to &quot;2.配置文件中开启sentinel熔断降级&quot;">​</a></h6><p>要想openFeign使用sentinel的降级功能，还需要在配置文件中开启，添加如下配置：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">feign</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">sentinel</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">feign</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">sentinel</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span></code></pre></div><h6 id="_3-添加降级回调类-实现feign接口" tabindex="-1">3.添加降级回调类(实现feign接口) <a class="header-anchor" href="#_3-添加降级回调类-实现feign接口" aria-label="Permalink to &quot;3.添加降级回调类(实现feign接口)&quot;">​</a></h6>`,63),o=[e];function t(c,r,i,E,y,g){return n(),a("div",null,o)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
