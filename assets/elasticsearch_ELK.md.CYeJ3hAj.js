import{_ as a,c as e,o as t,a4 as s}from"./chunks/framework.PLIGnzYk.js";const u=JSON.parse('{"title":"ELK日志平台","description":"","frontmatter":{},"headers":[],"relativePath":"elasticsearch/ELK.md","filePath":"elasticsearch/ELK.md","lastUpdated":1727778851000}'),o={name:"elasticsearch/ELK.md"},l=s('<h1 id="elk日志平台" tabindex="-1">ELK日志平台 <a class="header-anchor" href="#elk日志平台" aria-label="Permalink to &quot;ELK日志平台&quot;">​</a></h1><p>ELK 指的是⼀套完整的⽇志集中处理解决⽅案，将Elasticsearch + Logstash + Kibana 三个开源⼯具配合使⽤，以满足用户对⽇志的查询、排序、统计需求。</p><h2 id="elk常见架构" tabindex="-1">ELK常见架构 <a class="header-anchor" href="#elk常见架构" aria-label="Permalink to &quot;ELK常见架构&quot;">​</a></h2><blockquote><p>Elasticsearch + Logstash + Kibana</p></blockquote><p>这是一种最简单的架构。通过 Logstash 来收集日志，通过 Elasticsearch 对日志进行分析，将所得结果展示用 Kibana展示。</p><p>这种架构也是官网介绍的方式，但是在实际生产中很少使用。</p><blockquote><p>filebeat + Elasticsearch + Logstash + Kibana</p></blockquote><p>相比第一种架构，此架构增加了一个 filebeat 模块。filebeat 是一个轻量的日志收集代理，部署在客户端。</p><p>优点: 相较于logstash消耗更少的资源</p><p>缺点: 当 logstash 出现故障时，日志会出现丢失。</p><blockquote><p>filebeat + kafka + Elasticsearch + Logstash + Kibana</p></blockquote><p>这种架构是对于第二种架构的完善，通过增加中间件，来避免数据的丢失。</p><p>当 Logstash 出现故障，日志还存留在中间件中，当Logstash 再次启动，则会读取中间件中积压的日志。</p><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h2><blockquote><p>第二种架构方式设计</p><p>参考文档：<a href="https://juejin.cn/post/7156897390962671624" target="_blank" rel="noreferrer">https://juejin.cn/post/7156897390962671624</a></p></blockquote><ol><li>Filebeat收集数据</li><li>将收集数据汇总给Logstash，Logstash进行数据清洗</li><li>将数据写入Elasticsearch</li><li>用Kibana进行可视化展示</li></ol><p><img src="https://knowledge-2018.oss-cn-shanghai.aliyuncs.com/img/202410011809654.webp" alt="image-20230628180905414"></p>',17),i=[l];function c(r,h,p,n,_,b){return t(),e("div",null,i)}const k=a(o,[["render",c]]);export{u as __pageData,k as default};
