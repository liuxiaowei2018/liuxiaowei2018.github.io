import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8048b864.js";const o="/assets/image-20220402183702419.da594124.png",D=JSON.parse('{"title":"架构设计","description":"","frontmatter":{},"headers":[],"relativePath":"design/distributedId.md","filePath":"design/distributedId.md","lastUpdated":1697536192000}'),p={name:"design/distributedId.md"},e=l('<h1 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#分布式id方案">分布式ID方案</a><ul><li><a href="#数据库自增id">数据库自增ID</a></li><li><a href="#数据库多主模式">数据库多主模式</a></li><li><a href="#号段模式">号段模式</a></li><li><a href="#雪花算法">雪花算法</a></li><li><a href="#redis自增id">Redis自增ID</a></li></ul></li></ul></nav><h2 id="分布式id方案" tabindex="-1">分布式ID方案 <a class="header-anchor" href="#分布式id方案" aria-label="Permalink to &quot;分布式ID方案&quot;">​</a></h2><blockquote><p>ID是数据的唯一标识，传统的做法是利用UUID和数据库的自增ID，在互联网企业中，大部分公司使用的都是Mysql，并且因为需要事务支持，所以通常会使用Innodb存储引擎，UUID太长以及无序，所以并不适合在Innodb中来作为主键，自增ID比较合适，但是随着公司的业务发展，数据量将越来越大，需要对数据进行分表，而分表后，每个表中的数据都会按自己的节奏进行自增，很有可能出现ID冲突。这时就需要一个单独的机制来负责生成唯一ID，生成出来的ID也可以叫做分布式ID</p></blockquote><p><img src="'+o+`" alt="image-20220402183702419"></p><h3 id="数据库自增id" tabindex="-1">数据库自增ID <a class="header-anchor" href="#数据库自增id" aria-label="Permalink to &quot;数据库自增ID&quot;">​</a></h3><p>需要单独一个数据库实例，创建表结构如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DATABASE</span><span style="color:#E1E4E8;"> \`</span><span style="color:#B392F0;">SEQID</span><span style="color:#E1E4E8;">\`;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SEQID</span><span style="color:#E1E4E8;">.SEQUENCE_ID (</span></span>
<span class="line"><span style="color:#E1E4E8;">	id </span><span style="color:#F97583;">bigint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">) unsigned </span><span style="color:#F97583;">NOT NULL</span><span style="color:#E1E4E8;"> auto_increment, </span></span>
<span class="line"><span style="color:#E1E4E8;">	stub </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">NOT NULL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">PRIMARY KEY</span><span style="color:#E1E4E8;"> (id),</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">UNIQUE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">KEY</span><span style="color:#E1E4E8;"> stub (stub)</span></span>
<span class="line"><span style="color:#E1E4E8;">) ENGINE</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">MyISAM;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DATABASE</span><span style="color:#24292E;"> \`</span><span style="color:#6F42C1;">SEQID</span><span style="color:#24292E;">\`;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SEQID</span><span style="color:#24292E;">.SEQUENCE_ID (</span></span>
<span class="line"><span style="color:#24292E;">	id </span><span style="color:#D73A49;">bigint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">) unsigned </span><span style="color:#D73A49;">NOT NULL</span><span style="color:#24292E;"> auto_increment, </span></span>
<span class="line"><span style="color:#24292E;">	stub </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">NOT NULL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">PRIMARY KEY</span><span style="color:#24292E;"> (id),</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">UNIQUE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">KEY</span><span style="color:#24292E;"> stub (stub)</span></span>
<span class="line"><span style="color:#24292E;">) ENGINE</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">MyISAM;</span></span></code></pre></div><p>获取自增id:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">begin</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">replace</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">into</span><span style="color:#E1E4E8;"> SEQUENCE_ID (stub) </span><span style="color:#F97583;">VALUES</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;anyword&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> last_insert_id();</span></span>
<span class="line"><span style="color:#F97583;">commit</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">begin</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">replace</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">into</span><span style="color:#24292E;"> SEQUENCE_ID (stub) </span><span style="color:#D73A49;">VALUES</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;anyword&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> last_insert_id();</span></span>
<span class="line"><span style="color:#D73A49;">commit</span><span style="color:#24292E;">;</span></span></code></pre></div><p>stub字段在这里并没有什么特殊的意义，只是为了方便的去插入数据，只有能插入数据才能产生自增id。而对于插入我们用的是replace，replace会先看是否存在stub指定值一样的数据，如果存在则先delete再insert，如果不存在则直接insert。</p><p>这种生成分布式ID的机制，需要一个单独的Mysql实例，虽然可行，但是基于性能与可靠性来考虑的话都不够，业务系统每次需要一个ID时，都需要请求数据库获取，性能低，并且如果此数据库实例下线了，那么将影响所有的业务系统。</p><h3 id="数据库多主模式" tabindex="-1">数据库多主模式 <a class="header-anchor" href="#数据库多主模式" aria-label="Permalink to &quot;数据库多主模式&quot;">​</a></h3><h3 id="号段模式" tabindex="-1">号段模式 <a class="header-anchor" href="#号段模式" aria-label="Permalink to &quot;号段模式&quot;">​</a></h3><h3 id="雪花算法" tabindex="-1">雪花算法 <a class="header-anchor" href="#雪花算法" aria-label="Permalink to &quot;雪花算法&quot;">​</a></h3><h4 id="百度-uid-generator" tabindex="-1">百度-uid-generator <a class="header-anchor" href="#百度-uid-generator" aria-label="Permalink to &quot;百度-uid-generator&quot;">​</a></h4><h4 id="美团-leaf" tabindex="-1">美团-Leaf <a class="header-anchor" href="#美团-leaf" aria-label="Permalink to &quot;美团-Leaf&quot;">​</a></h4><h3 id="redis自增id" tabindex="-1">Redis自增ID <a class="header-anchor" href="#redis自增id" aria-label="Permalink to &quot;Redis自增ID&quot;">​</a></h3>`,18),t=[e];function r(c,i,E,y,d,h){return a(),n("div",null,t)}const b=s(p,[["render",r]]);export{D as __pageData,b as default};
