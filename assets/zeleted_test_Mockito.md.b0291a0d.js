import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8048b864.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zeleted/test/Mockito.md","filePath":"zeleted/test/Mockito.md","lastUpdated":1697176108000}'),p={name:"zeleted/test/Mockito.md"},o=l(`<h2 id="mockito" tabindex="-1">Mockito <a class="header-anchor" href="#mockito" aria-label="Permalink to &quot;Mockito&quot;">​</a></h2><nav class="table-of-contents"><ul><li><a href="#mockito">Mockito</a><ul><li><a href="#测试用例-1">测试用例 1</a></li><li><a href="#测试用例-2">测试用例 2</a></li><li><a href="#测试用例-3">测试用例 3</a></li></ul></li></ul></nav><blockquote><p>官网地址：<a href="https://site.mockito.org/" target="_blank" rel="noreferrer">https://site.mockito.org/</a></p><p>中文文档：<a href="https://github.com/hehonghui/mockito-doc-zh#0" target="_blank" rel="noreferrer">https://github.com/hehonghui/mockito-doc-zh#0</a></p><p>api文档：<a href="https://www.tutorialspoint.com/mockito/mockito_timeouts.htm" target="_blank" rel="noreferrer">https://www.tutorialspoint.com/mockito/mockito_timeouts.htm</a></p></blockquote><h3 id="测试用例-1" tabindex="-1">测试用例 1 <a class="header-anchor" href="#测试用例-1" aria-label="Permalink to &quot;测试用例 1&quot;">​</a></h3><blockquote><p><code>pom.xml</code></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.mockito&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;mockito-all&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.9.5&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.11&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.mockito&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;mockito-all&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.9.5&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.11&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></blockquote><blockquote><p><code>test.java</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testVerify</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//创建 mock 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">       List mockedList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(List.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">       mockedList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       mockedList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       mockedList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       mockedList.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//验证是否执行了一次 add(&quot;test1&quot;) 操作</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mockedList).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//同上面验证是否执行了一次 add(&quot;test1&quot;) 操作，默认就是 time(1)</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mockedList, </span><span style="color:#B392F0;">times</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//验证是否执行了3次 add(&quot;test2&quot;) 操作</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//verify(mockedList, times(3)).add(&quot;test2&quot;);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mockedList).</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testVerify</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//创建 mock 对象</span></span>
<span class="line"><span style="color:#24292E;">       List mockedList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mock</span><span style="color:#24292E;">(List.class);</span></span>
<span class="line"><span style="color:#24292E;">       mockedList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       mockedList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       mockedList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       mockedList.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//验证是否执行了一次 add(&quot;test1&quot;) 操作</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mockedList).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//同上面验证是否执行了一次 add(&quot;test1&quot;) 操作，默认就是 time(1)</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mockedList, </span><span style="color:#6F42C1;">times</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//验证是否执行了3次 add(&quot;test2&quot;) 操作</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//verify(mockedList, times(3)).add(&quot;test2&quot;);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mockedList).</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//精确次数</span></span>
<span class="line"><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mockedList, </span><span style="color:#B392F0;">times</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//至少 1次</span></span>
<span class="line"><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mockedList, </span><span style="color:#B392F0;">atLeastOnce</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//至少 2 次</span></span>
<span class="line"><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mockedList, </span><span style="color:#B392F0;">atLeast</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//最多 5 次</span></span>
<span class="line"><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mockedList, </span><span style="color:#B392F0;">atMost</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//精确次数</span></span>
<span class="line"><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mockedList, </span><span style="color:#6F42C1;">times</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//至少 1次</span></span>
<span class="line"><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mockedList, </span><span style="color:#6F42C1;">atLeastOnce</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//至少 2 次</span></span>
<span class="line"><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mockedList, </span><span style="color:#6F42C1;">atLeast</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//最多 5 次</span></span>
<span class="line"><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mockedList, </span><span style="color:#6F42C1;">atMost</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div></blockquote><h3 id="测试用例-2" tabindex="-1">测试用例 2 <a class="header-anchor" href="#测试用例-2" aria-label="Permalink to &quot;测试用例 2&quot;">​</a></h3><p>通过设值或者打桩的方式预设参数，如下所示，当执行 <code>get(0)</code> 操作时，通过 <code>thenReturn()</code>方法返回 <code>hello</code>，当执行 <code>get(1)</code>操作时抛出空指针异常</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testWhen</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    LinkedList mockedList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(LinkedList.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//设置值，通常被称为打桩</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(mockedList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(mockedList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">thenThrow</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NullPointerException</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(mockedList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//这里会打印 &quot;null&quot; 因为 get(2) 没有设置</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(mockedList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//这里会抛 exception</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(mockedList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//验证有没有执行 get(0) 操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mockedList).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testWhen</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    LinkedList mockedList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mock</span><span style="color:#24292E;">(LinkedList.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//设置值，通常被称为打桩</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(mockedList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">thenReturn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(mockedList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">thenThrow</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NullPointerException</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(mockedList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//这里会打印 &quot;null&quot; 因为 get(2) 没有设置</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(mockedList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//这里会抛 exception</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(mockedList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//验证有没有执行 get(0) 操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mockedList).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这种方式通常被称为<code>Stubbing</code>，除了使用 <code>when...thenReturn</code> 方式之外，还有一种形式可以表达，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testDoReturn</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator mockedList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(Iterator.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">doReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(mockedList).</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mockedList.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(next);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">doReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(mockedList).</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object next2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mockedList.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(next2);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//上面的过程也可以写成如下方式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">doReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test2&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(mockedList).</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object next3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mockedList.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(next3);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object next4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mockedList.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(next4);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testDoReturn</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    Iterator mockedList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mock</span><span style="color:#24292E;">(Iterator.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">doReturn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(mockedList).</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Object next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mockedList.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(next);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">doReturn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(mockedList).</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Object next2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mockedList.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(next2);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//上面的过程也可以写成如下方式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">doReturn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(mockedList).</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Object next3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mockedList.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(next3);</span></span>
<span class="line"><span style="color:#24292E;">    Object next4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mockedList.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(next4);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="测试用例-3" tabindex="-1">测试用例 3 <a class="header-anchor" href="#测试用例-3" aria-label="Permalink to &quot;测试用例 3&quot;">​</a></h3><p>日常开发中通过要保证方法的时效性，或者说要保证某个方法必须在多长时间内执行完成，这个时候也可以通过 mock 的方式来验证方法是否满足要求</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testTimeout</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">      HttpService mock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(HttpService.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">      String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.xxx.com&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      mock.</span><span style="color:#B392F0;">getRequest</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mock, </span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">getRequest</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//timeout时间后，用自定义的检验模式验证getRequest()</span></span>
<span class="line"><span style="color:#E1E4E8;">      VerificationMode customVer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VerificationMode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(VerificationData </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> VerificationMode </span><span style="color:#B392F0;">description</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(mock, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Timeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, customVer)).</span><span style="color:#B392F0;">getRequest</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testTimeout</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">      HttpService mock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mock</span><span style="color:#24292E;">(HttpService.class);</span></span>
<span class="line"><span style="color:#24292E;">      String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.xxx.com&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      mock.</span><span style="color:#6F42C1;">getRequest</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mock, </span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">getRequest</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//timeout时间后，用自定义的检验模式验证getRequest()</span></span>
<span class="line"><span style="color:#24292E;">      VerificationMode customVer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VerificationMode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(VerificationData </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> VerificationMode </span><span style="color:#6F42C1;">description</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(mock, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Timeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, customVer)).</span><span style="color:#6F42C1;">getRequest</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,14),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const m=s(p,[["render",t]]);export{u as __pageData,m as default};
