import{_ as t,c as o,o as e,a4 as d}from"./chunks/framework.PLIGnzYk.js";const u=JSON.parse('{"title":"MongoDB学习笔记","description":"","frontmatter":{},"headers":[],"relativePath":"mongodb/index.md","filePath":"mongodb/index.md","lastUpdated":1727785719000}'),r={name:"mongodb/index.md"},a=d('<h1 id="mongodb学习笔记" tabindex="-1">MongoDB学习笔记 <a class="header-anchor" href="#mongodb学习笔记" aria-label="Permalink to &quot;MongoDB学习笔记&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#语法">语法</a><ul><li><a href="#文档基本-crud">文档基本 CRUD</a></li><li><a href="#数据类型">数据类型</a></li></ul></li><li><a href="#应用场景">应用场景</a></li><li><a href="#references">References</a></li></ul></nav><blockquote><p>官方文档：<a href="https://www.mongodb.com/zh-cn/docs/" target="_blank" rel="noreferrer">MongoDB 文档</a></p></blockquote><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><p>在 MongoDB 中, 数据库和集合都不需要手动创建, 当我们创建文档时, 如果文档所在的集合或者数据库不存在, <strong>则会自动创建数据库或者集合</strong>。</p><table tabindex="0"><thead><tr><th>操作</th><th>语法</th></tr></thead><tbody><tr><td>查看所有数据库</td><td><code>show dbs;</code> 或 <code>show databases;</code></td></tr><tr><td>查看当前数据库</td><td><code>db;</code></td></tr><tr><td>切换到某数据库 (<strong>若数据库不存在则创建数据库</strong>)</td><td><code>use &lt;db_name&gt;;</code></td></tr><tr><td>删除当前数据库</td><td><code>db.dropDatabase();</code></td></tr></tbody></table><p>默认保留的数据库</p><ul><li><p><strong>admin</strong>: 从权限角度考虑, 这是 <code>root</code> 数据库, 如果将一个用户添加到这个数据库, 这个用户自动继承所有数据库的权限, 一些特定的服务器端命令也只能从这个数据库运行, 比如列出所有的数据库或者关闭服务器</p></li><li><p><strong>local</strong>: 数据永远不会被复制, 可以用来存储限于本地的单台服务器的集合 (部署集群, 分片等)</p></li><li><p><strong>config</strong>: Mongo 用于分片设置时, <code>config</code> 数据库在内部使用, 用来保存分片的相关信息</p></li></ul><p>当我们创建了一个数据库后再进行查看会发现，我们创建的数据库并没有显示出来，这是由于<code>MongoDD的存储机制决定的</code>。</p><blockquote><p>当使用 <code>use articledb</code> 的时候. <code>articledb</code> 其实存放在内存之中, 当 <code>articledb</code> 中存在一个 collection 之后, mongo 才会将这个数据库持久化到硬盘之中。</p></blockquote><h3 id="文档基本-crud" tabindex="-1">文档基本 CRUD <a class="header-anchor" href="#文档基本-crud" aria-label="Permalink to &quot;文档基本 CRUD&quot;">​</a></h3><blockquote><p>官方文档: <a href="https://www.mongodb.com/docs/manual/crud/" target="_blank" rel="noreferrer">MongoDB CRUD Operations</a></p></blockquote><table tabindex="0"><thead><tr><th>操作</th><th>语法</th></tr></thead><tbody><tr><td>查看所有集合</td><td><code>show collections;</code></td></tr><tr><td>创建集合</td><td><code>db.createCollection(&quot;&lt;collection_name&gt;&quot;);</code></td></tr><tr><td>删除集合</td><td><code>db.&lt;collection_name&gt;.drop()</code></td></tr></tbody></table><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><p>MongoDB的最小存储单位就是文档(document)对象。文档(document)对象对应于关系型数据库的行。数据在MongoDB中以 BSON（Binary-JSON）文档的格式存储在磁盘上。</p><table tabindex="0"><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串。存储数据常用数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td>Integer</td><td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32位或 64 位。</td></tr><tr><td>Boolean</td><td>布尔值。用于存储布尔值（真/假）。</td></tr><tr><td>Double</td><td>双精度浮点值。用于存储浮点值。</td></tr><tr><td>Array</td><td>用于将数组或列表或多个值存储为一个键。</td></tr><tr><td>Timestamp</td><td>时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td>Object</td><td>用于内嵌文档。可以嵌套其他文档或数据类型。</td></tr><tr><td>Null</td><td>用于创建空值。</td></tr><tr><td>Date</td><td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td>Object ID</td><td>对象 ID。用于创建文档的 ID。通常是自动生成的，具有唯一性。</td></tr><tr><td>BinaryData</td><td>二进制数据。用于存储二进制数据。</td></tr><tr><td>Code</td><td>代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td>Regular expression</td><td>正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>如下具体的应用场景:</p><ul><li>社交场景, 使用 MongoDB 存储用户信息, 以及用户发表的朋友圈信息, 通过地理位置索引实现附近的人, 地点等功能.</li><li>游戏场景, 使用 MongoDB 存储游戏用户信息, 用户的装备, 积分等直接以内嵌文档的形式存储, 方便查询, 高效率存储和访问.</li><li>物流场景, 使用 MongoDB 存储订单信息, 订单状态在运送过程中会不断更新, 以 MongoDB 内嵌数组的形式来存储, 一次查询就能将订单所有的变更读取出来.</li><li>物联网场景, 使用 MongoDB 存储所有接入的智能设备信息, 以及设备汇报的日志信息, 并对这些信息进行多维度的分析.</li><li>视频直播, 使用 MongoDB 存储用户信息, 点赞互动信息等.</li></ul><p>这些应用场景中, 数据操作方面的共同点有:</p><ol><li>数据量大</li><li>写入操作频繁</li><li>价值较低的数据, 对<strong>事务性</strong>要求不高</li></ol><p>对于这样的数据, 更适合用 MongoDB 来实现数据存储。</p><p>除了架构选型上, 除了上述三个特点之外, 还要考虑下面这些问题:</p><ul><li>应用不需要事务及复杂 JOIN 支持</li><li>新应用, 需求会变, 数据模型无法确定, 想快速迭代开发</li><li>应用需要 2000 - 3000 以上的读写QPS（更高也可以）</li><li>应用需要 TB 甚至 PB 级别数据存储</li><li>应用发展迅速, 需要能快速水平扩展</li><li>应用要求存储的数据不丢失</li><li>应用需要 <code>99.999%</code> 高可用</li><li>应用需要大量的地理位置查询, 文本查询</li></ul><p>如果上述有1个符合, 可以考虑 MongoDB, 2个及以上的符合, 选择 MongoDB 绝不会后悔.</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://www.mongodb.com/docs/" target="_blank" rel="noreferrer">docs.mongodb.com/</a></li></ul>',27),l=[a];function n(i,c,s,h,b,g){return e(),o("div",null,l)}const m=t(r,[["render",n]]);export{u as __pageData,m as default};
