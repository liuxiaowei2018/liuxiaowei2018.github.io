import{_ as a,o as n,c as l,Q as s,k as e}from"./chunks/framework.8048b864.js";const p="/assets/image-20220319133458045.7fc3d431.png",o="/assets/image-20220319133621428.69b7b21a.png",t="/assets/image-20220319133720174.dd6c7a02.png",c="/assets/image-20220319133922185.8f02f0f1.png",r="/assets/image-20220319133952992.18180bcb.png",i="/assets/640-16476684267637.cfad965e.jpeg",E="/assets/7cb0c00ecaca4043ac877bce74192f83.322401ba.png",y="/assets/2283e74ec8204095b88a9436281d2339.8315bf98.png",d="/assets/f3108f3468e2427abf81e0cffee424f3.3ab7a443.png",h="/assets/646c6d7df7044d03a75eeecb89023bdd.832edb9e.png",u="/assets/a512f74dbdf7476191ccfd031c1dc2a1.a7cea57d.png",g="/assets/04c3467f0e0247df902eeb68ebb0fc8e.e92abc94.png",b="/assets/ead8e7ef676d47318f5131b3a79e441b.ae063464.png",F="/assets/d8c3c8ec10a64f3f9c367bc67e6be53b.ff6ee27c.png",m="/assets/deda994a6d674820a58a2a7f90be6b0c.463fde62.png",D="/assets/523bf7fa71a44597a819c24b2c572b26.9140b8b1.png",C="/assets/7150cd69a4704ead84afc00af7e443d0.91efe162.png",q="/assets/image-20230519141703990.a709be74.png",_="/assets/image-20230418144910852.d4690d8a.png",L=JSON.parse('{"title":"数据库设计","description":"","frontmatter":{},"headers":[],"relativePath":"database/index.md","filePath":"database/index.md","lastUpdated":1697625092000}'),A={name:"database/index.md"},k=s('<h1 id="数据库设计" tabindex="-1">数据库设计 <a class="header-anchor" href="#数据库设计" aria-label="Permalink to &quot;数据库设计&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1、数据库设计步骤">1、数据库设计步骤</a><ul><li><a href="#需求分析阶段">需求分析阶段</a></li><li><a href="#概念设计阶段">概念设计阶段</a></li><li><a href="#逻辑设计阶段">逻辑设计阶段</a></li><li><a href="#数据库选型">数据库选型</a></li><li><a href="#物理设计阶段">物理设计阶段</a></li><li><a href="#数据库实施阶段">数据库实施阶段</a></li><li><a href="#数据库维护阶段">数据库维护阶段</a></li><li><a href="#in">In</a></li><li><a href="#进阶操作">进阶操作</a></li></ul></li></ul></nav><h2 id="_1、数据库设计步骤" tabindex="-1">1、数据库设计步骤 <a class="header-anchor" href="#_1、数据库设计步骤" aria-label="Permalink to &quot;1、数据库设计步骤&quot;">​</a></h2><p><img src="'+p+'" alt="image-20220319133458045"></p><h3 id="需求分析阶段" tabindex="-1">需求分析阶段 <a class="header-anchor" href="#需求分析阶段" aria-label="Permalink to &quot;需求分析阶段&quot;">​</a></h3><blockquote><p>要进行数据库设计首先要了解用户需求，参与到用户需求分析中去，需求分析常用SA（Structured Analysis：结构化分析方法）强调开发方法的结构合理性以及所开发软件的结构合理性的软件开发方法，是生命周期法的继承与发展，是生命周期法与结构化程序设计思想的结合。</p><p>其基本思想是用系统工程的思想和工程化得方法，根据用户至上的原则，自始自终按照结构化、模块化，自顶向下地对系统进行分析与设计。建立的主要步骤如下：</p><ol><li>首先画系统的输入输出，先画顶层数据流程图（DFD：Data Flow Diagram），顶层数据流程图只包含一个加工，用以表示被开发的系统，然后考虑该系统有哪些输入、输出数据流。</li><li>画系统内部，即画下层数据流层图。</li></ol><p><img src="'+o+'" alt="image-20220319133621428"></p></blockquote><h3 id="概念设计阶段" tabindex="-1">概念设计阶段 <a class="header-anchor" href="#概念设计阶段" aria-label="Permalink to &quot;概念设计阶段&quot;">​</a></h3><blockquote><p>概念设计是整个数据库设计的关键，它是对需求分析阶段的成果进行综合，归档以及抽象出一个独立具体的DBMS模型，与具体的RDBMS产品无关。</p><p>在实际的开发中，常用E-R（Entity-Relationship：实体关系）图来表示，常用的工具PowerDesigner，可以实现CDM（概念数据模型）-&gt;LDM（逻辑数据模型）-&gt;PDM（物理数据模型）-&gt;Database的自动转换，这个过程称为<strong>正向工程</strong>，如果有database建库脚本，也可以通过PowerDesigner工具生成CDM，即Database-&gt;PDM-&gt;LDM-&gt;CDM，称为<strong>反向工程</strong>。</p><p><img src="'+t+'" alt="image-20220319133720174"></p></blockquote><h3 id="逻辑设计阶段" tabindex="-1">逻辑设计阶段 <a class="header-anchor" href="#逻辑设计阶段" aria-label="Permalink to &quot;逻辑设计阶段&quot;">​</a></h3><blockquote><p>逻辑设计阶段是将概念数据模型转换为具体的DBMS所支持的数据模型，并将进行优化。</p><p>虽然LDM独立于DBMS的，但可以进行外键，索引，视图等对象的设计工作。</p><p>在此阶段，各子模块的E-R图之间的冲突主要有三类：属性冲突，命名冲突和结构冲突，同时E-R图向关系模型的转换，要解决如何将实体性和实体间的联系转换为关系模式，确定这些关系模式的属性和码，实际开发中，逻辑设计阶段不是必须的，有些是从CDM直接到PDM了。</p></blockquote><h3 id="数据库选型" tabindex="-1">数据库选型 <a class="header-anchor" href="#数据库选型" aria-label="Permalink to &quot;数据库选型&quot;">​</a></h3><blockquote><p>数据库选型是非常重要的环节，一般在需求分析完成之后，通过架构评审会进行确认，数据库方面主要包括数据存储，检索，安全，读写分离，分库分表，数据归档，接入数据仓库都要进行确认，根据业务的场景对相关的数据库产品进行调研比对，选择最适合业务场景的数据库作为存储。</p></blockquote><h3 id="物理设计阶段" tabindex="-1">物理设计阶段 <a class="header-anchor" href="#物理设计阶段" aria-label="Permalink to &quot;物理设计阶段&quot;">​</a></h3><blockquote><p>逻辑设计阶段和数据库选型完成之后，就可以通过LDM生成PDM了，在物理设计阶段，需要设计跟RDBMS相关的对象，例如设计存储过程，触发器，用户自定义函数，表空间等。</p><p><img src="'+c+'" alt="image-20220319133922185"></p></blockquote><h3 id="数据库实施阶段" tabindex="-1">数据库实施阶段 <a class="header-anchor" href="#数据库实施阶段" aria-label="Permalink to &quot;数据库实施阶段&quot;">​</a></h3><blockquote><p>例如选择的是sql数据库，通过PDM生成数据库的建库脚本之后，需要进行规范性检查，通过之后就可以创建表结构，规范性检查可以借助开源的SQL审核工具，如Yearning，Archery都可以设置规则，检查之后会给出整改建议，能够帮我们自动实现SQL Review。Yearning是用go开发，目前只支持sql数据库，Archery可以支持多种数据库。</p><p><img src="'+r+'" alt="image-20220319133952992"></p></blockquote><h3 id="数据库维护阶段" tabindex="-1">数据库维护阶段 <a class="header-anchor" href="#数据库维护阶段" aria-label="Permalink to &quot;数据库维护阶段&quot;">​</a></h3><blockquote><p>数据库维护阶段主要包括业务支撑和数据库运维</p><p><img src="'+i+'" alt="图片"></p></blockquote><h3 id="in" tabindex="-1">In <a class="header-anchor" href="#in" aria-label="Permalink to &quot;In&quot;">​</a></h3><h4 id="逻辑存储结构" tabindex="-1">逻辑存储结构 <a class="header-anchor" href="#逻辑存储结构" aria-label="Permalink to &quot;逻辑存储结构&quot;">​</a></h4><p><img src="'+E+'" alt="在这里插入图片描述"></p><p>表空间（ibd文件），一个sql 实例可以对应多个表空间，用于存储记录、索引等数据。</p><p>段（Segment），分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollbak segment）。InnoDB 是索引组织表，数据段就是B+tree的叶子节点，索引段即为B+Tree的非叶子节点。段用来管理多个Extent。</p><p>区（Extent）表空间的单元结构，每个区的大小为1M，默认情况下InnoDB 存储引擎页大小为16k，即一个区中一共有64个连续的页。</p><p>页（Page），是InnoDB 存储引擎磁盘管理的最小单元，每个页默认大小为16k。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请4-5个区。</p><p>行（Row），InnoDB 存储引擎数据是按行存放的。</p><blockquote><p>Trx_id: 每次对某条记录进行改动时，都会把对应的事务id 赋值给trx_id 隐藏列</p><p>Rool_pointer：每次对某条记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列相当于一个指针，可以通过它来找到该记录的修改前的信息。</p></blockquote><h4 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h4><p>sql5.5 版本开始，默认使用InnoDB 存储引擎，它擅长事务处理，具有崩溃恢复特性，在日常开发中使用非常广泛，下面是InnoDB 架构图，左侧为内存结构，右侧为磁盘结构。</p><p><img src="'+y+'" alt="在这里插入图片描述(https://img-blog.csdnimg.cn/7cb0c00ecaca4043ac877bce74192f83.png"></p><h5 id="内存结构" tabindex="-1">内存结构 <a class="header-anchor" href="#内存结构" aria-label="Permalink to &quot;内存结构&quot;">​</a></h5><p><img src="'+d+'" alt="在这里插入图片描述"></p><h6 id="buffer-pool" tabindex="-1">Buffer Pool <a class="header-anchor" href="#buffer-pool" aria-label="Permalink to &quot;Buffer Pool&quot;">​</a></h6><p>缓冲池是主内存中的一个区域，里面可以缓存磁盘上进场操作的真实数据，在执行增删改查操作时，先操作缓冲池的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p><p>缓冲池有一个一个的块，叫做缓冲池。缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态Page 被分为3类：</p><ul><li>free page：空闲page，未被使用。</li><li>clean page：被使用page，数据没有被修改过。</li><li>dirty page：脏页，被使用page，数据被修改过，数据与磁盘的数据产生了不一致</li></ul><h6 id="change-buffer" tabindex="-1">Change Buffer <a class="header-anchor" href="#change-buffer" aria-label="Permalink to &quot;Change Buffer&quot;">​</a></h6><p>更改缓冲区（针对于非一二级所以页），在执行DML 语句时，如果这些数据Page 没有在Buffer Pool 中，不会直接操作磁盘，而会将数据变更存在缓冲区Change Buffer 中，在未来数据被读取时，再将数据合并恢复到Buffer Pool 中，再讲合并后的数据刷新到磁盘中。</p><p><img src="'+h+'" alt="在这里插入图片描述"></p><p><strong>Change Buffer的意义</strong></p><p>与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新可能会影响数中不相邻的二级索引页。如果每一次都操作磁盘，会造成大量磁盘IO，有了Change Buffer 之后，我们可以在缓冲池进行合并处理，减少磁盘IO。</p><h6 id="adaptive-hash-index" tabindex="-1">Adaptive Hash Index <a class="header-anchor" href="#adaptive-hash-index" aria-label="Permalink to &quot;Adaptive Hash Index&quot;">​</a></h6><p>hash 索引最大优势在于快，因为他只需要一次匹配就可以完成（前提是不存在hash冲突的情况下），B+Tree 往往需要2-3次。但是他的弊端是不能够支持范围查询，只能做等值匹配。所以InnoDB 引擎就做了这个自适应hash 。</p><p>自适应hash 索引，用于优化对Buffer Pool 数据查询。InnoDB 存储引擎会监控对表上各索引的查询，如果观察到hash 索引可以提高速度，则建立hash 索引，称之为自适应hash 索引。</p><p><strong>自适应hash 索引，无须人工干预，是系统根据情况自动完成。</strong></p><p>参数：adaptive_hash_index</p><h6 id="log-buffer" tabindex="-1">Log Buffer <a class="header-anchor" href="#log-buffer" aria-label="Permalink to &quot;Log Buffer&quot;">​</a></h6><p>日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log，undo log），默认大小是16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入删除许多行的事务，增加日志缓冲区的大小可以节省磁盘I/O。</p><p>参数：innodb_log_buffer_size（缓冲区大小），innodb_flush_log_at_trx_commit(日志刷新到磁盘的时机)</p><p>刷新时机默认是1,1 日志在每次事务提交时写入并刷新到磁盘，0 每秒将日志写入并刷新到磁盘一次， 2 日志在每次事务提交后写入并每秒刷新到磁盘一次。</p><h5 id="磁盘结构" tabindex="-1">磁盘结构 <a class="header-anchor" href="#磁盘结构" aria-label="Permalink to &quot;磁盘结构&quot;">​</a></h5><p><img src="'+u+`" alt="在这里插入图片描述"></p><h6 id="system-tablespace" tabindex="-1">System Tablespace <a class="header-anchor" href="#system-tablespace" aria-label="Permalink to &quot;System Tablespace&quot;">​</a></h6><p>系统表空间是更新缓冲区存储的区域。如果表示在系统表空间而不是每个表文件或者通用表空间中创建的，它也可能包含表和索引的数据（在sql5.x版本中还包含InnoDB数据字典、undolog 等）</p><p>参数：innodb_data_file_path</p><h6 id="file-per-table-tablespaces" tabindex="-1">File-Per-Table Tablespaces <a class="header-anchor" href="#file-per-table-tablespaces" aria-label="Permalink to &quot;File-Per-Table Tablespaces&quot;">​</a></h6><p>每个表的文件表空间包含单个InnoDB 表的数据和索引，并存储在文件系统上的单个数据文件中。</p><p>参数：innodb_file_per_table</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 创建表空间</span></span>
<span class="line"><span style="color:#F97583;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">tablespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xxx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">add</span><span style="color:#E1E4E8;"> datafile </span><span style="color:#9ECBFF;">&#39;xxx.ibd&#39;</span><span style="color:#E1E4E8;"> engine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> innodb;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 创建表空间</span></span>
<span class="line"><span style="color:#D73A49;">create</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">tablespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xxx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">add</span><span style="color:#24292E;"> datafile </span><span style="color:#032F62;">&#39;xxx.ibd&#39;</span><span style="color:#24292E;"> engine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> innodb;</span></span></code></pre></div><h6 id="general-tablespaces" tabindex="-1">General Tablespaces <a class="header-anchor" href="#general-tablespaces" aria-label="Permalink to &quot;General Tablespaces&quot;">​</a></h6><p>通用表空间，需要通过<code>Create tablespace</code>语法创建通用表空间，在创建表时，可以指定该表空间。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">xxx</span><span style="color:#E1E4E8;">(...) TABLESPACE xxxx;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xxx</span><span style="color:#24292E;">(...) TABLESPACE xxxx;</span></span></code></pre></div><h6 id="undo-tablespaces" tabindex="-1">undo Tablespaces <a class="header-anchor" href="#undo-tablespaces" aria-label="Permalink to &quot;undo Tablespaces&quot;">​</a></h6><p>撤销表空间，sql 实例在初始化时会自动创建2个默认的undo表空间(初始大小为16M)，用于存储undo log日志。</p><h6 id="temporary-tablespaces" tabindex="-1">Temporary Tablespaces <a class="header-anchor" href="#temporary-tablespaces" aria-label="Permalink to &quot;Temporary Tablespaces&quot;">​</a></h6><p>InnoDB 使用会话临时表空间和全局临时表空间。存储用户会话和零时表等等数据。</p><h6 id="doublewrite-buffer-files" tabindex="-1">Doublewrite Buffer Files <a class="header-anchor" href="#doublewrite-buffer-files" aria-label="Permalink to &quot;Doublewrite Buffer Files&quot;">​</a></h6><p>双写缓冲区，innoDB 引擎将数据页从Buffer Pool 刷新到磁盘前，先将数据写入到双写缓冲区文件中，便于系统异常时恢复数据。</p><h6 id="redo-log" tabindex="-1">Redo Log <a class="header-anchor" href="#redo-log" aria-label="Permalink to &quot;Redo Log&quot;">​</a></h6><p>Redo Log 是用来实现事务的持久性。该日志文件由两部分组成。重做日志缓冲（redo log buffer）已经重做日志文件（redo log），前者是在内存中，后者在磁盘中。事务提交之后会把所有修改信息都会存到该日志中，用于在刷新脏页到磁盘时，发送错误时，进行数据恢复使用。以循环方式写入重做日志文件。</p><h5 id="后台线程" tabindex="-1">后台线程 <a class="header-anchor" href="#后台线程" aria-label="Permalink to &quot;后台线程&quot;">​</a></h5><p><img src="`+g+'" alt="在这里插入图片描述"></p><p>后台线程的作用就是将内存里缓冲池的数据在合适的时机刷新到磁盘文件当中。</p><h6 id="master-thread" tabindex="-1">Master Thread <a class="header-anchor" href="#master-thread" aria-label="Permalink to &quot;Master Thread&quot;">​</a></h6><p>核心后台线程，负责调度其他线程，还负责将缓冲池的数据异步刷新到磁盘中，保持数据一致性，还包括脏页的刷新、合并插入缓存、undo页的回收。</p><h6 id="io-thread" tabindex="-1">IO Thread <a class="header-anchor" href="#io-thread" aria-label="Permalink to &quot;IO Thread&quot;">​</a></h6><p>在InnoDB 存储引擎中大量使用了AIO 来处理IO 请求，这样可以极大地提高数据库的性能，从IO Thread 主要负责这些IO 请求的回调。</p><table><thead><tr><th style="text-align:center;">线程类型</th><th style="text-align:center;">默认个数</th><th style="text-align:center;">职责</th></tr></thead><tbody><tr><td style="text-align:center;">Read thread</td><td style="text-align:center;">4</td><td style="text-align:center;">负责读操作</td></tr><tr><td style="text-align:center;">Write thread</td><td style="text-align:center;">4</td><td style="text-align:center;">负责写操作</td></tr><tr><td style="text-align:center;">Log thread</td><td style="text-align:center;">1</td><td style="text-align:center;">负责将日志缓冲区刷新到磁盘</td></tr><tr><td style="text-align:center;">Insert buffer thread</td><td style="text-align:center;">1</td><td style="text-align:center;">负责将写缓冲区内容刷新到磁盘</td></tr></tbody></table><h6 id="purge-thread" tabindex="-1">Purge Thread <a class="header-anchor" href="#purge-thread" aria-label="Permalink to &quot;Purge Thread&quot;">​</a></h6><p>主要用于回收事务已经提交了的undo log，在事务提交之后，undo log 可能不用了，就用它来回收</p><h6 id="page-cleaner-thread" tabindex="-1">Page Cleaner Thread <a class="header-anchor" href="#page-cleaner-thread" aria-label="Permalink to &quot;Page Cleaner Thread&quot;">​</a></h6><p>协助 Master Thread 刷新脏页到磁盘的线程，他可以减轻Master Thread 的工作压力，减少阻塞。</p><p>当我们业务在操作的时候会直接操作sql 的缓冲区，如果缓冲区内没有数据，会将磁盘的数据加载进来，然后存储在缓冲区当中。在增删改查的时候会操作这个缓冲区里的数据。缓冲区的数据会以一定的频率，一定的时机通过后台线程刷新到磁盘当中，然后才持久化</p><h4 id="事务原理" tabindex="-1">事务原理 <a class="header-anchor" href="#事务原理" aria-label="Permalink to &quot;事务原理&quot;">​</a></h4><p>InnoDB 引擎很重要的一部分就是支持事务。</p><p>事务是一组操作的集合，他是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同事成功，要么同事失败。</p><p>特性</p><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库的数据改变就是永久的。</li></ul><p><img src="'+b+'" alt="在这里插入图片描述"></p><h5 id="redo-log-1" tabindex="-1">redo log <a class="header-anchor" href="#redo-log-1" aria-label="Permalink to &quot;redo log&quot;">​</a></h5><p>我们所讲到的ACID 的持久性就是通过redo log 来保证的。</p><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。</p><p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file），前者是在内存中，而后者在磁盘中当事务提交之后会把所有修改信息都存到该日志文件中，用于刷新脏页到磁盘，发生错误时，进行数据恢复使用。</p><p><img src="'+F+'" alt="在这里插入图片描述"></p><p>redo log 保证持久性。</p><h5 id="undo-log" tabindex="-1">undo log <a class="header-anchor" href="#undo-log" aria-label="Permalink to &quot;undo log&quot;">​</a></h5><p>回滚日志，用于记录数据被修改前的信息，作用包含2个：提供回滚和MVCC（多版本并发控制）。</p><p>undo log 和 redo log 记录物理日志不一样，它是逻辑日志。可以认为当delete 一条记录时，undo log 中会记录一条对应的insert 的记录，当update 一条记录时，它记录一条相对应相反的update 记录。当执行rollback 时，就可以从undo log 中逻辑记录读取到相应的内容并进行回滚。</p><p>undo log 销毁：undo log 在事务执行时，并不会立即删除undo log ，因为这些日志可能还用于MVCC 。</p><p>undo log 存储：undo log 采用段的方式进行管理记录。存放在rollback segment 回滚段中，内部包含了1024个undo log segment 。</p><p>undo log 保证事务的原子性，而undo log + redo log 保证事务的一致性。</p><h4 id="mvcc" tabindex="-1">MVCC <a class="header-anchor" href="#mvcc" aria-label="Permalink to &quot;MVCC&quot;">​</a></h4><h5 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h5><h6 id="当前读" tabindex="-1">当前读 <a class="header-anchor" href="#当前读" aria-label="Permalink to &quot;当前读&quot;">​</a></h6><p>读取的是当前记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。如：<code>select lock in share mode</code>，<code>select for update</code>，<code>update</code>，<code>insert</code>，<code>update</code>,<code>delete</code>（排他锁）都是一种当前读。</p><h6 id="快照读" tabindex="-1">快照读 <a class="header-anchor" href="#快照读" aria-label="Permalink to &quot;快照读&quot;">​</a></h6><p>简单的select(不加锁)就是快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</p><ul><li>RC 每次select，都生成快照读（因为每次都生成快照，所以会读到其他事务提交）。</li><li>RR 开启事务第一个select 语句才是快照读。</li><li>Serializable 快照读会退化为当前读。</li></ul><h6 id="mvcc-1" tabindex="-1">MVCC <a class="header-anchor" href="#mvcc-1" aria-label="Permalink to &quot;MVCC&quot;">​</a></h6><p>Mulit-Version Concurrency Control 多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为sql 实现的MVCC 提供了一个非阻塞读功能。MVCC 的具体实现，还需要依赖于数据库记录中的三个隐式字段、unlog 日志 readview。</p><h5 id="隐藏字段" tabindex="-1">隐藏字段 <a class="header-anchor" href="#隐藏字段" aria-label="Permalink to &quot;隐藏字段&quot;">​</a></h5><p>InnoDB 在创建表的时候会多创建2个字段，分别是<code>DB_TRX_ID</code>，<code>DB_ROLL_PTR</code>，<s><code>DB_ROW_ID</code></s>。</p><table><thead><tr><th style="text-align:center;">隐式字段</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">DB_TRX_ID</td><td style="text-align:center;">最近修改事务ID，记录插入这条记录或者最后修改该记录的事务ID</td></tr><tr><td style="text-align:center;">DB_ROLL_PTR</td><td style="text-align:center;">回滚指针，指向这条记录的上一个版本，用于配合undo log ,指向上一个版本</td></tr><tr><td style="text-align:center;">DB_ROW_ID</td><td style="text-align:center;">隐藏主键，如果表结果没有指定主键，将会生成该隐藏字段。</td></tr></tbody></table><h5 id="undo-log-版本链" tabindex="-1">undo log 版本链 <a class="header-anchor" href="#undo-log-版本链" aria-label="Permalink to &quot;undo log 版本链&quot;">​</a></h5><p>回滚日志，在insert update delete 的时候产生的便于数据回滚的日志。</p><p>当insert 的时候，产生的undo log 日志只在回滚时需要，在事务提交后，可被立即删除。</p><p>而update、delete 的时候产生的undo log 日志不仅在回滚是需要，在快照读时也需要，不会被立即删除。</p><p><img src="'+m+'" alt="在这里插入图片描述"></p><p>不同事务或者相同事务对同一条记录进行修改，会导致该记录的undo log 生成一条记录版本链表，链表的头部是最新的旧记录，尾部是最旧的记录。</p><h5 id="readview-介绍" tabindex="-1">readview 介绍 <a class="header-anchor" href="#readview-介绍" aria-label="Permalink to &quot;readview 介绍&quot;">​</a></h5><p>读视图是快照读SQL 执行时MVCC 提取数据的一句，记录并维护系统当前活跃的事务（未提交的）ID</p><p>read view 包括了四个核心字段：</p><table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">m_ids</td><td style="text-align:center;">当前活跃的事务ID集合</td></tr><tr><td style="text-align:center;">min_trx_id</td><td style="text-align:center;">最小活跃事务ID</td></tr><tr><td style="text-align:center;">max_trx_id</td><td style="text-align:center;">预分配事务ID，当前最大事务ID+1（事务ID是自增的）</td></tr><tr><td style="text-align:center;">creator_trx_id</td><td style="text-align:center;">Read View 创建者的事务ID</td></tr></tbody></table>',123),f=e("p",{cases:""},"$$ 版本链数据访问规则 \\begin",-1),T=s('<ol><li>trx—id=creator—trx—id, &amp;可以访问该版本 (当前事务更改的)\\</li><li>trx—id &lt; min—trx—id, &amp;可以访问该版本（数据已经提交）\\</li><li>trx—id &gt; max—trx—id, &amp;不可以访问该版本（当前事务是在ReadView 生成之后开启的）\\</li><li>min—trx—id \\le trx—id \\le max—trx—id, &amp;如果trx—id不在m-ids中是可以访问该版本的（事务已经提交） \\end{cases} $$</li></ol><p>不同的事务隔离级别，生成的readview 的时机不同。</p><p>RC 每次都生成 readview ，RR 只在事务第一次执行快照读的时候生成readview，后续复用该readview。</p><h5 id="原理分析-rc" tabindex="-1">原理分析（RC） <a class="header-anchor" href="#原理分析-rc" aria-label="Permalink to &quot;原理分析（RC）&quot;">​</a></h5><p><strong>RC 每次都生成 readview 。</strong></p><p><img src="'+D+'" alt="在这里插入图片描述"></p><h5 id="原理分析-rr" tabindex="-1">原理分析（RR） <a class="header-anchor" href="#原理分析-rr" aria-label="Permalink to &quot;原理分析（RR）&quot;">​</a></h5><p><strong>事务在第一次执行快照读时生成ReadView，后续复用该ReadView。</strong></p><p><img src="'+C+'" alt="在这里插入图片描述"></p><p>MVCC 主要还是通过隐藏字段（事务id，回滚指针）、undo log 版本链，readview 实现，MVCC + 锁保证了事务的隔离性。</p><p>group_concat</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">,group_concat(code) </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`user`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">group by</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">name</span><span style="color:#24292E;">,group_concat(code) </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`user`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">group by</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">name</span><span style="color:#24292E;">;</span></span></code></pre></div><p><img src="'+q+`" alt="image-20230519141703990"></p><p>使用<code>group_concat</code>函数，可以轻松的把分组后name相同的数据拼接到一起，组成一个字符串，用<code>逗号</code>分隔。</p><blockquote><p>如何不批量插入重复数据?</p></blockquote><p><code>insert ignore into</code></p><p>当插入数据时，如出现错误时，如重复数据，将不返回错误，只以警告形式返回。所以使用ignore请确保语句本身没有问题，否则也会被忽略掉。</p><p>这种方法很简便，但是有一种可能，就是插入不是因为重复数据报错，而是因为其他原因报错的，也同样被忽略了</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">INSERT IGNORE INTO</span><span style="color:#E1E4E8;"> user (</span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">VALUES</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;telami&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">INSERT IGNORE INTO</span><span style="color:#24292E;"> user (</span><span style="color:#D73A49;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">VALUES</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;telami&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><code>on duplicate key update[建议]</code></p><p>当primary或者unique重复时，则执行update语句，如update后为无用语句，如id=id，则同1功能相同，但错误不会被忽略掉。</p><p>这种方法有个前提条件,需要插入的约束，是主键或者唯一约束（在你的业务中那个要作为唯一的判断就将那个字段设置为唯一约束也就是unique key）。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">//mobile_number有唯一约束</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;batchSaveUser&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">insert into user (id,username,mobile_number)</span></span>
<span class="line"><span style="color:#E1E4E8;">values</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">foreach</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">collection</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;index&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">separator</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">#{item.id},</span></span>
<span class="line"><span style="color:#E1E4E8;">#{item.username},</span></span>
<span class="line"><span style="color:#E1E4E8;">#{item.mobileNumber}</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">foreach</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">ON duplicate KEY UPDATE id = id</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">//mobile_number有唯一约束</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;batchSaveUser&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parameterType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">insert into user (id,username,mobile_number)</span></span>
<span class="line"><span style="color:#24292E;">values</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">foreach</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">collection</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;item&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;index&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">separator</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">#{item.id},</span></span>
<span class="line"><span style="color:#24292E;">#{item.username},</span></span>
<span class="line"><span style="color:#24292E;">#{item.mobileNumber}</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">foreach</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">ON duplicate KEY UPDATE id = id</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">INSERT INTO</span><span style="color:#E1E4E8;"> user (</span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">VALUES</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;telami&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">ON</span><span style="color:#E1E4E8;"> duplicate </span><span style="color:#F97583;">KEY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">UPDATE</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">INSERT INTO</span><span style="color:#24292E;"> user (</span><span style="color:#D73A49;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">VALUES</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;telami&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">ON</span><span style="color:#24292E;"> duplicate </span><span style="color:#D73A49;">KEY</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">UPDATE</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id</span></span></code></pre></div><p><code>insert … select … where not exist</code></p><p>根据select的条件判断是否插入，可以不光通过primary 和unique来判断，也可通过其它条件；</p><p>这种方法其实就是使用了sql的一个临时表的方式，但是里面使用到了子查询，效率受影响。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">INSERT INTO</span><span style="color:#E1E4E8;"> user (</span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;telami&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> dual </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">NOT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">EXISTS</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">INSERT INTO</span><span style="color:#24292E;"> user (</span><span style="color:#D73A49;">name</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;telami&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> dual </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NOT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">EXISTS</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre></div><p><code>replace into</code></p><p>如果存在primary or unique相同的记录，则先删除掉。再插入新记录。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">REPLACE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">INTO</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;telami&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> books</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">REPLACE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">INTO</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;telami&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> books</span></span></code></pre></div><blockquote><p>通过unsigned强制修改主键字段</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 当主键无法修改时 加上 unsigned 标记</span></span>
<span class="line"><span style="color:#9ECBFF;">\`id\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">) unsigned </span><span style="color:#F97583;">NOT NULL</span><span style="color:#E1E4E8;"> AUTO_INCREMENT COMMENT </span><span style="color:#9ECBFF;">&#39;主键&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 当主键无法修改时 加上 unsigned 标记</span></span>
<span class="line"><span style="color:#032F62;">\`id\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">) unsigned </span><span style="color:#D73A49;">NOT NULL</span><span style="color:#24292E;"> AUTO_INCREMENT COMMENT </span><span style="color:#032F62;">&#39;主键&#39;</span></span></code></pre></div><blockquote><p>sql查询日期格式化</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#F97583;">FROM</span></span>
<span class="line"><span style="color:#E1E4E8;">order_title</span></span>
<span class="line"><span style="color:#F97583;">WHERE</span></span>
<span class="line"><span style="color:#F97583;">DATE_FORMAT</span><span style="color:#E1E4E8;">(create_date,</span><span style="color:#9ECBFF;">&#39;%Y-%m&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2021-01&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;2021-02&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;2021-03&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span></span>
<span class="line"><span style="color:#24292E;">order_title</span></span>
<span class="line"><span style="color:#D73A49;">WHERE</span></span>
<span class="line"><span style="color:#D73A49;">DATE_FORMAT</span><span style="color:#24292E;">(create_date,</span><span style="color:#032F62;">&#39;%Y-%m&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2021-01&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;2021-02&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;2021-03&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><blockquote><p>子查询减少回表SQL优化</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 待优化SQL</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> 各种字段</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`table_name\`</span></span>
<span class="line"><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> 各种条件</span></span>
<span class="line"><span style="color:#F97583;">LIMIT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 待优化SQL</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> 各种字段</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`table_name\`</span></span>
<span class="line"><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> 各种条件</span></span>
<span class="line"><span style="color:#D73A49;">LIMIT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 优化后SQL</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> 各种字段</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`table_name\`</span><span style="color:#E1E4E8;"> main_tale</span></span>
<span class="line"><span style="color:#F97583;">RIGHT JOIN</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;">  子查询只查主键</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`table_name\`</span></span>
<span class="line"><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> 各种条件</span></span>
<span class="line"><span style="color:#F97583;">LIMIT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">) temp_table </span><span style="color:#F97583;">ON</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">temp_table</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">主键</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">main_table</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">主键</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 优化后SQL</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> 各种字段</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`table_name\`</span><span style="color:#24292E;"> main_tale</span></span>
<span class="line"><span style="color:#D73A49;">RIGHT JOIN</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;">  子查询只查主键</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`table_name\`</span></span>
<span class="line"><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> 各种条件</span></span>
<span class="line"><span style="color:#D73A49;">LIMIT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">) temp_table </span><span style="color:#D73A49;">ON</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">temp_table</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">主键</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">main_table</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">主键</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 示例</span></span>
<span class="line"><span style="color:#E1E4E8;">#原SQL</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> test_user </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> age</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">LIMIT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">#优化后SQL</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> test_user t0</span></span>
<span class="line"><span style="color:#F97583;">RIGHT JOIN</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> user_id</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> test_user</span></span>
<span class="line"><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> age</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">LIMIT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">) t1 </span><span style="color:#F97583;">ON</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">t1</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">t0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_id</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 示例</span></span>
<span class="line"><span style="color:#24292E;">#原SQL</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> test_user </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> age</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">LIMIT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">#优化后SQL</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> test_user t0</span></span>
<span class="line"><span style="color:#D73A49;">RIGHT JOIN</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> user_id</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> test_user</span></span>
<span class="line"><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> age</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">LIMIT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">) t1 </span><span style="color:#D73A49;">ON</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">t1</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">t0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_id</span><span style="color:#24292E;">;</span></span></code></pre></div><blockquote><p>select 1进行SQL查找是否&quot;存在&quot;</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">AND</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">LIMIT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">table</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">AND</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">LIMIT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// java写法:  </span></span>
<span class="line"><span style="color:#E1E4E8;">Integer exist </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xxDao.</span><span style="color:#B392F0;">existXxxxByXxx</span><span style="color:#E1E4E8;">(params);  </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( exist </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> NULL ) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//当存在时，执行这里的代码  </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//当不存在时，执行这里	的代码  </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// java写法:  </span></span>
<span class="line"><span style="color:#24292E;">Integer exist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xxDao.</span><span style="color:#6F42C1;">existXxxxByXxx</span><span style="color:#24292E;">(params);  </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( exist </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> NULL ) {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//当存在时，执行这里的代码  </span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//当不存在时，执行这里	的代码  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>MySql 5.7 解锁超时的事务</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1、查询是否锁表 </span></span>
<span class="line"><span style="color:#e1e4e8;">	show OPEN TABLES where In_use &gt; 0; </span></span>
<span class="line"><span style="color:#e1e4e8;">2、查询进程 </span></span>
<span class="line"><span style="color:#e1e4e8;">	show processlist </span></span>
<span class="line"><span style="color:#e1e4e8;">3、查询到相对应的进程id</span></span>
<span class="line"><span style="color:#e1e4e8;">	kill id </span></span>
<span class="line"><span style="color:#e1e4e8;">补充： </span></span>
<span class="line"><span style="color:#e1e4e8;">查看正在锁的事务 </span></span>
<span class="line"><span style="color:#e1e4e8;">	SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;  </span></span>
<span class="line"><span style="color:#e1e4e8;">查看等待锁的事务 </span></span>
<span class="line"><span style="color:#e1e4e8;">	SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS; </span></span>
<span class="line"><span style="color:#e1e4e8;">	SELECT * from information_schema.INNODB_TRX </span></span>
<span class="line"><span style="color:#e1e4e8;">	kill trx_sql_thread_id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1、查询是否锁表 </span></span>
<span class="line"><span style="color:#24292e;">	show OPEN TABLES where In_use &gt; 0; </span></span>
<span class="line"><span style="color:#24292e;">2、查询进程 </span></span>
<span class="line"><span style="color:#24292e;">	show processlist </span></span>
<span class="line"><span style="color:#24292e;">3、查询到相对应的进程id</span></span>
<span class="line"><span style="color:#24292e;">	kill id </span></span>
<span class="line"><span style="color:#24292e;">补充： </span></span>
<span class="line"><span style="color:#24292e;">查看正在锁的事务 </span></span>
<span class="line"><span style="color:#24292e;">	SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;  </span></span>
<span class="line"><span style="color:#24292e;">查看等待锁的事务 </span></span>
<span class="line"><span style="color:#24292e;">	SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS; </span></span>
<span class="line"><span style="color:#24292e;">	SELECT * from information_schema.INNODB_TRX </span></span>
<span class="line"><span style="color:#24292e;">	kill trx_sql_thread_id</span></span></code></pre></div><blockquote><p>sql日期比较</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 对于比较的两个时间，时间小的放在前面，时间大的放在后面</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> TIMESTAMPDIFF(</span><span style="color:#F97583;">DAY</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-03-20 23:59:00&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2015-03-22 00:00:00&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> TIMESTAMPDIFF(</span><span style="color:#F97583;">HOUR</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-03-20 09:00:00&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-03-22 10:00:00&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> TIMESTAMPDIFF(</span><span style="color:#F97583;">MINUTE</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-03-20 09:00:00&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-03-22 10:00:00&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> TIMESTAMPDIFF(</span><span style="color:#F97583;">SECOND</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-03-20 09:00:00&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-03-22 10:00:00&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 对于比较的两个时间，时间小的放在前面，时间大的放在后面</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> TIMESTAMPDIFF(</span><span style="color:#D73A49;">DAY</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-03-20 23:59:00&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2015-03-22 00:00:00&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> TIMESTAMPDIFF(</span><span style="color:#D73A49;">HOUR</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-03-20 09:00:00&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-03-22 10:00:00&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> TIMESTAMPDIFF(</span><span style="color:#D73A49;">MINUTE</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-03-20 09:00:00&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-03-22 10:00:00&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> TIMESTAMPDIFF(</span><span style="color:#D73A49;">SECOND</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-03-20 09:00:00&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-03-22 10:00:00&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><blockquote><p>sql添加创建时间和修改时间</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">-- 创建的时候设置当前时间</span></span>
<span class="line"><span style="color:#e1e4e8;">\`create_time\` datetime DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">-- 创建的时候设置当前时间</span></span>
<span class="line"><span style="color:#24292e;">\`create_time\` datetime DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">-- 更新的时候设置更新时间为当前时间</span></span>
<span class="line"><span style="color:#e1e4e8;">\`update_time\` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">-- 更新的时候设置更新时间为当前时间</span></span>
<span class="line"><span style="color:#24292e;">\`update_time\` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span></span></code></pre></div><blockquote><p>mysql单表数据量过大 select count(1) from &#39;表名&#39; 会超时</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 查询表信息</span></span>
<span class="line"><span style="color:#E1E4E8;">show </span><span style="color:#F97583;">table</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">status</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">like</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;表名&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 查询表信息</span></span>
<span class="line"><span style="color:#24292E;">show </span><span style="color:#D73A49;">table</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">status</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">like</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;表名&#39;</span></span></code></pre></div><p><img src="`+_+`" alt="image-20230418144910852"></p><blockquote><p>SQL 语句中 left join 后用 on 还是 where 的区别</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">在使用left jion时，on和where条件的区别如下：</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">1.on条件是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回左边表中的记录。</span></span>
<span class="line"><span style="color:#e1e4e8;">2.where条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有left join的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">left join,right join,full join 有相同的特殊性，不管on上的条件是否为真都会返回left或right表中的记录</span></span>
<span class="line"><span style="color:#e1e4e8;">full join 则具有left和right的特性的并集。</span></span>
<span class="line"><span style="color:#e1e4e8;">而inner jion没这个特殊性，则条件放在on中和where中，返回的结果集是相同的。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">在使用left jion时，on和where条件的区别如下：</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">1.on条件是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回左边表中的记录。</span></span>
<span class="line"><span style="color:#24292e;">2.where条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有left join的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">left join,right join,full join 有相同的特殊性，不管on上的条件是否为真都会返回left或right表中的记录</span></span>
<span class="line"><span style="color:#24292e;">full join 则具有left和right的特性的并集。</span></span>
<span class="line"><span style="color:#24292e;">而inner jion没这个特殊性，则条件放在on中和where中，返回的结果集是相同的。</span></span></code></pre></div><blockquote><p>MySQL 添加虚拟唯一键</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">\`unique_key\` varchar(500) GENERATED ALWAYS AS (md5(concat_ws(if((\`is_deleted\` = 1),\`id\`,0),_utf8mb4&#39;_&#39;,\`xxx\`))) VIRTUAL COMMENT &#39;虚拟唯一键&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">UNIQUE KEY \`uniq_xxx\` (\`unique_key\`),</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">\`unique_key\` varchar(500) GENERATED ALWAYS AS (md5(concat_ws(if((\`is_deleted\` = 1),\`id\`,0),_utf8mb4&#39;_&#39;,\`xxx\`))) VIRTUAL COMMENT &#39;虚拟唯一键&#39;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">UNIQUE KEY \`uniq_xxx\` (\`unique_key\`),</span></span></code></pre></div><h3 id="进阶操作" tabindex="-1">进阶操作 <a class="header-anchor" href="#进阶操作" aria-label="Permalink to &quot;进阶操作&quot;">​</a></h3><blockquote><p>慢查询</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 查看是否开启慢查询日志</span></span>
<span class="line"><span style="color:#F97583;">sql&gt;</span><span style="color:#E1E4E8;"> show variables </span><span style="color:#F97583;">like</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;slow_query_log&#39;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#6A737D;">-- 设置慢查询日志的位置</span></span>
<span class="line"><span style="color:#F97583;">sql&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">global</span><span style="color:#E1E4E8;"> slow_query_log_file</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39; /usr/share/sql/sql_log/sql-slow.log&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">-- 开启慢查询日志</span></span>
<span class="line"><span style="color:#F97583;">sql&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">global</span><span style="color:#E1E4E8;"> log_queries_not_using_indexes</span><span style="color:#F97583;">=on</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">-- 设置大于1秒钟的数据记录到慢日志</span></span>
<span class="line"><span style="color:#F97583;">sql&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">global</span><span style="color:#E1E4E8;"> long_query_time</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 查看是否开启慢查询日志</span></span>
<span class="line"><span style="color:#D73A49;">sql&gt;</span><span style="color:#24292E;"> show variables </span><span style="color:#D73A49;">like</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;slow_query_log&#39;</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">-- 设置慢查询日志的位置</span></span>
<span class="line"><span style="color:#D73A49;">sql&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">global</span><span style="color:#24292E;"> slow_query_log_file</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39; /usr/share/sql/sql_log/sql-slow.log&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">-- 开启慢查询日志</span></span>
<span class="line"><span style="color:#D73A49;">sql&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">global</span><span style="color:#24292E;"> log_queries_not_using_indexes</span><span style="color:#D73A49;">=on</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">-- 设置大于1秒钟的数据记录到慢日志</span></span>
<span class="line"><span style="color:#D73A49;">sql&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">global</span><span style="color:#24292E;"> long_query_time</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span></code></pre></div>`,59),x=[k,f,T];function v(I,B,M,R,S,O){return n(),l("div",null,x)}const N=a(A,[["render",v]]);export{L as __pageData,N as default};
