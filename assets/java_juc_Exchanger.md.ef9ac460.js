import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.8048b864.js";const F=JSON.parse('{"title":"Exchanger","description":"","frontmatter":{},"headers":[],"relativePath":"java/juc/Exchanger.md","filePath":"java/juc/Exchanger.md","lastUpdated":1719210606000}'),l={name:"java/juc/Exchanger.md"},o=p(`<h1 id="exchanger" tabindex="-1">Exchanger <a class="header-anchor" href="#exchanger" aria-label="Permalink to &quot;Exchanger&quot;">​</a></h1><p>Exchanger，它能够实现线程之间的数据交换：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Exchanger&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; exchanger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Exchanger&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;收到主线程传递的交换数据：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">exchanger.</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;AAAA&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;收到子线程传递的交换数据：&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">exchanger.</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;BBBB&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    Exchanger&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; exchanger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Exchanger&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;收到主线程传递的交换数据：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">exchanger.</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;AAAA&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;收到子线程传递的交换数据：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">exchanger.</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;BBBB&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在调用<code>exchange</code>方法后，当前线程会等待其他线程调用同一个exchanger对象的<code>exchange</code>方法，当另一个线程也调用之后，方法会返回对方线程传入的参数。</p>`,4),e=[o];function t(c,r,E,y,i,h){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{F as __pageData,d as default};
