import{_ as a,c as i,o as l,a4 as e}from"./chunks/framework.PLIGnzYk.js";const g=JSON.parse('{"title":"UML","description":"","frontmatter":{},"headers":[],"relativePath":"design/uml/uml.md","filePath":"design/uml/uml.md","lastUpdated":1723692215000}'),t={name:"design/uml/uml.md"},r=e('<h1 id="uml" tabindex="-1">UML <a class="header-anchor" href="#uml" aria-label="Permalink to &quot;UML&quot;">​</a></h1><p>UML，Unified Modeling Language 统一建模语言，它是可视化软件系统设计的标准方法，UML 是一种经典的建模语言，包含了系统论、工程思想，以及架构学的元素。</p><p>UML 包含多种图表，用于表示系统的不同方面，以下是主要的 UML 图表类型：</p><ul><li>用例图（Use Case Diagram）：描述系统功能及其与外部实体（如用户或其他系统）的交互。</li><li>类图（Class Diagram）：描述系统的静态结构，包括类、属性、方法及类之间的关系。</li><li>对象图（Object Diagram）：展示特定时刻系统中对象的实例及其关系，通常是类图的实例化。</li><li>顺序图（Sequence Diagram）：显示对象之间按时间顺序进行的交互，强调消息的发送和接收。</li><li>通信图（Communication Diagram）：又称协作图，展示对象之间的交互，强调对象之间的连接和消息流。</li><li>状态图（State Diagram）：描述对象在其生命周期中所经历的状态变化及状态之间的转移。</li><li>活动图（Activity Diagram）：描述系统中的活动流程，强调并行和分支控制流。</li><li>组件图（Component Diagram）：描述系统的物理组件及其相互关系，通常用于显示代码结构。</li><li>部署图（Deployment Diagram）：描述系统的物理部署架构，包括硬件节点及其之间的通信关系。</li><li>包图（Package Diagram）：组织类和其他模型元素，展示系统的包及其依赖关系。</li><li>定时图（Timing Diagram）：描述对象状态或条件随时间变化的图表，常用于实时系统建模。</li></ul><h2 id="uml-类图" tabindex="-1">UML 类图 <a class="header-anchor" href="#uml-类图" aria-label="Permalink to &quot;UML 类图&quot;">​</a></h2><p>UML 类图由以下构建基块组成：</p><ul><li>Class（类）</li><li>Attributes（属性）</li><li>Methods（方法）</li><li>Interfaces（接口）</li><li>Abstract Class（抽象类）</li><li>Enumeration（枚举）</li></ul><blockquote><p><a href="https://juejin.cn/post/7390815289993232438" target="_blank" rel="noreferrer">UML 类图</a></p></blockquote>',8),n=[r];function o(s,m,c,u,_,d){return l(),i("div",null,n)}const h=a(t,[["render",o]]);export{g as __pageData,h as default};
