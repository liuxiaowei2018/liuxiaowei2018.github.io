import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8048b864.js";const p="/assets/image-20230207143105680.4462fbec.png",g=JSON.parse('{"title":"Java新特性","description":"","frontmatter":{},"headers":[],"relativePath":"java/feature.md","filePath":"java/feature.md","lastUpdated":1697176108000}'),o={name:"java/feature.md"},e=l('<h1 id="java新特性" tabindex="-1">Java新特性 <a class="header-anchor" href="#java新特性" aria-label="Permalink to &quot;Java新特性&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1、java8">1、Java8</a><ul><li><a href="#方法引用">方法引用</a></li><li><a href="#steam-api">Steam API</a></li><li><a href="#optional">Optional</a></li><li><a href="#新日期时间-api">新日期时间 API</a></li></ul></li><li><a href="#_2、java9">2、Java9</a><ul><li><a href="#jigsaw-模块">Jigsaw 模块</a></li><li><a href="#接口使用私有方法">接口使用私有方法</a></li><li><a href="#不可变集合">不可变集合</a></li></ul></li><li><a href="#_3、java10">3、Java10</a><ul><li><a href="#局部类型推断-var">局部类型推断 var</a></li><li><a href="#gc改进">GC改进</a></li></ul></li><li><a href="#_4、java-11">4、Java 11</a><ul><li><a href="#lambda-使用-var">Lambda 使用 var</a></li><li><a href="#字符串api增强">字符串API增强</a></li><li><a href="#http-client-api标准化">HTTP Client API标准化</a></li></ul></li><li><a href="#_5、java-12">5、Java 12</a><ul><li><a href="#switch表达式">switch表达式</a></li></ul></li></ul></nav><table><thead><tr><th>版本</th><th>发布时间</th><th>名称</th></tr></thead><tbody><tr><td>JDK Beta</td><td>1995</td><td>WebRunner</td></tr><tr><td>JDK 1.0</td><td>1996.1</td><td>Oak</td></tr><tr><td>JDK 1.1</td><td>1997.2</td><td></td></tr><tr><td>J2SE 1.2</td><td>1998.12</td><td>Playground</td></tr><tr><td>J2SE 1.3</td><td>2000.5</td><td>Kestrel</td></tr><tr><td>J2SE 1.4</td><td>2002.2</td><td>Merlin</td></tr><tr><td>J2SE 5.0</td><td>2004.9</td><td>Tiger</td></tr><tr><td>Java SE 6</td><td>2006.12</td><td>Mustang</td></tr><tr><td>Java SE 7</td><td>2011.7</td><td>Dolphin</td></tr><tr><td>Java SE 8 (LTS)</td><td>2014.3</td><td></td></tr><tr><td>Java SE 9</td><td>2017.9</td><td></td></tr><tr><td>Java SE 10 (18.3)</td><td>2018.3</td><td></td></tr><tr><td>Java SE 11 (18.9 LTS)</td><td>2018.9</td><td></td></tr><tr><td>Java SE 12 (19.3)</td><td>2019.3</td><td></td></tr><tr><td>Java SE 13 (19.9)</td><td>2019.9</td><td></td></tr></tbody></table><h2 id="_1、java8" tabindex="-1">1、Java8 <a class="header-anchor" href="#_1、java8" aria-label="Permalink to &quot;1、Java8&quot;">​</a></h2><blockquote><p>Java8 是一个里程碑式的版本，凭借如下新特性，让人对其赞不绝口。</p><ul><li>Lambda 表达式给代码构建带来了全新的风格和能力；</li><li>Steam API 丰富了集合操作，拓展了集合的能力；</li><li>新日期时间 API ；</li></ul></blockquote><p><img src="'+p+`" alt="image-20230207143105680"></p><h3 id="方法引用" tabindex="-1">方法引用 <a class="header-anchor" href="#方法引用" aria-label="Permalink to &quot;方法引用&quot;">​</a></h3><p>Lambda 表达式是匿名函数，可以理解为一段可以用参数传递的代码（代码像数据一样传递）。Lambda 表达式的使用需要有函数式接口的支持。</p><p>方法引用是对特殊 Lambda 表达式的一种简化写法，当 Lambda 体中只调用一个方法，此方法满足函数式接口规范，此时可以使用<code>::</code>方法引用语法。</p><p>从语法表现力角度来讲，<code>方法引用 &gt; Lambda表达式 &gt; 匿名内部类</code>，<strong>方法引用是高阶版的 Lambda 表达式，语言表达更为简洁，强烈推荐使用。</strong></p><blockquote><p>方法引用 ：class::method</p><ul><li>静态方法引用： User::combine</li><li>参数方法引用： String::indexOf</li><li>实例方法引用： user::getUserName</li><li>构造器引用：User::new</li></ul></blockquote><h3 id="steam-api" tabindex="-1">Steam API <a class="header-anchor" href="#steam-api" aria-label="Permalink to &quot;Steam API&quot;">​</a></h3><h4 id="基础篇" tabindex="-1">基础篇 <a class="header-anchor" href="#基础篇" aria-label="Permalink to &quot;基础篇&quot;">​</a></h4><h5 id="_1-创建流" tabindex="-1">1.创建流 <a class="header-anchor" href="#_1-创建流" aria-label="Permalink to &quot;1.创建流&quot;">​</a></h5><blockquote><ul><li>Collection.stream()</li><li>Collection.parallelStream()</li><li>Arrays. stream()</li><li>Stream.of()</li><li>Stream.terate()</li><li>Stream.generate()</li><li>BufferedReader.lines()</li><li>Pattern.splitAsStream()</li></ul></blockquote><h5 id="_2-中间操作" tabindex="-1">2.中间操作 <a class="header-anchor" href="#_2-中间操作" aria-label="Permalink to &quot;2.中间操作&quot;">​</a></h5><blockquote><ul><li><p>筛选与切片</p></li><li><p>filter：过滤流中的某些元素</p></li><li><p>limit(n)：获取n个元素</p></li><li><p>skip(n)：跳过n元素，配合limit(n)可实现分页</p></li><li><p>distinct：通过流中元素的 hashCode() 和 equals() 去除重复元素</p></li><li><p>映射</p></li><li><p>map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</p></li><li><p>flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</p></li><li><p>排序</p></li><li><p>sorted()：自然排序，流中元素需实现Comparable接口</p></li><li><p>sorted(Comparator com)：定制排序，自定义Comparator排序器</p></li><li><p>消费</p></li><li><p>peek：如同于map，能得到流中的每一个元素[没有返回值]</p></li></ul></blockquote><ul><li><strong>Filter 过滤</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stringCollection</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((s) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa2&quot;, &quot;aaa1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stringCollection</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa2&quot;, &quot;aaa1&quot;</span></span></code></pre></div><ul><li><strong>Sorted 排序</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stringCollection</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">sorted</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((s) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa1&quot;, &quot;aaa2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stringCollection</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa1&quot;, &quot;aaa2&quot;</span></span></code></pre></div><ul><li><strong>Map 转换</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">stringCollection</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toUpperCase)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">sorted</span><span style="color:#E1E4E8;">((a, b) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(a))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stringCollection</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toUpperCase)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">((a, b) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(a))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;</span></span></code></pre></div><h5 id="_3-终止操作" tabindex="-1">3.终止操作 <a class="header-anchor" href="#_3-终止操作" aria-label="Permalink to &quot;3.终止操作&quot;">​</a></h5><blockquote><ul><li>allMatch：接收一个 Predicate 函数，当流中每个元素都符合该断言时才返回true，否则返回false</li><li>noneMatch：接收一个 Predicate 函数，当流中每个元素都不符合该断言时才返回true，否则返回false</li><li>anyMatch：接收一个 Predicate 函数，只要流中有一个元素满足该断言则返回true，否则返回false</li><li>findFirst：返回流中第一个元素</li><li>findAny：返回流中的任意元素</li><li>count：返回流中元素的总个数</li><li>max：返回流中元素最大值</li><li>min：返回流中元素最小值</li><li>reduce</li></ul></blockquote><ul><li><strong>Match 匹配</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> anyStartsWithA </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    stringCollection</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">anyMatch</span><span style="color:#E1E4E8;">((s) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(anyStartsWithA);      </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否都是以 a 开头的</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> allStartsWithA </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    stringCollection</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">allMatch</span><span style="color:#E1E4E8;">((s) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(allStartsWithA);      </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否都不是以 z 开头的,</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> noneStartsWithZ </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    stringCollection</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">noneMatch</span><span style="color:#E1E4E8;">((s) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;z&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(noneStartsWithZ);      </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> anyStartsWithA </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">anyMatch</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(anyStartsWithA);      </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否都是以 a 开头的</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> allStartsWithA </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">allMatch</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(allStartsWithA);      </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否都不是以 z 开头的,</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> noneStartsWithZ </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">noneMatch</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;z&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(noneStartsWithZ);      </span><span style="color:#6A737D;">// true</span></span></code></pre></div><ul><li><strong>Count 计数</strong></li></ul><p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span></span>
<span class="line"><span style="color:#e1e4e8;">long startsWithB =</span></span>
<span class="line"><span style="color:#e1e4e8;">    stringCollection</span></span>
<span class="line"><span style="color:#e1e4e8;">        .stream()</span></span>
<span class="line"><span style="color:#e1e4e8;">        .filter((s) -&gt; s.startsWith(&quot;b&quot;))</span></span>
<span class="line"><span style="color:#e1e4e8;">        .count();</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">System.out.println(startsWithB);    // 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span></span>
<span class="line"><span style="color:#24292e;">long startsWithB =</span></span>
<span class="line"><span style="color:#24292e;">    stringCollection</span></span>
<span class="line"><span style="color:#24292e;">        .stream()</span></span>
<span class="line"><span style="color:#24292e;">        .filter((s) -&gt; s.startsWith(&quot;b&quot;))</span></span>
<span class="line"><span style="color:#24292e;">        .count();</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">System.out.println(startsWithB);    // 3</span></span></code></pre></div><ul><li><strong>Reduce 规约</strong></li></ul><p><code>Reduce</code> 中文翻译为：<em>减少、缩小</em>。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(BinaryOperator</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> accumulator)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(BinaryOperator</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> accumulator)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">第一次执行时，accumulator函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素;</span></span>
<span class="line"><span style="color:#e1e4e8;">第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素;</span></span>
<span class="line"><span style="color:#e1e4e8;">依次类推;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">第一次执行时，accumulator函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素;</span></span>
<span class="line"><span style="color:#24292e;">第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素;</span></span>
<span class="line"><span style="color:#24292e;">依次类推;</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">T </span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(T identity, BinaryOperator</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> accumulator)</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> U </span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(U identity,BiFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T, U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> accumulator,BinaryOperator</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> combiner)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">T </span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(T identity, BinaryOperator</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> accumulator)</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> U </span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(U identity,BiFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T, U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> accumulator,BinaryOperator</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> combiner)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">收集</span></span>
<span class="line"><span style="color:#e1e4e8;">collect：接收一个Collector实例，将流中元素收集成另外一个数据结构。</span></span>
<span class="line"><span style="color:#e1e4e8;">Collector&lt;T, A, R&gt; 是一个接口，有以下5个抽象方法：</span></span>
<span class="line"><span style="color:#e1e4e8;">- Supplier&lt;A&gt; supplier()：创建一个结果容器A</span></span>
<span class="line"><span style="color:#e1e4e8;">- BiConsumer&lt;A, T&gt; accumulator()：消费型接口，第一个参数为容器A，第二个参数为流中元素T</span></span>
<span class="line"><span style="color:#e1e4e8;">- BinaryOperator&lt;A&gt; combiner()：函数接口，该参数的作用跟上一个方法(reduce)中的combiner参数一样，将并行流中各 个子进程合并</span></span>
<span class="line"><span style="color:#e1e4e8;">- Function&lt;A, R&gt; finisher()：函数式接口，参数为：容器A，返回类型为：collect方法最终想要的结果R。</span></span>
<span class="line"><span style="color:#e1e4e8;">- Set&lt;Characteristics&gt; characteristics()：返回一个不可变的Set集合，用来表明该Collector的特征。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">收集</span></span>
<span class="line"><span style="color:#24292e;">collect：接收一个Collector实例，将流中元素收集成另外一个数据结构。</span></span>
<span class="line"><span style="color:#24292e;">Collector&lt;T, A, R&gt; 是一个接口，有以下5个抽象方法：</span></span>
<span class="line"><span style="color:#24292e;">- Supplier&lt;A&gt; supplier()：创建一个结果容器A</span></span>
<span class="line"><span style="color:#24292e;">- BiConsumer&lt;A, T&gt; accumulator()：消费型接口，第一个参数为容器A，第二个参数为流中元素T</span></span>
<span class="line"><span style="color:#24292e;">- BinaryOperator&lt;A&gt; combiner()：函数接口，该参数的作用跟上一个方法(reduce)中的combiner参数一样，将并行流中各 个子进程合并</span></span>
<span class="line"><span style="color:#24292e;">- Function&lt;A, R&gt; finisher()：函数式接口，参数为：容器A，返回类型为：collect方法最终想要的结果R。</span></span>
<span class="line"><span style="color:#24292e;">- Set&lt;Characteristics&gt; characteristics()：返回一个不可变的Set集合，用来表明该Collector的特征。</span></span></code></pre></div></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; reduced </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    stringCollection</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">sorted</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((s1, s2) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">reduced.</span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; reduced </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((s1, s2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">reduced.</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;</span></span></code></pre></div><h4 id="扩展篇" tabindex="-1">扩展篇 <a class="header-anchor" href="#扩展篇" aria-label="Permalink to &quot;扩展篇&quot;">​</a></h4><h5 id="_1-集合与对象互转" tabindex="-1">1.集合与对象互转 <a class="header-anchor" href="#_1-集合与对象互转" aria-label="Permalink to &quot;1.集合与对象互转&quot;">​</a></h5><h6 id="对象转集合" tabindex="-1">对象转集合 <a class="header-anchor" href="#对象转集合" aria-label="Permalink to &quot;对象转集合&quot;">​</a></h6><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将单个对象转化为集合</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">t</span><span style="color:#6A737D;">   对象实例</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">&lt;T&gt;</span><span style="color:#6A737D;"> 对象类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">&lt;C&gt;</span><span style="color:#6A737D;"> 集合类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> 包含对象的集合实例</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T, C extends Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toCollection</span><span style="color:#E1E4E8;">(T t) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toCollection</span><span style="color:#E1E4E8;">(t, ArrayList</span><span style="color:#F97583;">::new</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将单个对象转化为集合</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">t</span><span style="color:#6A737D;">        对象实例</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">supplier</span><span style="color:#6A737D;"> 集合工厂</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">&lt;T&gt;</span><span style="color:#6A737D;">      对象类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">&lt;C&gt;</span><span style="color:#6A737D;">      集合类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> 包含对象的集合实例</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T, C extends Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toCollection</span><span style="color:#E1E4E8;">(T t, Supplier</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">C</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> supplier) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(t).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toCollection</span><span style="color:#E1E4E8;">(supplier));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将单个对象转化为集合</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">t</span><span style="color:#6A737D;">   对象实例</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;T&gt;</span><span style="color:#6A737D;"> 对象类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;C&gt;</span><span style="color:#6A737D;"> 集合类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 包含对象的集合实例</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T, C extends Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toCollection</span><span style="color:#24292E;">(T t) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toCollection</span><span style="color:#24292E;">(t, ArrayList</span><span style="color:#D73A49;">::new</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将单个对象转化为集合</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">t</span><span style="color:#6A737D;">        对象实例</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">supplier</span><span style="color:#6A737D;"> 集合工厂</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;T&gt;</span><span style="color:#6A737D;">      对象类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;C&gt;</span><span style="color:#6A737D;">      集合类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 包含对象的集合实例</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T, C extends Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toCollection</span><span style="color:#24292E;">(T t, Supplier</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">C</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> supplier) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(t).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toCollection</span><span style="color:#24292E;">(supplier));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h6 id="集合转对象" tabindex="-1">集合转对象 <a class="header-anchor" href="#集合转对象" aria-label="Permalink to &quot;集合转对象&quot;">​</a></h6><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 取出集合中第一个元素</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">collection</span><span style="color:#6A737D;"> 集合实例</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">&lt;E&gt;</span><span style="color:#6A737D;">        集合中元素类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> 泛型类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> E </span><span style="color:#B392F0;">toObject</span><span style="color:#E1E4E8;">(Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> collection) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 处理集合空指针异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt; coll </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(collection).</span><span style="color:#B392F0;">orElseGet</span><span style="color:#E1E4E8;">(ArrayList</span><span style="color:#F97583;">::new</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 此处可以对流进行排序，然后取出第一个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> coll.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findFirst</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 取出集合中第一个元素</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">collection</span><span style="color:#6A737D;"> 集合实例</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;E&gt;</span><span style="color:#6A737D;">        集合中元素类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 泛型类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">toObject</span><span style="color:#24292E;">(Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> collection) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理集合空指针异常</span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; coll </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(collection).</span><span style="color:#6F42C1;">orElseGet</span><span style="color:#24292E;">(ArrayList</span><span style="color:#D73A49;">::new</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 此处可以对流进行排序，然后取出第一个元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> coll.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findFirst</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="_2-序列数组" tabindex="-1">2.序列数组 <a class="header-anchor" href="#_2-序列数组" aria-label="Permalink to &quot;2.序列数组&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 方式一：生成数组</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] ints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IntStream.</span><span style="color:#B392F0;">rangeClosed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 方式二：生成集合</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(ints).</span><span style="color:#B392F0;">boxed</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 方式一：生成数组</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] ints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IntStream.</span><span style="color:#6F42C1;">rangeClosed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 方式二：生成集合</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(ints).</span><span style="color:#6F42C1;">boxed</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span></code></pre></div><h5 id="_3-列表转树" tabindex="-1">3.列表转树 <a class="header-anchor" href="#_3-列表转树" aria-label="Permalink to &quot;3.列表转树&quot;">​</a></h5><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> serialVersionUID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4548722099166963968L</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 父id（根节点为0）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer parentId;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Menu</span><span style="color:#E1E4E8;">&gt; childList;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(Integer </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, Integer </span><span style="color:#FFAB70;">parentId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.parentId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parentId;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//模拟从数据库查询出来</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Menu</span><span style="color:#E1E4E8;">&gt; menus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;子节点1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;子节点1.1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;子节点1.2&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点1.3&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点2&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点2.1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点2.2&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点2.2.1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点2.2.2&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点3&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Menu</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;根节点3.1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     );</span></span>
<span class="line"><span style="color:#E1E4E8;">     List&lt;</span><span style="color:#F97583;">Menu</span><span style="color:#E1E4E8;">&gt; collect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> menus.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(menu </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> menu.</span><span style="color:#B392F0;">getParentId</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(menu </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                 menu.</span><span style="color:#B392F0;">setChildList</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getChild</span><span style="color:#E1E4E8;">(menu, menus));</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> menu;</span></span>
<span class="line"><span style="color:#E1E4E8;">             })</span></span>
<span class="line"><span style="color:#E1E4E8;">             .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">     System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(JSON.</span><span style="color:#B392F0;">toJSON</span><span style="color:#E1E4E8;">(collect));</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Menu</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getChild</span><span style="color:#E1E4E8;">(Menu </span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">Menu</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">all</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> all.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(menu </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Objects.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(menu.</span><span style="color:#B392F0;">getParentId</span><span style="color:#E1E4E8;">(),root.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">             .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(menu </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                 menu.</span><span style="color:#B392F0;">setChildList</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getChild</span><span style="color:#E1E4E8;">(menu, all));</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> menu;</span></span>
<span class="line"><span style="color:#E1E4E8;">             }).</span><span style="color:#B392F0;">sorted</span><span style="color:#E1E4E8;">(Comparator.</span><span style="color:#B392F0;">comparing</span><span style="color:#E1E4E8;">(Menu</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getId))</span></span>
<span class="line"><span style="color:#E1E4E8;">             .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> serialVersionUID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4548722099166963968L</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer id;</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 父id（根节点为0）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer parentId;</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Menu</span><span style="color:#24292E;">&gt; childList;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, Integer </span><span style="color:#E36209;">parentId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.parentId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parentId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//模拟从数据库查询出来</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Menu</span><span style="color:#24292E;">&gt; menus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;子节点1&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;子节点1.1&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;子节点1.2&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点1.3&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点2&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点2.1&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点2.2&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点2.2.1&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点2.2.2&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点3&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Menu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;根节点3.1&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     );</span></span>
<span class="line"><span style="color:#24292E;">     List&lt;</span><span style="color:#D73A49;">Menu</span><span style="color:#24292E;">&gt; collect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> menus.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(menu </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> menu.</span><span style="color:#6F42C1;">getParentId</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(menu </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                 menu.</span><span style="color:#6F42C1;">setChildList</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getChild</span><span style="color:#24292E;">(menu, menus));</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> menu;</span></span>
<span class="line"><span style="color:#24292E;">             })</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(JSON.</span><span style="color:#6F42C1;">toJSON</span><span style="color:#24292E;">(collect));</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Menu</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getChild</span><span style="color:#24292E;">(Menu </span><span style="color:#E36209;">root</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">Menu</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">all</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> all.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(menu </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Objects.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(menu.</span><span style="color:#6F42C1;">getParentId</span><span style="color:#24292E;">(),root.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(menu </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                 menu.</span><span style="color:#6F42C1;">setChildList</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getChild</span><span style="color:#24292E;">(menu, all));</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> menu;</span></span>
<span class="line"><span style="color:#24292E;">             }).</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">(Comparator.</span><span style="color:#6F42C1;">comparing</span><span style="color:#24292E;">(Menu</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getId))</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h3 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h3><h4 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h4><blockquote><p>of(T value)</p><ul><li>通过<code>of(T value)</code>函数所构造出的Optional对象，当Value值为空时，依然会报NullPointerException。</li><li>通过<code>of(T value)</code>函数所构造出的Optional对象，当Value值不为空时，能正常构造Optional对象。</li></ul></blockquote><blockquote><p>empty()</p><p>返回EMPTY对象</p></blockquote><blockquote><p>ofNullable(T value)</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Optional</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(T value) {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Optional</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(T value) {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当value值为null时，of(T value)会报NullPointerException异常；</p><p><code>ofNullable(T value)</code>不会throw Exception，直接返回一个<code>EMPTY</code>对象。</p></blockquote><h5 id="orelse-t-other" tabindex="-1">orElse(T other) <a class="header-anchor" href="#orelse-t-other" aria-label="Permalink to &quot;orElse(T other)&quot;">​</a></h5><h5 id="orelseget-supplier-other" tabindex="-1">orElseGet(Supplier other) <a class="header-anchor" href="#orelseget-supplier-other" aria-label="Permalink to &quot;orElseGet(Supplier other)&quot;">​</a></h5><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createUser</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">orElseGet</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createUser</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">createUser</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createUser</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">orElseGet</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createUser</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">createUser</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这两个函数的区别：当user值不为null时，<code>orElse</code>函数依然会执行createUser()方法，而<code>orElseGet</code>函数并不会执行createUser()方法</p></blockquote><h5 id="orelsethrow-supplier-exceptionsupplier" tabindex="-1">orElseThrow(Supplier exceptionSupplier) <a class="header-anchor" href="#orelsethrow-supplier-exceptionsupplier" aria-label="Permalink to &quot;orElseThrow(Supplier exceptionSupplier)&quot;">​</a></h5><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">orElseThrow</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">-&gt;new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;用户不存在&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">orElseThrow</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">-&gt;new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户不存在&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>orElseThrow，就是value值为null时,直接抛异常</p></blockquote><h5 id="map-function-mapper" tabindex="-1">map(Function mapper) <a class="header-anchor" href="#map-function-mapper" aria-label="Permalink to &quot;map(Function mapper)&quot;">​</a></h5><h5 id="flatmap-function-mapper" tabindex="-1">flatMap(Function mapper) <a class="header-anchor" href="#flatmap-function-mapper" aria-label="Permalink to &quot;flatMap(Function mapper)&quot;">​</a></h5><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Optional</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">//省略....</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">U</span><span style="color:#E1E4E8;">&gt; Optional&lt;</span><span style="color:#F97583;">U</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Function&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">super</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">U</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">mapper</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">Objects.</span><span style="color:#B392F0;">requireNonNull</span><span style="color:#E1E4E8;">(mapper);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(mapper.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(value));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//省略...</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">U</span><span style="color:#E1E4E8;">&gt; Optional&lt;</span><span style="color:#F97583;">U</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(Function&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">super</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, Optional&lt;</span><span style="color:#F97583;">U</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">mapper</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">Objects.</span><span style="color:#B392F0;">requireNonNull</span><span style="color:#E1E4E8;">(mapper);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Objects.</span><span style="color:#B392F0;">requireNonNull</span><span style="color:#E1E4E8;">(mapper.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(value));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Optional</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">//省略....</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">U</span><span style="color:#24292E;">&gt; Optional&lt;</span><span style="color:#D73A49;">U</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Function&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">super</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">U</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">mapper</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">Objects.</span><span style="color:#6F42C1;">requireNonNull</span><span style="color:#24292E;">(mapper);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(mapper.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(value));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//省略...</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">U</span><span style="color:#24292E;">&gt; Optional&lt;</span><span style="color:#D73A49;">U</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(Function&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">super</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, Optional&lt;</span><span style="color:#D73A49;">U</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">mapper</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">Objects.</span><span style="color:#6F42C1;">requireNonNull</span><span style="color:#24292E;">(mapper);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Objects.</span><span style="color:#6F42C1;">requireNonNull</span><span style="color:#24292E;">(mapper.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(value));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">String city </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(u</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> u.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">String city </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(u</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> u.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">String city </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(u</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> u.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">String city </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(u</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> u.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div></blockquote><h5 id="ispresent" tabindex="-1">isPresent() <a class="header-anchor" href="#ispresent" aria-label="Permalink to &quot;isPresent()&quot;">​</a></h5><h5 id="ifpresent-consumer-consumer" tabindex="-1">ifPresent(Consumer consumer) <a class="header-anchor" href="#ifpresent-consumer-consumer" aria-label="Permalink to &quot;ifPresent(Consumer consumer)&quot;">​</a></h5><blockquote><p><code>isPresent</code>即判断value值是否为空，而<code>ifPresent</code>就是在value值不为空时，做一些操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Optional</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">//省略....</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//省略...</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">(Consumer&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">super</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">consumer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">consumer.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Optional</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">//省略....</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//省略...</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(Consumer&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">super</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">consumer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">consumer.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">(u</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">// TODO: do something</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(u</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">// TODO: do something</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div></blockquote><h5 id="filter-predicate-predicate" tabindex="-1">filter(Predicate predicate) <a class="header-anchor" href="#filter-predicate-predicate" aria-label="Permalink to &quot;filter(Predicate predicate)&quot;">​</a></h5><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Optional</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">//省略....</span></span>
<span class="line"><span style="color:#E1E4E8;">Objects.</span><span style="color:#B392F0;">requireNonNull</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">predicate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;"> (!</span><span style="color:#FFAB70;">isPresent</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">return this;</span></span>
<span class="line"><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">return predicate.test(value) ? this : </span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Optional</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">//省略....</span></span>
<span class="line"><span style="color:#24292E;">Objects.</span><span style="color:#6F42C1;">requireNonNull</span><span style="color:#24292E;">(</span><span style="color:#E36209;">predicate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">if</span><span style="color:#24292E;"> (!</span><span style="color:#E36209;">isPresent</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">return this;</span></span>
<span class="line"><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">return predicate.test(value) ? this : </span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>filter 方法接受一个 <code>Predicate</code> 来对 <code>Optional</code> 中包含的值进行过滤，如果包含的值满足条件，那么还是返回这个 Optional；否则返回 <code>Optional.empty</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; user1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(u </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> u.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(u </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> u.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span></code></pre></div></blockquote><h4 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h4><blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getCity</span><span style="color:#E1E4E8;">(User user)  throws Exception{</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(user</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(user.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">Address address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(address.</span><span style="color:#B392F0;">getCity</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> address.</span><span style="color:#B392F0;">getCity</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Excpetion</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;取值错误&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// -------------------------------------------------------------</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getCity</span><span style="color:#E1E4E8;">(User user) throws Exception{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(u</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> u.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(a</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">getCity</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">orElseThrow</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">-&gt;new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;取指错误&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getCity</span><span style="color:#24292E;">(User user)  throws Exception{</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(user</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">Address address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(address.</span><span style="color:#6F42C1;">getCity</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> address.</span><span style="color:#6F42C1;">getCity</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Excpetion</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;取值错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// -------------------------------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getCity</span><span style="color:#24292E;">(User user) throws Exception{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(u</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> u.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(a</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">getCity</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">orElseThrow</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">-&gt;new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;取指错误&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(user</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#B392F0;">dosomething</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">// -------------------------------------------------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user)</span></span>
<span class="line"><span style="color:#E1E4E8;">	.</span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">(u </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dosomething</span><span style="color:#E1E4E8;">(u));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(user</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#6F42C1;">dosomething</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">// -------------------------------------------------------------</span></span>
<span class="line"><span style="color:#24292E;">Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user)</span></span>
<span class="line"><span style="color:#24292E;">	.</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(u </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dosomething</span><span style="color:#24292E;">(u));</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(User user) throws Exception{</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(user</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(name)){</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// -------------------------------------------------------------</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(User user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(u</span><span style="color:#F97583;">-&gt;</span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(u.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">orElseGet</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">User user1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">user1.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user1;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(User user) throws Exception{</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(user</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(name)){</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// -------------------------------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(User user) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(u</span><span style="color:#D73A49;">-&gt;</span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(u.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">orElseGet</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">User user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">user1.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user1;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h3 id="新日期时间-api" tabindex="-1">新日期时间 API <a class="header-anchor" href="#新日期时间-api" aria-label="Permalink to &quot;新日期时间 API&quot;">​</a></h3><blockquote><p><code>获取当前日期</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">LocalDateTime localDateTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalDateTime.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//2021-03-21T14:37:45.208</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LocalDateTime localDateTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalDateTime.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//2021-03-21T14:37:45.208</span></span></code></pre></div><p><code>日期比较</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//compareTo 如果前一个日期小于后一个日期则返回-1，如果前一个日期等于后一个日期则返回0，如果前一个日期大于后一个日期则返回1。</span></span>
<span class="line"><span style="color:#E1E4E8;">LocalDateTime date1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalDateTime.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2021-03-21T10:15:30&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">LocalDateTime date2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalDateTime.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2021-03-20T10:15:30&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date1.</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(date2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//compareTo 如果前一个日期小于后一个日期则返回-1，如果前一个日期等于后一个日期则返回0，如果前一个日期大于后一个日期则返回1。</span></span>
<span class="line"><span style="color:#24292E;">LocalDateTime date1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalDateTime.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2021-03-21T10:15:30&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">LocalDateTime date2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalDateTime.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2021-03-20T10:15:30&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date1.</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(date2);</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//通过isBefore方法和isAfter</span></span>
<span class="line"><span style="color:#6A737D;">//对于isBefore方法，如果前一个日期小于后一个日期，则返回true，否则则返回false</span></span>
<span class="line"><span style="color:#6A737D;">//对于isAfter方法，如果前一个日期大于后一个日期，则返回true，否则则返回false</span></span>
<span class="line"><span style="color:#E1E4E8;">LocalDate a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalDate.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2021</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">LocalDate b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalDate.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2021</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.</span><span style="color:#B392F0;">isBefore</span><span style="color:#E1E4E8;">(b)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;日期A小于日期B&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//通过isBefore方法和isAfter</span></span>
<span class="line"><span style="color:#6A737D;">//对于isBefore方法，如果前一个日期小于后一个日期，则返回true，否则则返回false</span></span>
<span class="line"><span style="color:#6A737D;">//对于isAfter方法，如果前一个日期大于后一个日期，则返回true，否则则返回false</span></span>
<span class="line"><span style="color:#24292E;">LocalDate a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalDate.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2021</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">LocalDate b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalDate.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2021</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (a.</span><span style="color:#6F42C1;">isBefore</span><span style="color:#24292E;">(b)) {</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;日期A小于日期B&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>日期格式化</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">LocalDateTime localDateTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LocalDateTime.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//日期格式化(格式化到年月日)={2021-03-21}</span></span>
<span class="line"><span style="color:#E1E4E8;">String format </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> localDateTime.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(DateTimeFormatter.ISO_LOCAL_DATE);</span></span>
<span class="line"><span style="color:#6A737D;">//年月日时分秒格式化={2021-03-21T14:44:41.038}</span></span>
<span class="line"><span style="color:#E1E4E8;">String format1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> localDateTime.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(DateTimeFormatter.ISO_LOCAL_DATE_TIME);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LocalDateTime localDateTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LocalDateTime.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//日期格式化(格式化到年月日)={2021-03-21}</span></span>
<span class="line"><span style="color:#24292E;">String format </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> localDateTime.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(DateTimeFormatter.ISO_LOCAL_DATE);</span></span>
<span class="line"><span style="color:#6A737D;">//年月日时分秒格式化={2021-03-21T14:44:41.038}</span></span>
<span class="line"><span style="color:#24292E;">String format1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> localDateTime.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(DateTimeFormatter.ISO_LOCAL_DATE_TIME);</span></span></code></pre></div></blockquote><h2 id="_2、java9" tabindex="-1">2、Java9 <a class="header-anchor" href="#_2、java9" aria-label="Permalink to &quot;2、Java9&quot;">​</a></h2><h3 id="jigsaw-模块" tabindex="-1">Jigsaw 模块 <a class="header-anchor" href="#jigsaw-模块" aria-label="Permalink to &quot;Jigsaw 模块&quot;">​</a></h3><p>一个项目中的两个模块，模块之间通过module-info.java来关联</p><h3 id="接口使用私有方法" tabindex="-1">接口使用私有方法 <a class="header-anchor" href="#接口使用私有方法" aria-label="Permalink to &quot;接口使用私有方法&quot;">​</a></h3><p>Java 9 中可以在接口中定义私有方法。示例代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestInterface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 接口默认方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">defaultTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pmethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">pmethod</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;private method in interface&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestInterface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接口默认方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">defaultTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pmethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">pmethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;private method in interface&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="不可变集合" tabindex="-1">不可变集合 <a class="header-anchor" href="#不可变集合" aria-label="Permalink to &quot;不可变集合&quot;">​</a></h3><p>Java 9 中提供了新的 API 用来创建不可变集合。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> List.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Set.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Map.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KA&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;VA&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;KB&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;VB&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> List.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Set.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Map.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KA&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;VA&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;KB&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;VB&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="_3、java10" tabindex="-1">3、Java10 <a class="header-anchor" href="#_3、java10" aria-label="Permalink to &quot;3、Java10&quot;">​</a></h2><h3 id="局部类型推断-var" tabindex="-1">局部类型推断 var <a class="header-anchor" href="#局部类型推断-var" aria-label="Permalink to &quot;局部类型推断 var&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// var 关键字目前只能用于局部变量以及 for 循环变量声明中</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;aa&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(a);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// var 关键字目前只能用于局部变量以及 for 循环变量声明中</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;aa&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(a);</span></span></code></pre></div><h3 id="gc改进" tabindex="-1">GC改进 <a class="header-anchor" href="#gc改进" aria-label="Permalink to &quot;GC改进&quot;">​</a></h3><p>JDK 10中有2个JEP专门用于改进当前的垃圾收集元素。</p><p>第一个垃圾收集器接口是（JEP 304），它将引入一个纯净的垃圾收集器接口，以帮助改进不同垃圾收集器的源代码隔离。</p><p>预定用于Java 10的第二个JEP是针对G1的并行完全GC（JEP 307），其重点在于通过完全GC并行来改善G1最坏情况的等待时间。G1是Java 9中的默认GC，并且此JEP的目标是使G1平行。</p><h2 id="_4、java-11" tabindex="-1">4、Java 11 <a class="header-anchor" href="#_4、java-11" aria-label="Permalink to &quot;4、Java 11&quot;">​</a></h2><h3 id="lambda-使用-var" tabindex="-1">Lambda 使用 var <a class="header-anchor" href="#lambda-使用-var" aria-label="Permalink to &quot;Lambda 使用 var&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(var x, var y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x.</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(y)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(var x, var y) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> x.</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(y)</span></span></code></pre></div><h3 id="字符串api增强" tabindex="-1">字符串API增强 <a class="header-anchor" href="#字符串api增强" aria-label="Permalink to &quot;字符串API增强&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 判断字符串是否为空白</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot; Javastack &quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stripTrailing</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// &quot; Javastack&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot; Javastack &quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stripLeading</span><span style="color:#E1E4E8;">();   </span><span style="color:#6A737D;">// &quot;Javastack &quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 判断字符串是否为空白</span></span>
<span class="line"><span style="color:#032F62;">&quot; Javastack &quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stripTrailing</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// &quot; Javastack&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot; Javastack &quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stripLeading</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// &quot;Javastack &quot;</span></span></code></pre></div><h3 id="http-client-api标准化" tabindex="-1">HTTP Client API标准化 <a class="header-anchor" href="#http-client-api标准化" aria-label="Permalink to &quot;HTTP Client API标准化&quot;">​</a></h3><p>以前我们在程序中使用HttpClient时，通常会引入apache的HttpClient工具包。现在，我们可以使用JDK原生的 HttpClient。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String uri </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://www.oracle.com/&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        HttpClient client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HttpClient.</span><span style="color:#B392F0;">newHttpClient</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        HttpRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HttpRequest.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">uri</span><span style="color:#E1E4E8;">(URI.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(uri))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        HttpResponse&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; response </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                client.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(request, HttpResponse.BodyHandlers.</span><span style="color:#B392F0;">ofString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        String uri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://www.oracle.com/&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        HttpClient client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HttpClient.</span><span style="color:#6F42C1;">newHttpClient</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        HttpRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HttpRequest.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">uri</span><span style="color:#24292E;">(URI.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(uri))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        HttpResponse&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; response </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                client.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(request, HttpResponse.BodyHandlers.</span><span style="color:#6F42C1;">ofString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_5、java-12" tabindex="-1">5、Java 12 <a class="header-anchor" href="#_5、java-12" aria-label="Permalink to &quot;5、Java 12&quot;">​</a></h2><h3 id="switch表达式" tabindex="-1">switch表达式 <a class="header-anchor" href="#switch表达式" aria-label="Permalink to &quot;switch表达式&quot;">​</a></h3><p>Java 12 以后，switch 不仅可以作为语句，也可以作为表达式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">switchTest</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">switchTest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (i) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,94),t=[e];function c(r,E,y,i,u,F){return a(),n("div",null,t)}const h=s(o,[["render",c]]);export{g as __pageData,h as default};
