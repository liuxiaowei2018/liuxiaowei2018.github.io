import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8048b864.js";const d=JSON.parse('{"title":"Java响应式编程","description":"","frontmatter":{},"headers":[],"relativePath":"java/java响应式编程.md","filePath":"java/java响应式编程.md","lastUpdated":null}'),p={name:"java/java响应式编程.md"},o=l(`<h1 id="java响应式编程" tabindex="-1">Java响应式编程 <a class="header-anchor" href="#java响应式编程" aria-label="Permalink to &quot;Java响应式编程&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1、什么是-reactive">1、什么是 reactive ？</a><ul><li><a href="#reactive-programming">Reactive Programming</a></li><li><a href="#reactive-stream">Reactive Stream</a></li></ul></li><li><a href="#_2、reactive-应用">2、reactive 应用</a><ul><li><a href="#reactor">Reactor</a></li><li><a href="#webflux">WebFlux</a></li></ul></li></ul></nav><h2 id="_1、什么是-reactive" tabindex="-1">1、什么是 reactive ？ <a class="header-anchor" href="#_1、什么是-reactive" aria-label="Permalink to &quot;1、什么是 reactive ？&quot;">​</a></h2><h3 id="reactive-programming" tabindex="-1">Reactive Programming <a class="header-anchor" href="#reactive-programming" aria-label="Permalink to &quot;Reactive Programming&quot;">​</a></h3><blockquote><p>响应式编程（reactive programming）是一种基于数据流（data stream）和变化传递（propagationof change）的声明式（declarative）的编程范式。</p></blockquote><h4 id="变化传递-propagation-of-change" tabindex="-1">变化传递（propagation of change） <a class="header-anchor" href="#变化传递-propagation-of-change" aria-label="Permalink to &quot;变化传递（propagation of change）&quot;">​</a></h4><p>一个单元格变化之后，会像多米诺骨牌一样，导致直接和间接引用它的其他单元格均发生相应变化</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405291818282.png" alt="image-20220420123419679"></p><p>生产者只负责生成并发出数据/事件，消费者来监听并负责定义如何处理数据/事件的变化传递方式</p><h4 id="数据流-data-stream" tabindex="-1">数据流（data stream） <a class="header-anchor" href="#数据流-data-stream" aria-label="Permalink to &quot;数据流（data stream）&quot;">​</a></h4><p>数据/事件在响应式编程里会以数据流的形式发出。 小明选购商品的过程，为了既不超预算，又能省邮费，有时加有时减</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405291818622.png" alt="image-20220420123451807"></p><p>这一次一次的操作就构成了一串数据流，如果我们能够及时对数据流的每一个事件做出响应，会有效提高系统的响应水平。这是响应式的另一个核心特点：基于数据流（data stream）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Invoice</span><span style="color:#E1E4E8;">(Cart cart) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">listenOn</span><span style="color:#E1E4E8;">(cart.</span><span style="color:#B392F0;">eventStream</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Invoice</span><span style="color:#24292E;">(Cart cart) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">listenOn</span><span style="color:#24292E;">(cart.</span><span style="color:#6F42C1;">eventStream</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>cart.eventStream()是要监听的购物车的操作事件数据流，listenOn 方法能够对数据流中到来的元素依次进行处理。</p></blockquote><h4 id="声明式-declarative" tabindex="-1">声明式（declarative） <a class="header-anchor" href="#声明式-declarative" aria-label="Permalink to &quot;声明式（declarative）&quot;">​</a></h4><p>listenOn 方法：Invoice 模块中，上边的一串公式被组装成如下的伪代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listenOn</span><span style="color:#E1E4E8;">(DataStream</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">CartEvent</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> cartEventStream) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">；</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cartEventStream</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 分别计算商品金额</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(cartEvent </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> cartEvent.</span><span style="color:#B392F0;">getProduct</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPrice</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> cartEvent.</span><span style="color:#B392F0;">getQuantity</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 计算满减后的商品金额</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(v </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> (v </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">199</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (v </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> v)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将金额的变化累加到 sum</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(v </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> v; </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sum;})</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据 sum 判断是否免邮，得到最终总付款金额</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(sum </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> (sum </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (sum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    	...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listenOn</span><span style="color:#24292E;">(DataStream</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">CartEvent</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> cartEventStream) {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">；</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cartEventStream</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 分别计算商品金额</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(cartEvent </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> cartEvent.</span><span style="color:#6F42C1;">getProduct</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPrice</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> cartEvent.</span><span style="color:#6F42C1;">getQuantity</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 计算满减后的商品金额</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(v </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> (v </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">199</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (v </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">40</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> v)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将金额的变化累加到 sum</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(v </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> v; </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sum;})</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据 sum 判断是否免邮，得到最终总付款金额</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(sum </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> (sum </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (sum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    	...</span></span></code></pre></div><p>“声明式（declarative）”的编程范式。通过四个串起来的 map 调用，我们先声明好了对于数据流“将会”进行什么样的处理，当有数据流过来时，就会按照声明好的处理流程逐个进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405291819146.png" alt="image-20220420123752160"></p><p>命令式是面向过程的，声明式是面向结构的。不过命令式和声明式本身并无高低之分，只是声明式比较适合基于流的处理方式。这是响应式的第三个核心特点：声明式（declarative）。结合“变化传递”的特点，声明式能够让基于数据流的开发更加友好。</p><h3 id="reactive-stream" tabindex="-1">Reactive Stream <a class="header-anchor" href="#reactive-stream" aria-label="Permalink to &quot;Reactive Stream&quot;">​</a></h3><p>具备“异步非阻塞”特性和“流量控制”能力的数据流，我们称之为响应式流（Reactive Stream）</p><p>目前有几个实现了响应式流规范的 Java 库，这里简单介绍两个：RxJava 和 Reactor。Reactor 和 Sprig 都是同一个公司 Pivotal 旗下的项目。也是 Spring5 响应式编程的底层框架.在 Java 9 版 本 中 ， 响 应 式 流 的 规 范 被 纳 入 到 了 JDK 中 ， 相 应 的 API 接 口 是 java.util.concurrent.Flow。</p><h5 id="阻塞、非阻塞以及同步、异步" tabindex="-1">阻塞、非阻塞以及同步、异步 <a class="header-anchor" href="#阻塞、非阻塞以及同步、异步" aria-label="Permalink to &quot;阻塞、非阻塞以及同步、异步&quot;">​</a></h5><ul><li>阻塞和非阻塞反映的是调用者的状态，当调用者调用了服务提供者的方法后，如果一直在等待结果返回，否则无法执行后续的操作，那就是阻塞状态；如果调用之后直接返回，从而可以继续执行后续的操作，那可以理解为非阻塞的。</li><li>同步和异步反映的是服务提供者的能力，当调用者调用了服务提供者的方法后，如果服务提供者能够立马返回，并在处理完成后通过某种方式通知到调用者，那可以理解为异步的；否则，如果只是在处理完成后才返回，或者需要调用者再去主动查询处理是否完成，就可以理解为是同步的</li></ul><p>对于阻塞造成的性能损失，我们通常有两种思路来解决：</p><ul><li>并行化：使用更多的线程和硬件资源； <ul><li>“多线程并非银弹”，存在一些固有的弊端，但是多线程在高并发方面发挥了重要作用。况且，多线程仍然是目前主流的高并发方案。</li><li>高并发环境下，多线程的切换会消耗 CPU 资源</li><li>应对高并发环境的多线程开发相对比较难（需要掌握线程同步的原理与工具、ExecutorService、Fork/Join 框架、并发集合和原子类等的使用），并且有些问题难以发现或重现（比如指令重排）；</li><li>高并发环境下，更多的线程意味着更多的内存占用（JVM 默认为每个线程分配 1M的线程栈空间）</li></ul></li><li>异步化：基于现有的资源来提高执行效率。 <ul><li>异步非阻塞 <ul><li>回调。如 ajax 的 callback</li><li>异步的 CompletableFuture。</li></ul></li></ul></li></ul><h5 id="流量控制—回压" tabindex="-1">流量控制—回压 <a class="header-anchor" href="#流量控制—回压" aria-label="Permalink to &quot;流量控制—回压&quot;">​</a></h5><p>在响应式流中，数据流的发出者叫做 Publisher，监听者叫做 Subscriber。</p><p>订阅者需要有一种能够向上游反馈流量需求的机制：</p><p>这种能够向上游反馈流量请求的机制就叫做回压（backpressure，也叫<strong>背压</strong>）</p><p>回压的处理会涉及不同的<strong>策略</strong></p><p><strong>缓存策略</strong>：发布者会将未处理的数据元素缓存起来</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405291819108.png" alt="image-20220420124551040"></p><p><strong>丢弃策略</strong>：发布者不需要缓存来不及处理的数据，而是直接丢弃，当订阅者请求数据的时候，会拿到发布者那里最近的一个数据元素</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405291820012.png" alt="image-20220420124621173"></p><p>响应式流的两个核心特点：<strong>异步非阻塞</strong>，以及基于<strong>回压机制</strong>的流量控制。</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405291820899.png" alt="image-20220420124644277"></p><h2 id="_2、reactive-应用" tabindex="-1">2、reactive 应用 <a class="header-anchor" href="#_2、reactive-应用" aria-label="Permalink to &quot;2、reactive 应用&quot;">​</a></h2><h3 id="reactor" tabindex="-1">Reactor <a class="header-anchor" href="#reactor" aria-label="Permalink to &quot;Reactor&quot;">​</a></h3><h4 id="mono-与-flux" tabindex="-1">Mono 与 Flux <a class="header-anchor" href="#mono-与-flux" aria-label="Permalink to &quot;Mono 与 Flux&quot;">​</a></h4><h5 id="数据流三种信号" tabindex="-1">数据流三种信号 <a class="header-anchor" href="#数据流三种信号" aria-label="Permalink to &quot;数据流三种信号&quot;">​</a></h5><p>Reactor 中的发布者（Publisher）由 Flux 和 Mono 两个类定义，Flux 和 Mono 都可以发出三种<strong>数据信号</strong>：</p><ul><li>元素值</li><li>错误信号</li><li>完成信号</li></ul><p>错误信号和完成信号都是终止信号，完成信号用于告知下游订阅者该数据流正常结束，错误信号终止数据流的同时将错误传递给下游订阅者。当消息通知产生时，订阅者中对应的方法onNext(), onComplete()和 onError()会被调用。</p><p>Flux 表示的是包含 0 到 N 个元素的异步序列。Mono 表示的是包含 0 或者 1 个元素的异步序列</p><p>下图所示就是一个 Flux 类型的数据流，黑色箭头是时间轴。它连续发出“1” - “6”共 6 个元素值，以及一个完成信号（图中⑥后边的加粗竖线来表示），完成信号告知订阅者数据流已经结束</p><p>下图所示是一个 Mono 类型的数据流，它发出一个元素值后，又发出一个完成信号</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405291820488.png" alt="image-20220420125053090"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 上两图表示为如下代码</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Flux 和 Mono 提供了多种创建数据流的方法，just 就是一种比较直接的声明数据流的方式，其参数就是数据元素。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 参考：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">[] array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">[]{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">    Flux.</span><span style="color:#B392F0;">fromArray</span><span style="color:#E1E4E8;">(array);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(array);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Flux.</span><span style="color:#B392F0;">fromIterable</span><span style="color:#E1E4E8;">(list);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Stream&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; stream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Flux.</span><span style="color:#B392F0;">fromStream</span><span style="color:#E1E4E8;">(stream);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 上两图表示为如下代码</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Flux 和 Mono 提供了多种创建数据流的方法，just 就是一种比较直接的声明数据流的方式，其参数就是数据元素。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 参考：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">[] array </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">[]{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    Flux.</span><span style="color:#6F42C1;">fromArray</span><span style="color:#24292E;">(array);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(array);</span></span>
<span class="line"><span style="color:#24292E;">    Flux.</span><span style="color:#6F42C1;">fromIterable</span><span style="color:#24292E;">(list);</span></span>
<span class="line"><span style="color:#24292E;">    Stream&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; stream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Flux.</span><span style="color:#6F42C1;">fromStream</span><span style="color:#24292E;">(stream);</span></span></code></pre></div><p>不过，这三种信号都不是一定要具备的：</p><ul><li>首先，错误信号和完成信号都是终止信号，二者不可能同时共存；</li><li>如果没有发出任何一个元素值，而是直接发出完成/错误信号，表示这是一个空数据流；</li><li>如果没有错误信号和完成信号，那么就是一个无限数据流。</li></ul><h5 id="创建-flux、mono" tabindex="-1">创建 Flux、Mono <a class="header-anchor" href="#创建-flux、mono" aria-label="Permalink to &quot;创建 Flux、Mono&quot;">​</a></h5><p><strong>Flux 类的静态方法</strong></p><ul><li>just()：可以指定序列中包含的全部元素。创建出来的 Flux 序列在发布这些元素之后会自动结束。</li><li>fromArray()，fromIterable()和 fromStream()：可以从一个数组、Iterable 对象或 Stream 对象中创建 Flux 对象。</li><li>empty()：创建一个不包含任何元素，只发布结束消息的序列。</li><li>error(Throwable error)：创建一个只包含错误消息的序列。</li><li>never()：创建一个不包含任何消息通知的序列。</li><li>range(int start, int count)：创建包含从 start 起始的 count 个数量的 Integer 对象的序列。</li><li>interval(Duration period)和 interval(Duration delay, Duration period)：创建一个包含了从0 开始递增的 Long 对象的序列。其中包含的元素按照指定的间隔来发布。除了间隔时间之外，还可以指定起始元素发布之前的延迟时间。</li><li>intervalMillis(long period)和 intervalMillis(long delay, long period)：与 interval()方法的作用相同，只不过该方法通过毫秒数来指定时间间隔和延迟时间</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">fromArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">[] {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">interval</span><span style="color:#E1E4E8;">(Duration.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, ChronoUnit.SECONDS)).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">intervalMillis</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">fromArray</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">[] {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">interval</span><span style="color:#24292E;">(Duration.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, ChronoUnit.SECONDS)).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">intervalMillis</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p><strong>generate() 或 create()</strong></p><p>generate() 序列的产生是通过调用所提供的 SynchronousSink 对象的 next()，complete()和error(Throwable)方法来完成的。 generate() 只提供序列中单个消息的产生逻辑(同步通知)，其中的 sink.next()最多只能调用一次</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(sink </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sink.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    sink.</span><span style="color:#B392F0;">complete</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Random random </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(ArrayList</span><span style="color:#F97583;">::new</span><span style="color:#E1E4E8;">, (list, sink) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> random.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    sink.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (list.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        sink.</span><span style="color:#B392F0;">complete</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list;</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(sink </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sink.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    sink.</span><span style="color:#6F42C1;">complete</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Random random </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(ArrayList</span><span style="color:#D73A49;">::new</span><span style="color:#24292E;">, (list, sink) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> random.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    sink.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (list.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        sink.</span><span style="color:#6F42C1;">complete</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list;</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>create()方法与 generate()方法的不同之处在于所使用的是 FluxSink 对象。FluxSink 支持同步和异步的消息产生，并且可以在一次调用中产生多个元素。generate 的 next 只能调用一次</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(sink </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        sink.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    sink.</span><span style="color:#B392F0;">complete</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(sink </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        sink.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    sink.</span><span style="color:#6F42C1;">complete</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p><strong>创建 Mono</strong></p><p>Mono 的创建方式与 Flux 是很相似的。 除了 Flux 所拥有的构造方式之外，还可以支持与Callable、Runnable、Supplier 等接口集成</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 只有完成信号的空数据流</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Mono.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Mono.</span><span style="color:#B392F0;">justOrEmpty</span><span style="color:#E1E4E8;">(Optional.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 只有错误信号的数据流</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some error&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">Mono.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some error&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 只有完成信号的空数据流</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Mono.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Mono.</span><span style="color:#6F42C1;">justOrEmpty</span><span style="color:#24292E;">(Optional.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 只有错误信号的数据流</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some error&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">Mono.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some error&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><blockquote><p>空的数据流有什么用？举个例子，当我们从响应式的 DB 中获取结果的时候，就有可能为空：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Mono</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> id);</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Mono</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> id);</span></span>
<span class="line"><span style="color:#24292E;">Flux</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span></code></pre></div><p>无论是空还是发生异常，都需要通过完成/错误信号告知订阅者，已经查询完毕，但是抱歉没有得到值。</p></blockquote><h4 id="subscribe" tabindex="-1">subscribe <a class="header-anchor" href="#subscribe" aria-label="Permalink to &quot;subscribe&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 订阅并触发数据流</span></span>
<span class="line"><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 订阅并指定对正常数据元素如何处理</span></span>
<span class="line"><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> consumer);</span></span>
<span class="line"><span style="color:#6A737D;">// 订阅并定义对正常数据元素和错误信号的处理</span></span>
<span class="line"><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> consumer, Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> errorConsumer);</span></span>
<span class="line"><span style="color:#6A737D;">// 订阅并定义对正常数据元素、错误信号和完成信号的处理</span></span>
<span class="line"><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> consumer, Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> errorConsumer, Runnable completeConsumer);</span></span>
<span class="line"><span style="color:#6A737D;">// 订阅并定义对正常数据元素、错误信号和完成信号的处理，以及订阅发生时的处理逻辑</span></span>
<span class="line"><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> consumer, Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> Throwable</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> errorConsumer, Runnable completeConsumer, Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> Subscription</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> subscriptionConsumer);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 订阅并触发数据流</span></span>
<span class="line"><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 订阅并指定对正常数据元素如何处理</span></span>
<span class="line"><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> consumer);</span></span>
<span class="line"><span style="color:#6A737D;">// 订阅并定义对正常数据元素和错误信号的处理</span></span>
<span class="line"><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> consumer, Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> errorConsumer);</span></span>
<span class="line"><span style="color:#6A737D;">// 订阅并定义对正常数据元素、错误信号和完成信号的处理</span></span>
<span class="line"><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> consumer, Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> errorConsumer, Runnable completeConsumer);</span></span>
<span class="line"><span style="color:#6A737D;">// 订阅并定义对正常数据元素、错误信号和完成信号的处理，以及订阅发生时的处理逻辑</span></span>
<span class="line"><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> consumer, Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> Throwable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> errorConsumer, Runnable completeConsumer, Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> Subscription</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> subscriptionConsumer);</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println, System.err</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Completed!&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#6A737D;">//2</span></span>
<span class="line"><span style="color:#6A737D;">//3</span></span>
<span class="line"><span style="color:#6A737D;">//4</span></span>
<span class="line"><span style="color:#6A737D;">//5</span></span>
<span class="line"><span style="color:#6A737D;">//6</span></span>
<span class="line"><span style="color:#6A737D;">//Completed!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Mono.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some error&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println,System.err</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Completed!&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">//java.lang.Exception: some error</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println, System.err</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Completed!&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#6A737D;">//2</span></span>
<span class="line"><span style="color:#6A737D;">//3</span></span>
<span class="line"><span style="color:#6A737D;">//4</span></span>
<span class="line"><span style="color:#6A737D;">//5</span></span>
<span class="line"><span style="color:#6A737D;">//6</span></span>
<span class="line"><span style="color:#6A737D;">//Completed!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Mono.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some error&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println,System.err</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Completed!&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//java.lang.Exception: some error</span></span></code></pre></div><blockquote><p>Flux.just(1, 2, 3, 4, 5, 6)仅仅声明了这个数据流，此时数据元素并未发出，只有 subscribe()方法调用的时候才会触发数据流。所以，<strong>订阅前什么都不会发生。</strong></p></blockquote><h4 id="操作符" tabindex="-1">操作符 <a class="header-anchor" href="#操作符" aria-label="Permalink to &quot;操作符&quot;">​</a></h4><h5 id="map-元素映射为新元素" tabindex="-1">map - 元素映射为新元素 <a class="header-anchor" href="#map-元素映射为新元素" aria-label="Permalink to &quot;map - 元素映射为新元素&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(item</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> item</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#6A737D;">//2 4 6 8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(item</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> item</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#6A737D;">//2 4 6 8</span></span></code></pre></div><h5 id="flatmap-元素映射为流" tabindex="-1">flatMap - 元素映射为流 <a class="header-anchor" href="#flatmap-元素映射为流" aria-label="Permalink to &quot;flatMap - 元素映射为流&quot;">​</a></h5><p>flatMap 操作可以将每个数据元素转换/映射为一个流，然后将这些流合并为一个大的数据流</p><blockquote><p>流的合并是异步的，先来先到，并非是严格按照原始序列的顺序（如图蓝色和红色方块是交叉的)</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(item </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#B392F0;">fromArray</span><span style="color:#E1E4E8;">(item.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">s*&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// .doOnNext(System.out::println) //doOnNext 方法是“偷窥式”的方法，不会消费数据流</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(item </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Flux.</span><span style="color:#6F42C1;">fromArray</span><span style="color:#24292E;">(item.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s*&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// .doOnNext(System.out::println) //doOnNext 方法是“偷窥式”的方法，不会消费数据流</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><h5 id="filter-过滤" tabindex="-1">filter - 过滤 <a class="header-anchor" href="#filter-过滤" aria-label="Permalink to &quot;filter - 过滤&quot;">​</a></h5><blockquote><p>filter 操作可以对数据元素进行筛选。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println); </span><span style="color:#6A737D;">//2,4,6,8,10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println); </span><span style="color:#6A737D;">//2,4,6,8,10</span></span></code></pre></div><h5 id="zip-一对一合并" tabindex="-1">zip - 一对一合并 <a class="header-anchor" href="#zip-一对一合并" aria-label="Permalink to &quot;zip - 一对一合并&quot;">​</a></h5><blockquote><p>将多个流一对一的合并起来</p></blockquote><p>二合一：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">zip</span><span style="color:#E1E4E8;">(Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">), Flux.</span><span style="color:#B392F0;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">concatMap</span><span style="color:#E1E4E8;">(item </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(item);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Optional&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; reduce </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((a, b) </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">               Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(a.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(b.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(reduce.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println,System.err</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">zip</span><span style="color:#24292E;">(Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">), Flux.</span><span style="color:#6F42C1;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">concatMap</span><span style="color:#24292E;">(item </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; reduce </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((a, b) </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">               Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(b.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(reduce.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println,System.err</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>Reactor 中提供了非常丰富的操作符，除了以上几个常见的，还有：</p><blockquote><p>参考文档：<a href="https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#which-operator" target="_blank" rel="noreferrer">https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#which-operator</a></p></blockquote><ul><li>用于编程方式自定义生成数据流的 create 和 generate 等及其变体方法；</li><li>用于“无副作用的 peek”场景的 doOnNext、doOnError、doOncomplete、doOnSubscribe、doOnCancel 等及其变体方法；</li><li>用于数据流转换的 when、and/or、merge、concat、collect、count、repeat 等及其变体方法；</li><li>用于过滤/拣选的 take、first、last、sample、skip、limitRequest 等及其变体方法；</li><li>用于错误处理的 timeout、onErrorReturn、onErrorResume、doFinally、retryWhen 等及其变体方法；</li><li>用于分批的 window、buffer、group 等及其变体方法；</li><li>用于线程调度的 publishOn 和 subscribeOn 方法。</li></ul><h4 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//将正常消息和错误消息分别打印</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">concatWith</span><span style="color:#E1E4E8;">(Mono.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println, System.err</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当产生错误时默认返回 0</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">concatWith</span><span style="color:#E1E4E8;">(Mono.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">onErrorReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//自定义异常时的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">concatWith</span><span style="color:#E1E4E8;">(Mono.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">onErrorResume</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> IllegalStateException) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> IllegalArgumentException) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//当产生错误时重试</span></span>
<span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">concatWith</span><span style="color:#E1E4E8;">(Mono.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里的 retry(1)表示最多重试 1 次，而且重试将从订阅的位置开始重新发送流事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">retry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//将正常消息和错误消息分别打印</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">concatWith</span><span style="color:#24292E;">(Mono.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println, System.err</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当产生错误时默认返回 0</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">concatWith</span><span style="color:#24292E;">(Mono.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">onErrorReturn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//自定义异常时的处理</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">concatWith</span><span style="color:#24292E;">(Mono.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">onErrorResume</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> IllegalStateException) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> IllegalArgumentException) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//当产生错误时重试</span></span>
<span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">concatWith</span><span style="color:#24292E;">(Mono.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里的 retry(1)表示最多重试 1 次，而且重试将从订阅的位置开始重新发送流事件</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">retry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><h4 id="调度器与线程模型" tabindex="-1">调度器与线程模型 <a class="header-anchor" href="#调度器与线程模型" aria-label="Permalink to &quot;调度器与线程模型&quot;">​</a></h4><p>在 Reactor 中，对于多线程并发调度的处理变得异常简单。 在以往的多线程开发场景中，我们通常使用 Executors 工具类来创建线程池，通常有如下四种类型：</p><ul><li>newCachedThreadPool 创建一个弹性大小缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程</li><li>newFixedThreadPool 创建一个大小固定的线程池，可控制线程最大并发数，超出的线程会在队列中等待；</li><li>newScheduledThreadPool 创建一个大小固定的线程池，支持定时及周期性的任务执行；</li><li>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</li></ul><p>Reactor 提供了非常方便的调度器(Scheduler)工具方法，可以指定流的产生以及转换(计算)发布所采用的线程调度方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(sink </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sink.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    sink.</span><span style="color:#B392F0;">complete</span><span style="color:#E1E4E8;">();})</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">publishOn</span><span style="color:#E1E4E8;">(Schedulers.</span><span style="color:#B392F0;">single</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[%s] %s&quot;</span><span style="color:#E1E4E8;">, Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), x))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">publishOn</span><span style="color:#E1E4E8;">(Schedulers.</span><span style="color:#B392F0;">elastic</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[%s] %s&quot;</span><span style="color:#E1E4E8;">, Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), x))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">subscribeOn</span><span style="color:#E1E4E8;">(Schedulers.</span><span style="color:#B392F0;">parallel</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">toStream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(sink </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sink.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    sink.</span><span style="color:#6F42C1;">complete</span><span style="color:#24292E;">();})</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">publishOn</span><span style="color:#24292E;">(Schedulers.</span><span style="color:#6F42C1;">single</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[%s] %s&quot;</span><span style="color:#24292E;">, Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), x))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">publishOn</span><span style="color:#24292E;">(Schedulers.</span><span style="color:#6F42C1;">elastic</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[%s] %s&quot;</span><span style="color:#24292E;">, Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), x))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">subscribeOn</span><span style="color:#24292E;">(Schedulers.</span><span style="color:#6F42C1;">parallel</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">toStream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><blockquote><p>使用 publishOn 指定了流发布的调度器，subscribeOn 则指定的是流订阅的调度器。 首先是 parallel 调度器进行流数据的生成，接着使用一个 single 单线程调度器进行发布，此时经过第一个 map 转换为另一个 Flux 流，其中的消息叠加了当前线程的名称。最后进入的是一个 elastic弹性调度器，再次进行一次同样的 map 转换。 最终，经过多层转换后的输出如下： [elastic-2] [single-1] parallel-1</p></blockquote><h3 id="webflux" tabindex="-1">WebFlux <a class="header-anchor" href="#webflux" aria-label="Permalink to &quot;WebFlux&quot;">​</a></h3><blockquote><p><code>pom.xml</code></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-webflux&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-webflux&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><code>Controller</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloFluxController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloFluxController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>Service</code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getUsers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> random </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">) ((Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">50L</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            TimeUnit.MILLISECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(random);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">),</span><span style="color:#F97583;">new</span></span>
<span class="line"><span style="color:#E1E4E8;">                                 </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2L</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;lisi&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getUsers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> random </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">) ((Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">50L</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            TimeUnit.MILLISECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(random);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">),</span><span style="color:#D73A49;">new</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2L</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lisi&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">19</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote>`,97),e=[o];function t(r,c,E,y,i,F){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{d as __pageData,g as default};
