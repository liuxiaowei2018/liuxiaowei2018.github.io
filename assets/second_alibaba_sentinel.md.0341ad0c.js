import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8048b864.js";const p="/assets/4f9b2cf729676248782d7b6b484526b2.8dbf9ee1.png",o="/assets/image-20220105194042716.d2eace86.png",e="/assets/41.9684ef88.png",t="/assets/71.4d7580bf.png",m=JSON.parse('{"title":"Sentinel","description":"","frontmatter":{},"headers":[],"relativePath":"second/alibaba/sentinel.md","filePath":"second/alibaba/sentinel.md","lastUpdated":1682323688000}'),c={name:"second/alibaba/sentinel.md"},r=l('<h1 id="sentinel" tabindex="-1">Sentinel <a class="header-anchor" href="#sentinel" aria-label="Permalink to &quot;Sentinel&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#介绍">介绍</a></li><li><a href="#使用">使用</a></li><li><a href="#sentinel生产方案">Sentinel生产方案</a></li></ul></nav><blockquote><p>官方文档：<a href="https://github.com/alibaba/Sentinel/wiki" target="_blank" rel="noreferrer">https://github.com/alibaba/Sentinel/wiki</a></p><p>学习文档：<a href="https://www.iocoder.cn/Spring-Cloud-Alibaba/Sentinel/?self" target="_blank" rel="noreferrer">https://www.iocoder.cn/Spring-Cloud-Alibaba/Sentinel/?self</a></p></blockquote><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><img src="'+p+`" alt="主要特性"></p><h4 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h4><p>Sentinel 分为<strong>两个部分</strong>：</p><ul><li>核心库（Java 客户端）：不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）：基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul><h5 id="控制台" tabindex="-1">控制台 <a class="header-anchor" href="#控制台" aria-label="Permalink to &quot;控制台&quot;">​</a></h5><blockquote><p>地址：<a href="http://81.68.218.181:8858/" target="_blank" rel="noreferrer">http://81.68.218.181:8858/</a></p><p>账号/密码：sentinel / sentinel</p></blockquote><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h4 id="spring-cloud-alibaba-sentinel" tabindex="-1">Spring Cloud Alibaba Sentinel <a class="header-anchor" href="#spring-cloud-alibaba-sentinel" aria-label="Permalink to &quot;Spring Cloud Alibaba Sentinel&quot;">​</a></h4><h5 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h5><blockquote><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-alibaba-sentinel&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-sentinel&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;"># Sentinel 配置项，对应 SentinelProperties 配置属性类</span></span>
<span class="line"><span style="color:#85E89D;">sentinel</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 是否开启。默认为 true 开启</span></span>
<span class="line"><span style="color:#85E89D;">eager</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 是否饥饿加载。默认为 false 关闭 [默认情况下，Sentinel 是延迟初始化，在首次使用到 Sentinel 才进行初始化]</span></span>
<span class="line"><span style="color:#85E89D;">transport</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">dashboard</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">81.68.218.181:8858</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Sentinel 控制台地址</span></span>
<span class="line"><span style="color:#85E89D;">filter</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">url-patterns</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/**</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 拦截请求的地址。默认为 /*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;"># Sentinel 配置项，对应 SentinelProperties 配置属性类</span></span>
<span class="line"><span style="color:#22863A;">sentinel</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 是否开启。默认为 true 开启</span></span>
<span class="line"><span style="color:#22863A;">eager</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 是否饥饿加载。默认为 false 关闭 [默认情况下，Sentinel 是延迟初始化，在首次使用到 Sentinel 才进行初始化]</span></span>
<span class="line"><span style="color:#22863A;">transport</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">dashboard</span><span style="color:#24292E;">: </span><span style="color:#032F62;">81.68.218.181:8858</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Sentinel 控制台地址</span></span>
<span class="line"><span style="color:#22863A;">filter</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">url-patterns</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/**</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 拦截请求的地址。默认为 /*</span></span></code></pre></div></blockquote><h5 id="流量控制" tabindex="-1">流量控制 <a class="header-anchor" href="#流量控制" aria-label="Permalink to &quot;流量控制&quot;">​</a></h5><blockquote><h6 id="blockexception-处理器" tabindex="-1">BlockException 处理器 <a class="header-anchor" href="#blockexception-处理器" aria-label="Permalink to &quot;BlockException 处理器&quot;">​</a></h6><p><img src="`+o+`" alt="image-20220105194042716"></p><p>在 SentinelWebInterceptor 拦截器中，当请求满足配置的 Sentinel <em>block</em> 的条件时，Sentinel 会抛出 BlockException 异常。通过定义 <a href="https://github.com/alibaba/Sentinel/blob/master/sentinel-adapter/sentinel-spring-webmvc-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/spring/webmvc/callback/BlockExceptionHandler.java" target="_blank" rel="noreferrer">BlockExceptionHandler</a> 接口的实现类，可以实现对 BlockException 的异常处理。</p><p><code>DefaultBlockExceptionHandler </code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultBlockExceptionHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BlockExceptionHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, HttpServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, BlockException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ... 省略其它代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  PrintWriter out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getWriter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blocked by Sentinel (flow limiting)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultBlockExceptionHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BlockExceptionHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, BlockException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ... 省略其它代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  PrintWriter out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getWriter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blocked by Sentinel (flow limiting)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>CustomBlockExceptionHandler </code></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// CustomBlockExceptionHandler.java</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomBlockExceptionHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BlockExceptionHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 直接抛出 BlockException 异常，最终交给自定义的 SpringMVC 全局异常处理器 ，将 BlockException 异常处理成 JSON 字符串提示返回</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, HttpServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, BlockException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GlobalExceptionHandler.java</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ControllerAdvice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;cn.iocoder.springcloudalibaba.labx04.sentineldemo.provider&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 只处理该包下的 Controller 定义的接口</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GlobalExceptionHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ExceptionHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BlockException.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> JSONObject </span><span style="color:#B392F0;">blockExceptionHandler</span><span style="color:#E1E4E8;">(BlockException </span><span style="color:#FFAB70;">blockException</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">fluentPut</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;code&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">fluentPut</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;请求被拦截，拦截类型为 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> blockException.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// CustomBlockExceptionHandler.java</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomBlockExceptionHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BlockExceptionHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 直接抛出 BlockException 异常，最终交给自定义的 SpringMVC 全局异常处理器 ，将 BlockException 异常处理成 JSON 字符串提示返回</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, BlockException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GlobalExceptionHandler.java</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ControllerAdvice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;cn.iocoder.springcloudalibaba.labx04.sentineldemo.provider&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 只处理该包下的 Controller 定义的接口</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GlobalExceptionHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BlockException.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> JSONObject </span><span style="color:#6F42C1;">blockExceptionHandler</span><span style="color:#24292E;">(BlockException </span><span style="color:#E36209;">blockException</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">fluentPut</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;code&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">fluentPut</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;请求被拦截，拦截类型为 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> blockException.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h5 id="熔断降级" tabindex="-1">熔断降级 <a class="header-anchor" href="#熔断降级" aria-label="Permalink to &quot;熔断降级&quot;">​</a></h5><blockquote><p><strong>设计理念</strong></p><p>Sentinel 和 Hystrix 的原则是一致的: 当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。</p><p>在限制的手段上，Sentinel 和 Hystrix 采取了完全不一样的方法。</p><p>Hystrix 通过 <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#benefits-of-thread-pools" target="_blank" rel="noreferrer">线程池隔离</a> 的方式，来对依赖（在 Sentinel 的概念中对应 <em>资源</em>）进行了隔离。这样做的好处是资源和资源之间做到了最彻底的隔离。缺点是除了增加了线程切换的成本（过多的线程池导致线程数目过多），还需要预先给各个资源做线程池大小的分配。</p><p>Sentinel 对这个问题采取了两种手段：</p><p>1、通过并发线程数进行限制 和资源池隔离的方法不同，Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。这样不但没有线程切换的损耗，也不需要您预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p><p>2、通过响应时间对资源进行降级 除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p></blockquote><blockquote><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//熔断降级限流对应 DegradeException 异常</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;请求被拦截，拦截类型为 DegradeException&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1024</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//熔断降级限流对应 DegradeException 异常</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;msg&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;请求被拦截，拦截类型为 DegradeException&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1024</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h5 id="热点参数限流" tabindex="-1">热点参数限流 <a class="header-anchor" href="#热点参数限流" aria-label="Permalink to &quot;热点参数限流&quot;">​</a></h5><blockquote><p>请求方法添加了 <code>@SentinelResource</code> 注解，自定义 <code>热点</code> 资源。（通过 Spring AOP 拦截该方法的调用，实现 Sentinel 的处理逻辑）</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//热点参数对应 ParamFlowException 异常</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;请求被拦截，拦截类型为 ParamFlowException&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1024</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//热点参数对应 ParamFlowException 异常</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;msg&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;请求被拦截，拦截类型为 ParamFlowException&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1024</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h5 id="系统自适应限流" tabindex="-1">系统自适应限流 <a class="header-anchor" href="#系统自适应限流" aria-label="Permalink to &quot;系统自适应限流&quot;">​</a></h5><blockquote><p>Sentinel 同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p><p>针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求</p></blockquote><p><img src="`+e+`" alt="Sentinel 控制台 - 新增系统保护规则"></p><blockquote><p>FROM <a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81" target="_blank" rel="noreferrer">《Sentinel 官方文档 —— 系统自适应限流》</a></p><p><strong>1、Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）</p><p>系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</p><p><strong>2、CPU usage</strong>（1.5.0+ 版本）</p><p>当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</p><p><strong>3、平均 RT</strong></p><p>当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</p><p><strong>4、并发线程数</strong></p><p>当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</p><p><strong>5、入口 QPS</strong></p><p>当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</p></blockquote><blockquote><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#79B8FF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;请求被拦截，拦截类型为 SystemBlockException&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1024</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#005CC5;">&quot;msg&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;请求被拦截，拦截类型为 SystemBlockException&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1024</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h5 id="黑白名单控制" tabindex="-1">黑白名单控制 <a class="header-anchor" href="#黑白名单控制" aria-label="Permalink to &quot;黑白名单控制&quot;">​</a></h5><blockquote><p>FROM <a href="https://github.com/alibaba/Sentinel/wiki/%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E6%8E%A7%E5%88%B6" target="_blank" rel="noreferrer">《Sentinel 官方文档 —— 黑白名单控制》</a></p><p>很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源访问控制（黑白名单控制）的功能。来源访问控制根据资源的请求来源（origin）限制资源是否通过：</p><ul><li>若配置白名单则只有请求来源位于白名单内时才可通过；</li><li>若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</li></ul></blockquote><blockquote><p>源码解析：</p><p><code>sentinel-spring-webmvc-adapter.RequestOriginParser</code>：请求中解析到<strong>调用来源</strong></p><p>自定义 <code>CustomRequestOriginParser</code>实现类，解析<strong>请求头 <code>x-user-header</code></strong> 作为调用来源</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomRequestOriginParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestOriginParser</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">parseOrigin</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// &lt;X&gt; 从 Header 中，获得请求来源</span></span>
<span class="line"><span style="color:#E1E4E8;">       String origin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x-user-header&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// &lt;Y&gt; 如果为空，给一个默认的</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(origin)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           origin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> origin;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomRequestOriginParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestOriginParser</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">parseOrigin</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// &lt;X&gt; 从 Header 中，获得请求来源</span></span>
<span class="line"><span style="color:#24292E;">       String origin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x-user-header&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// &lt;Y&gt; 如果为空，给一个默认的</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(origin)) {</span></span>
<span class="line"><span style="color:#24292E;">           origin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> origin;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>tip</code>:</p><ol><li>Sentinel 黑白名单的控制，一般是服务和服务之间的调用</li><li>判断未获得请求来源的时候，设置默认为 <code>default</code>。原因是，Sentinel 提供的 <a href="https://github.com/alibaba/Sentinel/blob/master/sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/authority/AuthorityRuleChecker.java" target="_blank" rel="noreferrer">AuthorityRuleChecker</a> 在进行黑白名单控制时，如果请求来源为空，直接就通过了</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//黑白名单异常</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;请求被拦截，拦截类型为 AuthorityException&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1024</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//黑白名单异常</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;msg&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;请求被拦截，拦截类型为 AuthorityException&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1024</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h5 id="规则管理及推送" tabindex="-1">规则管理及推送 <a class="header-anchor" href="#规则管理及推送" aria-label="Permalink to &quot;规则管理及推送&quot;">​</a></h5><h6 id="原始模式" tabindex="-1">原始模式 <a class="header-anchor" href="#原始模式" aria-label="Permalink to &quot;原始模式&quot;">​</a></h6><h6 id="pull-和-push-模式" tabindex="-1">Pull 和 Push 模式 <a class="header-anchor" href="#pull-和-push-模式" aria-label="Permalink to &quot;Pull 和 Push 模式&quot;">​</a></h6><h5 id="使用-nacos-作为数据源" tabindex="-1">使用 Nacos 作为数据源 <a class="header-anchor" href="#使用-nacos-作为数据源" aria-label="Permalink to &quot;使用 Nacos 作为数据源&quot;">​</a></h5><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Sentinel 对 Nacos 作为数据源的支持 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.csp&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sentinel-datasource-nacos&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Sentinel 对 Nacos 作为数据源的支持 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.csp&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sentinel-datasource-nacos&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Sentinel 配置项，对应 SentinelProperties 配置属性类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">sentinel</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 是否开启。默认为 true 开启</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">eager</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 是否懒加载。默认为 false 关闭</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">transport</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">dashboard</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">81.68.218.181:8858</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Sentinel 控制台地址</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">filter</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">url-patterns</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/**</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 拦截请求的地址。默认为 /*</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># Sentinel 规则的数据源，是一个 Map 类型。key 为数据源名，可自定义；value 为数据源的具体配置</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">datasource</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">ds1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;"># 对应 DataSourcePropertiesConfiguration 类</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">nacos</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">server-addr</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">loalhost:8848</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Nacos 服务器地址</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">group-id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">DEFAULT_GROUP</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Nacos 分组</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">data-id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${spring.application.name}-flow-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Nacos 配置集编号</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">data-type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 数据格式</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">rule-type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">FLOW</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 规则类型</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Sentinel 配置项，对应 SentinelProperties 配置属性类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">sentinel</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 是否开启。默认为 true 开启</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">eager</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 是否懒加载。默认为 false 关闭</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">transport</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">dashboard</span><span style="color:#24292E;">: </span><span style="color:#032F62;">81.68.218.181:8858</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Sentinel 控制台地址</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">filter</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">url-patterns</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/**</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 拦截请求的地址。默认为 /*</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># Sentinel 规则的数据源，是一个 Map 类型。key 为数据源名，可自定义；value 为数据源的具体配置</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">datasource</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">ds1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;"># 对应 DataSourcePropertiesConfiguration 类</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">loalhost:8848</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Nacos 服务器地址</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">dev</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">group-id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">DEFAULT_GROUP</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Nacos 分组</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">data-id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${spring.application.name}-flow-rule</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Nacos 配置集编号</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">data-type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">json</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 数据格式</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">rule-type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">FLOW</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 规则类型</span></span></code></pre></div><blockquote><p>① <em>key</em>：为数据源名，可自定义，无特殊含义。这里我们添加了一个 <code>ds1</code>，如果胖友想要更多数据源，可以继续添加噢。</p><p>② <em>value</em>：为数据源的具体配置，对应 <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/DataSourcePropertiesConfiguration.java" target="_blank" rel="noreferrer">DataSourcePropertiesConfiguration</a> 类，可以选择 <code>file</code>、<code>nacos</code>、<code>zk</code>、<code>apollo</code>、<code>redis</code> 任一作为数据的数据源。这里我们选择 <code>nacos</code> 来接入 Nacos 作为数据源。</p><ul><li><code>rule-type</code>：数据源对应的 Sentinel 规则类型，在 <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/RuleType.java" target="_blank" rel="noreferrer">RuleType</a> 类枚举。这里我们设置了 <code>FLOW</code> 对应流量控制的规则。</li><li><code>data-type</code>：数据源的数据格式，默认为 <code>json</code>。这里我们设置了 <code>json</code>，所以稍后创建的 Nacos 配置集的数据格式要为 <code>JSON</code>。</li><li><code>server-addr</code>：Nacos 服务器地址。</li><li><code>namespace</code>：Nacos 分组。</li><li><code>data-id</code>：Nacos 配置集编号。推荐<strong>配置集编号</strong>的命名规则为 <code>\${applicationName}-\${ruleType}</code>，因此这里我们设置为 <code>demo-provider-flow-rule</code>，即 <code>demo-provider</code> 应用的流控规则。</li></ul></blockquote><blockquote><p><img src="`+t+`" alt="创建 Nacos 配置集"></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">   {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;resource&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;/demo/echo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;limitApp&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;grade&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;strategy&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;controlBehavior&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">&quot;clusterMode&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;resource&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/demo/echo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;limitApp&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;grade&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;count&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;strategy&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;controlBehavior&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#032F62;">&quot;clusterMode&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><ul><li><strong>数组</strong></li></ul><blockquote><p>FROM <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6" target="_blank" rel="noreferrer">《Sentinel 控制规则 —— 流量控制》</a></p></blockquote><ul><li><code>resource</code>：资源名，即限流规则的作用对象</li><li><code>count</code>: 限流阈值</li><li><code>grade</code>: 限流阈值类型（QPS 或并发线程数）</li><li><code>limitApp</code>: 流控针对的调用来源，若为 <code>default</code> 则不区分调用来源</li><li><code>strategy</code>: 调用关系限流策略</li><li><code>controlBehavior</code>: 流量控制效果（直接拒绝、Warm Up、匀速排队）</li></ul></blockquote><h5 id="整合-feign、resttemplate" tabindex="-1">整合 Feign、RestTemplate <a class="header-anchor" href="#整合-feign、resttemplate" aria-label="Permalink to &quot;整合 Feign、RestTemplate&quot;">​</a></h5><blockquote><p><code>Feign</code></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-alibaba-sentinel&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-openfeign&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-sentinel&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-openfeign&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">application</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo-consumer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">cloud</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#6A737D;"># Sentinel 配置项，对应 SentinelProperties 配置属性类</span></span>
<span class="line"><span style="color:#85E89D;">sentinel</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 是否开启。默认为 true 开启</span></span>
<span class="line"><span style="color:#85E89D;">eager</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 是否懒加载。默认为 false 关闭</span></span>
<span class="line"><span style="color:#85E89D;">transport</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">dashboard</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">81.68.218.181:8858</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Sentinel 控制台地址</span></span>
<span class="line"><span style="color:#85E89D;">filter</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">url-patterns</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/**</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 拦截请求的地址。默认为 /*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">8081</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">feign</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">sentinel</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 开启 Sentinel 对 Feign 的支持，默认为 false 关闭。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo-consumer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#6A737D;"># Sentinel 配置项，对应 SentinelProperties 配置属性类</span></span>
<span class="line"><span style="color:#22863A;">sentinel</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 是否开启。默认为 true 开启</span></span>
<span class="line"><span style="color:#22863A;">eager</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 是否懒加载。默认为 false 关闭</span></span>
<span class="line"><span style="color:#22863A;">transport</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">dashboard</span><span style="color:#24292E;">: </span><span style="color:#032F62;">81.68.218.181:8858</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Sentinel 控制台地址</span></span>
<span class="line"><span style="color:#22863A;">filter</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">url-patterns</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/**</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 拦截请求的地址。默认为 /*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">8081</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">feign</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">sentinel</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 开启 Sentinel 对 Feign 的支持，默认为 false 关闭。</span></span></code></pre></div><p><code>RestTemplate</code></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">resttemplate</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">sentinel</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">enabled</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 开启 Sentinel 对 Feign 的支持，默认为 true 开启。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">resttemplate</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">sentinel</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">enabled</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 开启 Sentinel 对 Feign 的支持，默认为 true 开启。</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RestTemplateConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SentinelRestTemplate</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RestTemplate </span><span style="color:#B392F0;">restTemplate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RestTemplate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RestTemplateConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SentinelRestTemplate</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RestTemplate </span><span style="color:#6F42C1;">restTemplate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RestTemplate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过 <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/annotation/SentinelRestTemplate.java" target="_blank" rel="noreferrer"><code>@SentinelRestTemplate</code></a> 注解，声明 Sentinel 对 RestTemplate 的支持。</p><p>另外，<code>@SentinelRestTemplate</code> 注解提供了 <code>blockHandler</code>、<code>blockHandlerClass</code>、<code>fallback</code>、<code>fallbackClass</code> 属性，作用和 <code>@SentinelResource</code> 注解是<strong>一致</strong>的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/consumer&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConsumerController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RestTemplate restTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/echo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> restTemplate.</span><span style="color:#B392F0;">getForObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:8080/demo/echo&quot;</span><span style="color:#E1E4E8;">, String.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/consumer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConsumerController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RestTemplate restTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/echo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> restTemplate.</span><span style="color:#6F42C1;">getForObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://127.0.0.1:8080/demo/echo&quot;</span><span style="color:#24292E;">, String.class);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h2 id="sentinel生产方案" tabindex="-1">Sentinel生产方案 <a class="header-anchor" href="#sentinel生产方案" aria-label="Permalink to &quot;Sentinel生产方案&quot;">​</a></h2><blockquote><p><a href="https://gitee.com/git_liuxiaowei/sentinel-dashboard" target="_blank" rel="noreferrer">https://gitee.com/git_liuxiaowei/sentinel-dashboard</a></p></blockquote>`,41),E=[r];function y(i,d,u,g,b,F){return n(),a("div",null,E)}const A=s(c,[["render",y]]);export{m as __pageData,A as default};
