import{_ as a,o as e,c as t,Q as o}from"./chunks/framework.8048b864.js";const i="/assets/image-20220319133458045.7fc3d431.png",r="/assets/image-20220319133621428.69b7b21a.png",l="/assets/image-20220319133720174.dd6c7a02.png",s="/assets/image-20220319133922185.8f02f0f1.png",n="/assets/image-20220319133952992.18180bcb.png",c="/assets/640-16476684267637.cfad965e.jpeg",k=JSON.parse('{"title":"数据库设计","description":"","frontmatter":{},"headers":[],"relativePath":"database/index.md","filePath":"database/index.md","lastUpdated":1697625092000}'),h={name:"database/index.md"},p=o('<h1 id="数据库设计" tabindex="-1">数据库设计 <a class="header-anchor" href="#数据库设计" aria-label="Permalink to &quot;数据库设计&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#_1、数据库设计步骤">1、数据库设计步骤</a><ul><li><a href="#需求分析阶段">需求分析阶段</a></li><li><a href="#概念设计阶段">概念设计阶段</a></li><li><a href="#逻辑设计阶段">逻辑设计阶段</a></li><li><a href="#数据库选型">数据库选型</a></li><li><a href="#物理设计阶段">物理设计阶段</a></li><li><a href="#数据库实施阶段">数据库实施阶段</a></li><li><a href="#数据库维护阶段">数据库维护阶段</a></li></ul></li></ul></nav><h2 id="_1、数据库设计步骤" tabindex="-1">1、数据库设计步骤 <a class="header-anchor" href="#_1、数据库设计步骤" aria-label="Permalink to &quot;1、数据库设计步骤&quot;">​</a></h2><p><img src="'+i+'" alt="image-20220319133458045"></p><h3 id="需求分析阶段" tabindex="-1">需求分析阶段 <a class="header-anchor" href="#需求分析阶段" aria-label="Permalink to &quot;需求分析阶段&quot;">​</a></h3><blockquote><p>要进行数据库设计首先要了解用户需求，参与到用户需求分析中去，需求分析常用SA（Structured Analysis：结构化分析方法）强调开发方法的结构合理性以及所开发软件的结构合理性的软件开发方法，是生命周期法的继承与发展，是生命周期法与结构化程序设计思想的结合。</p><p>其基本思想是用系统工程的思想和工程化得方法，根据用户至上的原则，自始自终按照结构化、模块化，自顶向下地对系统进行分析与设计。建立的主要步骤如下：</p><ol><li>首先画系统的输入输出，先画顶层数据流程图（DFD：Data Flow Diagram），顶层数据流程图只包含一个加工，用以表示被开发的系统，然后考虑该系统有哪些输入、输出数据流。</li><li>画系统内部，即画下层数据流层图。</li></ol><p><img src="'+r+'" alt="image-20220319133621428"></p></blockquote><h3 id="概念设计阶段" tabindex="-1">概念设计阶段 <a class="header-anchor" href="#概念设计阶段" aria-label="Permalink to &quot;概念设计阶段&quot;">​</a></h3><blockquote><p>概念设计是整个数据库设计的关键，它是对需求分析阶段的成果进行综合，归档以及抽象出一个独立具体的DBMS模型，与具体的RDBMS产品无关。</p><p>在实际的开发中，常用E-R（Entity-Relationship：实体关系）图来表示，常用的工具PowerDesigner，可以实现CDM（概念数据模型）-&gt;LDM（逻辑数据模型）-&gt;PDM（物理数据模型）-&gt;Database的自动转换，这个过程称为<strong>正向工程</strong>，如果有database建库脚本，也可以通过PowerDesigner工具生成CDM，即Database-&gt;PDM-&gt;LDM-&gt;CDM，称为<strong>反向工程</strong>。</p><p><img src="'+l+'" alt="image-20220319133720174"></p></blockquote><h3 id="逻辑设计阶段" tabindex="-1">逻辑设计阶段 <a class="header-anchor" href="#逻辑设计阶段" aria-label="Permalink to &quot;逻辑设计阶段&quot;">​</a></h3><blockquote><p>逻辑设计阶段是将概念数据模型转换为具体的DBMS所支持的数据模型，并将进行优化。</p><p>虽然LDM独立于DBMS的，但可以进行外键，索引，视图等对象的设计工作。</p><p>在此阶段，各子模块的E-R图之间的冲突主要有三类：属性冲突，命名冲突和结构冲突，同时E-R图向关系模型的转换，要解决如何将实体性和实体间的联系转换为关系模式，确定这些关系模式的属性和码，实际开发中，逻辑设计阶段不是必须的，有些是从CDM直接到PDM了。</p></blockquote><h3 id="数据库选型" tabindex="-1">数据库选型 <a class="header-anchor" href="#数据库选型" aria-label="Permalink to &quot;数据库选型&quot;">​</a></h3><blockquote><p>数据库选型是非常重要的环节，一般在需求分析完成之后，通过架构评审会进行确认，数据库方面主要包括数据存储，检索，安全，读写分离，分库分表，数据归档，接入数据仓库都要进行确认，根据业务的场景对相关的数据库产品进行调研比对，选择最适合业务场景的数据库作为存储。</p></blockquote><h3 id="物理设计阶段" tabindex="-1">物理设计阶段 <a class="header-anchor" href="#物理设计阶段" aria-label="Permalink to &quot;物理设计阶段&quot;">​</a></h3><blockquote><p>逻辑设计阶段和数据库选型完成之后，就可以通过LDM生成PDM了，在物理设计阶段，需要设计跟RDBMS相关的对象，例如设计存储过程，触发器，用户自定义函数，表空间等。</p><p><img src="'+s+'" alt="image-20220319133922185"></p></blockquote><h3 id="数据库实施阶段" tabindex="-1">数据库实施阶段 <a class="header-anchor" href="#数据库实施阶段" aria-label="Permalink to &quot;数据库实施阶段&quot;">​</a></h3><blockquote><p>例如选择的是sql数据库，通过PDM生成数据库的建库脚本之后，需要进行规范性检查，通过之后就可以创建表结构，规范性检查可以借助开源的SQL审核工具，如Yearning，Archery都可以设置规则，检查之后会给出整改建议，能够帮我们自动实现SQL Review。Yearning是用go开发，目前只支持sql数据库，Archery可以支持多种数据库。</p><p><img src="'+n+'" alt="image-20220319133952992"></p></blockquote><h3 id="数据库维护阶段" tabindex="-1">数据库维护阶段 <a class="header-anchor" href="#数据库维护阶段" aria-label="Permalink to &quot;数据库维护阶段&quot;">​</a></h3><blockquote><p>数据库维护阶段主要包括业务支撑和数据库运维</p><p><img src="'+c+'" alt="图片"></p></blockquote>',18),d=[p];function b(u,_,m,g,q,f){return e(),t("div",null,d)}const P=a(h,[["render",b]]);export{k as __pageData,P as default};
