import{_ as s,c as a,o as n,N as l}from"./chunks/framework.0799945b.js";const p="/assets/image-20221019153148106.d16e7e65.png",o="/assets/image-20221019153649514.70aad933.png",e="/assets/image-20221019153826780.f261e485.png",t="/assets/image-20221019154048043.b9fffb2c.png",r="/assets/image-20221019154302027.c272a981.png",c="/assets/image-20221019154547309.ad94ac61.png",D="/assets/image-20221019155153770.fb593977.png",y="/assets/image-20221019162418879.6f6bf18b.png",C="/assets/image-20221019162619484.dc7d1497.png",A="/assets/image-20221019162725470.f89c9837.png",F="/assets/image-20221019162917676.d7b767bf.png",i="/assets/image-20221019162937210.e75b2dee.png",m="/assets/image-20221019162949178.29d98082.png",d="/assets/image-20221019163015005.98841cac.png",g="/assets/image-20221019163026987.837c1315.png",h="/assets/image-20221019163039740.51959bac.png",u="/assets/image-20221019163126844.c958e4be.png",E="/assets/image-20221019163154492.dbb93d92.png",b="/assets/image-20221019163239548.2840dbfd.png",_="/assets/image-20221019163249914.01a4c579.png",f="/assets/image-20221019163303197.bd8e60ec.png",k="/assets/image-20221019163326315.755c4bae.png",q="/assets/image-20221019163432364.1248dd4e.png",N="/assets/image-20221020190541112.f44f8aac.png",P="/assets/image-20221020190623645.d6bd64e1.png",x="/assets/image-20221020190816604.77b606bc.png",v="/assets/image-20221020191713998.47185ed5.png",T="/assets/image-20221020191757661.360537a6.png",I="/assets/image-20221020191852399.6f5a4ae8.png",L="/assets/image-20221020191920127.bdfa47d4.png",R="/assets/image-20221020191954005.8f03110e.png",S="/assets/image-20221020192317199.3c9e7e53.png",M="/assets/image-20221020192504447.b6310f0d.png",U="/assets/image-20221020192520539.b5c9a067.png",O="/assets/image-20221020192553296.9af58d1d.png",w="/assets/image-20221020192833344.d0c7506b.png",Q=JSON.parse('{"title":"如何设计一个秒杀系统","description":"","frontmatter":{},"headers":[],"relativePath":"book0003/如何设计一个秒杀系统-许令波.md"}'),B={name:"book0003/如何设计一个秒杀系统-许令波.md"},H=l('<h1 id="如何设计一个秒杀系统" tabindex="-1">如何设计一个秒杀系统 <a class="header-anchor" href="#如何设计一个秒杀系统" aria-label="Permalink to &quot;如何设计一个秒杀系统&quot;">​</a></h1><blockquote><p><a href="https://github.com/sanyecao-seckill" target="_blank" rel="noreferrer">https://github.com/sanyecao-seckill</a></p></blockquote><h2 id="秒杀怎么玩" tabindex="-1">秒杀怎么玩 <a class="header-anchor" href="#秒杀怎么玩" aria-label="Permalink to &quot;秒杀怎么玩&quot;">​</a></h2><p>通常情况下，平台商家会拿出稀缺商品，事先在秒杀的运营系统中设置好活动的开始、结束时间，以及投入的库存（简单的玩法，只要这几个主要元素即可）。在活动开始之后，用户可以通过活动抢购入口（一个商品详情页，或是一个广告链接），进入到活动的结算页，然后点击下单，完成商品的抢购操作，整个过程如下：</p><p><img src="'+p+'" alt="image-20221019153148106"></p><p>如果想对流量有个预期上限，方便做备战工作，那么你可以加上预约功能，即在活动开始前，先开放一段时间的预约，让用户先去进行预约，然后才能获得参加抢购活动的资格。</p><p>如果面对的业务场景复杂些，你还可以联合风控，在参加活动时校验用户资质，踢掉黄牛以及有过不良行为的人，尽量将资源给到优质用户。</p><p>如果业务再复杂些呢？可以搭配限购开展活动，控制个人维度下一段时间内的购买数，让抢购成功的快乐触达更多的人。</p><h2 id="秒杀系统的挑战" tabindex="-1">秒杀系统的挑战 <a class="header-anchor" href="#秒杀系统的挑战" aria-label="Permalink to &quot;秒杀系统的挑战&quot;">​</a></h2><h4 id="巨大的瞬时流量" tabindex="-1">巨大的瞬时流量 <a class="header-anchor" href="#巨大的瞬时流量" aria-label="Permalink to &quot;巨大的瞬时流量&quot;">​</a></h4><p>这种场景下，高并发产生的巨大瞬时流量，首先会击垮你服务的“大门”，当“大门”被击垮后，外面的进不来，里面的出不去，进而造成了整个服务的瘫痪；退一步说，即便你保住了大门，进来的流量如果不加以管控，任凭其横冲直撞，也会对依赖的基础设施服务造成毁灭性打击；再退一步说，即使我们的系统没有被摧毁，在机器资源的高负载下，整个请求链路的响应时间也会跟着拉长，这样就会大大降低用户的抢购体验，紧接着就会是蜂拥而来的客诉</p><h4 id="热点数据问题" tabindex="-1">热点数据问题 <a class="header-anchor" href="#热点数据问题" aria-label="Permalink to &quot;热点数据问题&quot;">​</a></h4><p>对于秒杀活动，大家抢购的都是同一个商品，所以这个商品直接就被推到了热点的位置，不管你是用的数据库，还是分布式缓存，都无法支持几十万、上百万对同一个 key 的读写，以 Redis 的写为例，最高仅可支持几万的 TPS。像商品库存的控制，就会有这个问题。</p><h4 id="刷子流量" tabindex="-1">刷子流量 <a class="header-anchor" href="#刷子流量" aria-label="Permalink to &quot;刷子流量&quot;">​</a></h4><p>一般我们提供的秒杀对外服务，都是 HTTP 的服务。不管你是用 H5 实现的页面，还是通过安卓或是 iOS 实现的原生页面，特别是 H5，都可以直接通过浏览器或是抓包工具拿到请求数据，这样刷子便可以自己通过程序实现接口的直接调用，并可以设置请求的频率。</p><p>这样高频次的请求，会挤占正常用户的抢购通道，同时，刷子也获得了更高的秒杀成功率。这不仅破坏了公平的抢购环境，也给系统服务带来了巨大的额外负担。其实总结来说，瞬时的大流量就是最大的挑战，当业务系统流量成几何增长时，有些业务接口加机器便可以支持。但考虑到成本与收益，在有限的资源下，如何通过合理的系统设计来达到预期的业务目标，就显得格外重要了。</p><h2 id="秒杀系统如何设计" tabindex="-1">秒杀系统如何设计 <a class="header-anchor" href="#秒杀系统如何设计" aria-label="Permalink to &quot;秒杀系统如何设计&quot;">​</a></h2><p>一次 HTTP 请求所经过的链路路径:</p><p><img src="'+o+'" alt="image-20221019153649514"></p><p>DNS：负责域名解析，会将你的域名请求指定一个实际的 IP 来处理（事先配置好处理请求的 IP，DNS 按顺序指定），并且一般客户端浏览器会缓存这个 IP 一段时间，当下次再请求时就直接用这个 IP 来建立连接，当然如果指定的 IP 挂了，DNS 并不会自动剔除，下次依然会使用它。</p><p>Nginx：也就是上面的被 DNS 指定来处理请求的 IP，一般都会被用来当做反向代理和负载均衡器使用，因为它具有良好的吞吐性能，所以一般也可以用来做静态资源服务器。当 Nginx 接收到客户端请求后，根据负载均衡算法（默认是轮询）将请求分发给下游的 Web 服务。</p><p>Web 服务：这个就是我们都比较熟知的领域了，一般我们写业务接口的地方就是这了，还有我们的 H5 页面，也都可以放到这里，这里是我们做业务聚合的地方，提供页面需要的数据以及元素。</p><p>RPC 服务：一般提供支撑业务的基础服务，服务功能相对单一，可灵活、快速部署，复用性高。RPC 服务一般都是公司内部服务，仅供内部服务间调用，不对外开放，安全性高。</p><p><img src="'+e+'" alt="image-20221019153826780"></p><p>结合上图来看，商详页部分和支付页部分，对于一般平台来说，都是通用板块，而从“点击抢购”开始到“下单成功待支付”，这一段是属于秒杀系统的业务范畴，在这里我们梳理下，有哪几件事情是需要秒杀系统来做的。</p><ol><li>提供活动数据：提供参加秒杀活动的商品信息，主要用于商详页判断活动的倒计时、开始、结束等页面展示和抢购入口校验。</li><li>提供结算页：如果把秒杀做成一个单独业务模块，可跨平台（安卓、PC、iOS）嵌入，那么就需要提供一整套服务，包括 H5 页面，主要用于展示商品的抢购信息，包括商品名称、价格、抢购数量、地址、支付方式、虚拟资产等等。</li><li>提供结算页页面渲染所需数据：包括用户维度的地址、虚拟资产等数据，活动维度的名称、价格等数据。</li><li>提供下单：用户结算页下单，提供订单生成或是将下单数据透传给下游（如果平台有通用的订单接入接口）。</li></ol><p>在这中间，还有个隐形的，但却是非常重要的核心能力，那就是做流量的精细化筛选，尽量确保传给下游接口的流量，都是优质请求。</p><p>对于系统的设计，有一些基本的原则，比如校验前置、分层过滤，再结合我们上面的链路路径图，效果如下所示：</p><p><img src="'+t+'" alt="image-20221019154048043"></p><p>一般我们会在 DNS 层做一些和网络相关的防攻击措施，公司的网络安全部门有统一的一些配置措施，这层我们无法写业务，但是可以拦截一些攻击请求。</p><p>接下来到 Nginx 层。Nginx 不仅可以作为反向代理和负载均衡器，也可以做大流量的 Web 服务器，同时也是一款非常优秀的静态资源服务器。如果把业务校验也放到这里来，就可以实现校验前置的原则了吗？Nginx+Lua 说，没问题。这时候可能你会有顾虑，Nginx 担负了那么多任务，会被拖垮吗？不会，因为 Nginx 很强大</p><p>接下来就到了 Web 服务了。我们在这里做业务的聚合，提供结算页页面渲染所需要的数据以及下单数据透传，同时也负责流量的筛选与控制，保证下游系统的安全。</p><p>最后就是 RPC 服务。它提供基础服务，一般经过上面 3 层的严格把关，到这里的请求，量已经小很多了，我们写业务逻辑，在技术上也有更多的发挥空间。</p><h2 id="传统秒杀系统架构" tabindex="-1">传统秒杀系统架构 <a class="header-anchor" href="#传统秒杀系统架构" aria-label="Permalink to &quot;传统秒杀系统架构&quot;">​</a></h2><p><img src="'+r+'" alt="image-20221019154302027"></p><p>这种功能结构以及系统架构，是我们非常熟悉的。在这种方式下，Nginx 只做反向代理和负载均衡，甚至这层对我们做业务开发的研发人员来说，都是无感知的，一般运维同事在做生产环境搭建时，都会帮我们配好。研发人员更多的是在开发 Web 服务和 RPC 服务，我们把页面以及页面所依赖的静态资源都放到 Web 服务中，同时 Web 服务还提供业务接口，RPC 服务提供一些支撑服务。如果这是个 ToB 的运营管理系统，这样没有什么问题，因为请求量非常低，系统基本不会有太大的负载。但是对于 ToC，且瞬时流量非常大的情况，问题就会暴露出来，那它究竟会有哪些问题呢？</p><h4 id="域名与带宽问题" tabindex="-1">域名与带宽问题 <a class="header-anchor" href="#域名与带宽问题" aria-label="Permalink to &quot;域名与带宽问题&quot;">​</a></h4><p>我们从最基础的讲起。如果 Web 服务既提供 H5 页面、静态资源，同时也提供业务接口，这就意味着所有的请求使用的都是同一个域名，在活动刚开始时，大家都点击抢购按钮进结算页，而结算页页面拉取静态资源，会占用很多带宽资源。这在活动开始的瞬间，带宽资源很稀缺的情况下，可能会出现用户进不了结算页，或者进了结算页却不能正常渲染页面的问题，导致抢购体验大幅下降。</p><h4 id="web-服务器性能问题" tabindex="-1">Web 服务器性能问题 <a class="header-anchor" href="#web-服务器性能问题" aria-label="Permalink to &quot;Web 服务器性能问题&quot;">​</a></h4><p>一般部署 Web 服务，都是使用 Apache 的 Tomcat 来部署的，Tomcat 在处理请求的时候，是通过线程去处理的。这样的问题就是如果瞬时的大量请求过来，线程池中的线程不够用，Tomcat 就会瞬间新建很多线程，直至达到配置的最大线程数，如果线程数设置的过大，这个过程可能会直接将机器的 CPU 打满，导致机器死掉。即使没有挂掉，在高负载下，当设置的等待队列也满了之后，后面的请求都会被拒绝连接，直到有空出的资源去处理新请求。这时候你可能会想，我加机器分摊流量不就行了？可以是可以，但由此增加的活动成本不知道你的老板会不会买单？</p><p>当然了，这个过程中，还会伴有热点数据读写、库存超卖等问题</p><h2 id="新的秒杀系统架构" tabindex="-1">新的秒杀系统架构 <a class="header-anchor" href="#新的秒杀系统架构" aria-label="Permalink to &quot;新的秒杀系统架构&quot;">​</a></h2><p><img src="'+c+'" alt="image-20221019154547309"></p><p>将原先由 Web 服务提供的静态资源放到了 CDN（CDN 是全国都有的服务器，客户端可以根据所处位置自动就近从 CDN 上拉取静态资源，速度更快），来大大减轻抢购瞬时秒杀域名的负担。</p><p>将 Nginx 的职责放大，前置用来做 Web 网关，承担部分业务逻辑校验，并且增加黑白名单、限流和流控的功能，这其实也是考虑到我们的秒杀业务特点所做的调整。这种在 Nginx 里写业务的做法在很多大公司里都是很常见的，像京东是用来做商详、秒杀的业务网关，美团用来做负载均衡接入层，12306 用来做车票查询等等，他们的共同特点都是要面对高并发的业务场景，这也说明在这种业务场景下，我们的设计是得到了真实实践和广泛认可的。</p><p>充分利用 Nginx 的高并发、高吞吐能力，并且非常契合我们秒杀业务的特点，即入口流量大。但流量组成却非常的混杂，这些请求中，一部分是刷子请求，一部分是无效请求（传参等异常），剩下的才是正常请求，这个的比例可能是 6：1：3，所以需要我们在网关层尽可能多地接收流量进来，并做精确地筛选，将真正有效的 3 成请求分发到下游，剩余的 7 成拦截在网关层。不然把这些流量都打到 Web 服务层，Web 服务再新起线程来处理刷子和无效请求，这是种资源的浪费。</p><h4 id="nginx-openresty" tabindex="-1">Nginx+OpenResty <a class="header-anchor" href="#nginx-openresty" aria-label="Permalink to &quot;Nginx+OpenResty&quot;">​</a></h4><h4 id="web-rpc-服务技术选型" tabindex="-1">Web/RPC 服务技术选型 <a class="header-anchor" href="#web-rpc-服务技术选型" aria-label="Permalink to &quot;Web/RPC 服务技术选型&quot;">​</a></h4><h2 id="开发一个最简的秒杀系统" tabindex="-1">开发一个最简的秒杀系统 <a class="header-anchor" href="#开发一个最简的秒杀系统" aria-label="Permalink to &quot;开发一个最简的秒杀系统&quot;">​</a></h2><p>要实现秒杀业务，我们最少需要 3 个系统服务：</p><p>一个是 Nginx 服务，我们命名为 demo-nginx；</p><p>再一个是 Web 服务，我们称其为 demo-web；</p><p>最后一个是 RPC 服务，我们就叫它 demo-support。</p><p><img src="'+D+'" alt="image-20221019155153770"></p><p>首先是 demo-nginx，主要负责：</p><p>流量筛选：根据黑白名单、登录态和参数有效性等来筛选流量。</p><p>流量分发：通过设置的负载均衡算法进行流量分发，也可以自定义算法，比如根据 IP 做 hash，或者根据用户 ID 做 hash 等。</p><p>简单业务以及校验：提供活动数据、活动有效性校验、库存数量校验和其他业务相关的简单校验等。</p><p>限流：根据 IP 或者自定义关键入参做限流。</p><p>异常提示页面：主要是进结算页失败的提示页，可能是被限流，被业务校验拦截或者是后端服务异常等。</p><p>其次是 demo-web，主要负责：</p><p>提供结算页 H5。提供结算页的 HTML，或者是重定向到 CDN 上的结算页 H5 地址。这里你肯定要问，为什么不把这个功能前置到 Nginx 服务，那样不是可以更快地返回吗？</p><p>这里主要考虑到一个上线灰度发布的问题。你有没有想过，如果秒杀上线后，在后续的需求版本迭代中，我们页面新增了一个功能，该功能需要调用一个新的接口，我们该如何制定发布计划，来确保上线的安全以及不影响线上用户的使用体验呢？我们可以选择全量上线，但这么做的后果就是一旦出现我们测试未覆盖到的业务场景而引发了线上事故，那么就会影响到全部的用户，这对我们来说是不可接受的，所以上线还得采取灰度发布的方式。</p><p>业务聚合接口：提供结算页 H5 渲染页面所需数据，以及提供用户行为操作所需接口，比如下单等。</p><p>其他功能：部分关键接口的限流，以保证下游接口的安全。</p><p>最后是 demo-support，主要负责：</p><p>提供基础服务、数据的支持，包括活动数据、商品数据、用户维度数据、提单等，主要模拟基础服务，正常情况下，应该是按业务模块做细致划分的，如下图所示：</p><h2 id="秒杀业务流程梳理" tabindex="-1">秒杀业务流程梳理 <a class="header-anchor" href="#秒杀业务流程梳理" aria-label="Permalink to &quot;秒杀业务流程梳理&quot;">​</a></h2><p>一场完整的秒杀活动的大概流程是这样的:</p><ol><li>运营人员在秒杀系统的运营后台，根据指定商品，创建秒杀活动，指定活动的开始时间、结束时间、活动库存等。</li><li>活动开始之前，由秒杀系统运营后台 worker，将活动商品的标识更改为秒杀标识</li><li>用户进入到商详页面时，系统会判断当前商品标识，如果是秒杀标识，则去查询当前商品的秒杀活动数据，判断是否正式开始，即通过商品标识 + 活动时间来判断活动是否真正开始。如果活动时间还没有到，页面可以是禁售展示，也可以是倒计时展示，或者是按正常价格售卖，这个可以按实际业务需求来定</li><li>当活动已经开始，用户进入商详页，可以看到立即抢购的按钮，这里我们可以通过增加一些逻辑判断来限制按钮是否可以点击，比如是否设置了抢购用户等级限制，是否还有活动库存，是否设置了预约等等。如果都没限制，用户可以点击抢购按钮，进入到秒杀结算页</li><li>在结算页，用户可更改购买数量，切换地址、支付方式等，这里的结算元素也需要按实际业务来定，更复杂的场景还可以支持积分、优惠券、红包、配送时效等，并且这些都会影响最终价格的计算</li><li>确认无误后，用户提交订单，在这里后端服务可以调用风控、限购等接口，来完善校验，都通过之后，完成库存的扣减和订单的生成。如果结算页支持了第 5 步中提到的一些虚拟资产，则还需要做对应的抵扣</li><li>订单完成后，根据用户选择的支付方式跳转到对应的页面，比如在线支付就跳转到收银台，货到付款的话，就跳到下单成功提示页</li></ol><p>整个时序图如下：</p><p><img src="'+y+'" alt="image-20221019162418879"></p><p>系统提供接口梳理:</p><ol><li>活动数据查询接口：查询活动相关信息，包括开始、结束时间等。</li><li>进结算页页面（H5）接口：结算页 H5，并通过 Ajax 异步加载结算页数据</li><li>结算页页面初始化渲染所需数据的接口：大体包括活动信息、商品信息、结算信息（用户的地址、虚拟资产、价格等等）</li><li>结算页页面用户行为操作接口：支持地址列表查看和选择，虚拟资产的查看和使用等等，并在操作后更新页面价格相关信息</li><li>结算页提交订单接口：支持秒杀活动商品下单</li></ol><p>当然这是秒杀网关系统所需要提供的接口，但是要完整地实现整个秒杀功能，我们还得需要以下功能。而这些个功能点，不需要做到秒杀的主流程系统里，一般都有秒杀的运营系统来提供相应能力，简列如下：</p><ol><li>秒杀活动的创建：创建秒杀活动，主要要素包括活动名称、参加活动的商品、活动库存、活动单次限购数量、活动开始时间、活动结束时间。</li><li>秒杀活动的查看：查看活动信息、活动状态等。</li><li>秒杀活动的开始：一般活动都是提前创建，并在活动即将开始之前几分钟，自动更改活动商品标识，这样商详页就能区分出当前商品是普通商品还是秒杀商品了，然后执行不同的业务分支逻辑。</li><li>秒杀活动的结束：活动时间到期或者运营人员手动关闭，并将活动商品的秒杀标识去掉</li></ol><p><img src="'+C+'" alt="image-20221019162619484"></p><h2 id="秒杀业务的实现" tabindex="-1">秒杀业务的实现 <a class="header-anchor" href="#秒杀业务的实现" aria-label="Permalink to &quot;秒杀业务的实现&quot;">​</a></h2><p>demo-nginx将对应的接口 URL 匹配，配置到 domain.com 里即可，实现对应接口请求的接收和分发，修改后文件内容如下：</p><p><img src="'+A+'" alt="image-20221019162725470"></p><p>这里结算页用户行为操作的接口，可能是一个或是多个，如果没有特别的处理，可以配置一个模糊匹配，并直接打到后端服务，不需要做额外处理。（其中 ~* 表示启用正则匹配，同时忽略字母大小写，如果遇到请求静态资源不到的情况，也可以参照此方式配置）</p><h4 id="第一步" tabindex="-1">第一步 <a class="header-anchor" href="#第一步" aria-label="Permalink to &quot;第一步&quot;">​</a></h4><p>我们先在数据库商品表中初始化一条商品信息，用来模拟参加秒杀活动。然后再通过商品信息查询接口，在浏览器页面查看商品的信息（根据商品编号查询），这是个后台功能，主要是看下商品的基本信息，比如名称、价格、商品标识，特别是商品标识在参加秒杀活动前后的一个变化。这里为了方便，我把入口放在了 demo-web 服务，我们通过 demo-web 的端口号，访问对应的 URL 即可，如下图所示：</p><p><img src="'+F+'" alt="image-20221019162917676"></p><h4 id="第二步" tabindex="-1">第二步 <a class="header-anchor" href="#第二步" aria-label="Permalink to &quot;第二步&quot;">​</a></h4><p>用第一步的商品，创建一个秒杀活动。这个功能正常是放在运营系统里的，通过页面来进行秒杀活动的管理，这里为了方便教学，就直接调用秒杀活动创建接口，来完成秒杀活动的创建，效果如下：</p><p><img src="'+i+'" alt="image-20221019162937210"></p><p>创建完成后，我们调用活动信息查询接口，来查看刚刚创建的活动，页面只是简单地列举了一下活动的主要元素，如下图所示：</p><p><img src="'+m+'" alt="image-20221019162949178"></p><p>这里我们将参加秒杀活动的商品价格设为了 998，原价是 1298，并且设置了 4 件库存，活动的开始时间是当前时间，结束时间是两天后。正常情况下活动是已经开始了，需要通过 worker 来启动活动，并完成商品标识的修改，但我本地模拟是没有加定时 worker 功能的，想通过 HTTP 接口的方式来触发，所以这里还是显示活动未开始。</p><h4 id="第三步" tabindex="-1">第三步 <a class="header-anchor" href="#第三步" aria-label="Permalink to &quot;第三步&quot;">​</a></h4><p>我们先不触发活动开始，我们先模拟客户端进商详页看看现在活动入口页面的样式，同样是通过 URL 方式，直接访问 demo-web，效果如下：</p><p><img src="'+d+'" alt="image-20221019163015005"></p><p>可以看到，活动虽然创建了，但还没有开始，所以这里展示的还是普通商品的名称和价格。下面我们就来手动触发一下，让活动开始，直接调用 demo-web 的活动开始接口：</p><p><img src="'+g+'" alt="image-20221019163026987"></p><p>这样活动就触发成功了，这个时候，我们再分别看下活动信息和商品信息，看看都有什么变化：</p><p><img src="'+h+'" alt="image-20221019163039740"></p><h4 id="第四步" tabindex="-1">第四步 <a class="header-anchor" href="#第四步" aria-label="Permalink to &quot;第四步&quot;">​</a></h4><p>秒杀活动开始后，我们再次进入到商详页</p><p>对比之前的商详页，我们可以看到商品的图片、名称、价格展示，都已经变成了活动配置的，同时按钮也变成了立即抢购，并可以点击，说明到这里我们一切都进展的很顺利！</p><h4 id="第五步" tabindex="-1">第五步 <a class="header-anchor" href="#第五步" aria-label="Permalink to &quot;第五步&quot;">​</a></h4><p>这时，我们点击立即抢购按钮，去进入到秒杀结算页。这里点击按钮，调用的是进结算页页面（H5）接口，在加载了 HTML 后，JavaScript 通过 Ajax 调用结算页页面初始化渲染所需数据的接口，去渲染页面展示，效果如下：</p><p><img src="'+u+'" alt="image-20221019163126844"></p><p>页面的结算元素，这里只简单地展示了几个，当然你可以根据实际需要去灵活填充。展示中的结算页支持修改购买数量，修改后总金额会随之变化，而且有单次够买数量的限制，同时也允许用户切换支付方式、修改地址等操作，这里做的用户操作，会调用结算页页面用户行为操作接口。</p><h4 id="第六步" tabindex="-1">第六步 <a class="header-anchor" href="#第六步" aria-label="Permalink to &quot;第六步&quot;">​</a></h4><p>操作结算元素完成后，我们就可以提交订单了，调用的是结算页提交订单接口。在经过一系列的校验之后，完成库存的预占和订单的生成，并返回收银台的 URL，完成下单成功后的跳转动作，如下图所示：</p><p><img src="'+E+'" alt="image-20221019163154492"></p><p>这里是跳转到了收银台的模拟页面，这时我们再回头看看我们的活动库存：</p><p><img src="'+b+'" alt="image-20221019163239548"></p><p>由 4 件变成了 3 件，说明成功做了库存扣减。后续用户可以继续完成支付相关操作，那么用户的一次抢购行为也就结束了，当然如果用户放弃了支付或是取消了订单，那么需要将预占的库存再恢复回去。我们这里可以模拟多次抢购，当我们把商品买完时：</p><p><img src="'+_+'" alt="image-20221019163249914"></p><p>再去商详页看一下：</p><p><img src="'+f+'" alt="image-20221019163303197"></p><p>可以发现，展示的虽然还是活动相关数据，但是按钮变成灰色的了，因为没有活动库存了。</p><h4 id="第七步" tabindex="-1">第七步 <a class="header-anchor" href="#第七步" aria-label="Permalink to &quot;第七步&quot;">​</a></h4><p>正常情况下，当商品售完时，活动也应该关闭掉了。因为我们没有 worker，所以我们就来手动关闭一下，和触发活动开始一样，调用活动关闭的接口，去关闭活动并将商品的标识恢复成普通商品，如下图所示：</p><p><img src="'+k+'" alt="image-20221019163326315"></p><p>成功后，我们再看下刷新下商详页：</p><p>可以看到页面已经恢复到最初的状态了，同时查看下活动信息与商品信息：</p><p>活动显示已经结束，商品标识也变回了普通商品，一切都符合预期。</p><p><img src="'+q+'" alt="image-20221019163432364"></p><h2 id="高可用系统" tabindex="-1">高可用系统 <a class="header-anchor" href="#高可用系统" aria-label="Permalink to &quot;高可用系统&quot;">​</a></h2><h3 id="秒杀隔离" tabindex="-1">秒杀隔离 <a class="header-anchor" href="#秒杀隔离" aria-label="Permalink to &quot;秒杀隔离&quot;">​</a></h3><p><img src="'+N+'" alt="image-20221020190541112"></p><h5 id="业务隔离" tabindex="-1">业务隔离 <a class="header-anchor" href="#业务隔离" aria-label="Permalink to &quot;业务隔离&quot;">​</a></h5><p>秒杀商品的稀缺性，决定了业务不会像普通商品那样进行投放售卖。一般会有计划地进行营销策划，制订详细的方案，以达到预期的目标。因此，从业务上看，它是和普通商品完全不一样的售卖流程，它需要一个提报过程。大部分的电商平台，会有一个专门的提报系统（提报系统的建设不是秒杀的核心部分，这里不再赘述），商家或者业务可以根据自己的运营计划在提报系统里进行活动提报，提供参与秒杀的商品编号、活动起止时间、库存量、限购规则、风控规则以及参与活动群体的地域分布、预计人数、会员级别等基本信息。你别小看这个提报过程和这些基本信息，有了这些信息作为输入，我们就能预估出大致的流量、并发数等，并结合系统当前能支撑的容量情况，评估是否需要扩容，是否需要降级或者调整限流策略等，因此业务隔离的重要性可见一斑。</p><h5 id="系统隔离" tabindex="-1">系统隔离 <a class="header-anchor" href="#系统隔离" aria-label="Permalink to &quot;系统隔离&quot;">​</a></h5><p>理论上讲，需要把交易链路上涉及到的系统都单独复制部署一套，隔离干净，但这样做成本比较高，一般大点的电商平台都采用分布式微服务的部署架构，服务数量少则几十个，多则几百个，全部复制一套进行隔离不现实。所以比较常见的实践是对会被流量冲击比较大的核心系统进行物理隔离，而相对链路末端的一些系统，经过前面的削峰之后，流量比较可控了，这些系统就可以不做物理隔离</p><p><img src="'+P+'" alt="image-20221020190623645"></p><h6 id="微服务集群的隔离" tabindex="-1">微服务集群的隔离 <a class="header-anchor" href="#微服务集群的隔离" aria-label="Permalink to &quot;微服务集群的隔离&quot;">​</a></h6><p>用户的秒杀习惯，一般是打开商品详情页进行倒计时等待，时间到了点击秒杀按钮进行抢购。因此第一个需要关注的系统就是商品详情页，我们需要申请独立的秒杀详情页域名，独立的 Nginx 负载均衡器，以及独立的详情页后端服务，并采用 Dubbo 独立分组的方式单独提供秒杀服务。</p><h6 id="负载均衡器的隔离" tabindex="-1">负载均衡器的隔离 <a class="header-anchor" href="#负载均衡器的隔离" aria-label="Permalink to &quot;负载均衡器的隔离&quot;">​</a></h6><p>为了能水平扩展服务的能力，一般我们在流量入口都会通过负载均衡器来进行流量分配，常用的有硬件负载均衡，比如 F5，其功能和性能优于软件方式，但一般比较昂贵。大厂里比较常用的负载均衡器都是软件方式，有 LVS、HAProxy、Nginx 等，一方面是出于成本考虑，毕竟大厂的网络规模非常大，单个 F5 的硬件成本能承受，但是大规模的硬件成本就很高了；另一方面开源的软件也更加灵活和可定制。但不管采用的是硬件还是软件，为了不让流量互相影响，我们都有必要对负载均衡进行隔离，需要单独部署一套。隔离的方式也比较简单，部署之后，把相应的 IP 地址挂载到不同的 DNS 域名下就好了。紧接着我们仍需要对域名进行隔离，我们可以向运维部门申请一个独立的域名，专门用来承接秒杀流量，流量从专有域名进来之后，分配到专有的负载均衡器，再路由到专门的微服务分组，这样就做到了应用服务层面从入口到微服务的流量隔离。</p><p><img src="'+x+'" alt="image-20221020190816604"></p><h5 id="数据隔离" tabindex="-1">数据隔离 <a class="header-anchor" href="#数据隔离" aria-label="Permalink to &quot;数据隔离&quot;">​</a></h5><p>数据层的专有部署，需要结合秒杀的场景来设计部署拓扑结构，比如 Redis 缓存，一般的场景一主一从就够了，但是在秒杀场景，需要一主多从来扛读热点数据。关于热点数据的处理在后面的课程中我们会详细进行介绍，这里先留个悬念。到这里为止，我们基本学习完了秒杀隔离策略。现在，我们回过头来思考系统隔离中遗留的问题：怎么让秒杀流量正确地路由到我们隔离出来的专有环境里来呢？答案就是对商品进行打标，在商品的主数据上有了秒杀标，那么我们在任何一个环节都可以把这个染色过的流量进行正确地路由了。那么既然提到了商品打标，这里我再简单介绍一下商品打标的设计思路。当然，电商平台的商品系统设计远远比这复杂。打标就是一个标记，我们可以使用一个 long 型字段 skuTags 来保存，long 是 64 位，每一位代表一种类型的活动，0 代表否，1 代表是，通过对 skuTags 进行二进制操作即可完成商品的打标和去标。假设秒杀的标识我们定义在 skuTags 的第 11 位，那么要给一个 sku 打上秒杀标，我们就可以对这个标实际进行“或”操作：skuTags=skuTags|1024，这样 skuTags 字段的第 11 位就变成了 1，对其它 bit 位没影响。去标过程相反，同样进行位操作，skuTags=skuTags&amp;~1024，把第 11 位置为 0。</p><h5 id="隔离流程" tabindex="-1">隔离流程 <a class="header-anchor" href="#隔离流程" aria-label="Permalink to &quot;隔离流程&quot;">​</a></h5><p>首先业务通过提报系统对秒杀 sku 进行提报，系统对秒杀 sku 进行打标，从活动页、列表页或者搜索页点击商品的时候，系统就能识别出秒杀标，路由到秒杀的商品详情页域名，进而进入到专有 Nginx。然后就是到专有的微服务分组，以及专有的 Redis 缓存了。这里提一下，上面介绍的流量分流实际上是从活动页就开始的，为了节约成本，我们也可以设计在商品详情页进行分流，这样做的好处是商品详情页是通用的实现，也是通用的部署，当用户在详情页点击购买的时候，才根据是否有秒杀标识进行流量分流。劣势就是进行秒杀的时候，商品详情页的流量压力会比较大。</p><h3 id="流量管控" tabindex="-1">流量管控 <a class="header-anchor" href="#流量管控" aria-label="Permalink to &quot;流量管控&quot;">​</a></h3><p>通常的做法是事前引入预约环节，进行秒杀参与人数的把控，“预约 + 秒杀”是主流电商平台通用的营销方式。这个方案有两点好处，人气不足时，可以通过预约聚集人气，在同一时间点放闸开始秒杀，起到烘托大促气氛的作用；而人气过于旺盛时，则可以通过预约控制参与人数上限，只有预约过的会员才有秒杀资格，就可以防止过多人数对秒杀抢购造成冲击。为了准确地控制能够参与秒杀的用户量级，预约系统需要增加基于用户数量级设定的自动熔断的功能。有了预约自动熔断，我们就可以结合秒杀商品的库存，业务计划引流的 PV 多少，提前规划好预约阶段开放的抢购资格数量，进行流量规划，准确管控秒杀期的流量。</p><p><img src="'+v+'" alt="image-20221020191713998"></p><p>电商平台的双 11 或 618 大促，你肯定能感受到“预约 + 秒杀”在大促时的主流营销玩法。上图是预约 + 秒杀营销模式的示意图，主要分为预约期和秒杀期。</p><p>预约期内，开放用户预约，获取秒杀抢购资格；秒杀期内，具备抢购资格的用户真正开始秒杀。在预约期内，关键是锁定用户，这也是我们能够用来做流量管控的核心。在展开通过预约进行流量管控的细节之前，我们先看下如何来设计一个简单的预约系统。</p><h5 id="预约系统设计" tabindex="-1">预约系统设计 <a class="header-anchor" href="#预约系统设计" aria-label="Permalink to &quot;预约系统设计&quot;">​</a></h5><p>先从角色看，参与的有运营方，提供商品，进行预约活动的计划安排；C 端用户，进行预约和秒杀行为；以及支撑预约活动的交易链路系统。因此我们需要一个预约管理后台，进行活动的设置和关闭；需要一个预约 worker 系统，根据时间调用商品系统进行预约打标和去标，向预约过的用户发短信或消息提醒；还需要一个面向 C 端的预约核心微服务，提供给用户预约和取消预约能力，商详在展示时获取预约信息的能力，秒杀下单时检查预约资格的能力，以及获取用户的预约列表能力。这样预约的架构就出来了，如下图所示：</p><p><img src="'+T+'" alt="image-20221020191757661"></p><p>预约管理后台和预约 worker 的功能比较简单，这里就不展开介绍了。我们重点看下预约核心微服务系统的设计，包括接口、数据库和缓存。以下是核心微服务需要提供的 接口：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ecommerce</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">reservation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">service</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IReservationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//添加预约资格接口 </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addReservation</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">skuId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">userName</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//取消预约资格接口</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cancelReservation</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">skuId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">userName</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//获取预约信息接口</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">ReservationInfo</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getReservationInfoList</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">skuIds</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//校验预约资格接口</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">validateReservation</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">skuId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">userName</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//获取用户预约列表接口</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">MyReservation</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getMyReservationList</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">userName</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>添加预约资格接口来说，这个接口的实现就是先做一些参数校验，接着把预约关系写入数据库，再写入 Redis 缓存，最后更新商品的总预约人数。当然，这里面数据库和缓存的一致性问题是需要仔细考虑的。再看下数据库层的设计，对预约来讲，核心就是两个维度：预约活动和用户预约关系。因此实际上数据库层面只需要两张表就够了，一张是预约活动信息表，另一张是用户预约关系表。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> `</span><span style="color:#82AAFF;">t_reserve_info</span><span style="color:#A6ACCD;">` (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bigint</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">) unsigned </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;"> AUTO_INCREMENT COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">预约活动id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">sku_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bigint</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">) unsigned </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">商品编号</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">reserve_start_time</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">datetime</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">预约开始时间</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">reserve_end_time</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">datetime</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">预约结束时间</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">seckill_start_time</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">datetime</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">秒杀开始时间</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">seckill_end_time</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">datetime</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">秒杀结束时间</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">creator</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">varchar</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">255</span><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">活动创建人</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">update_time</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">datetime</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">更新时间</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">yn</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">tinyint</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">255</span><span style="color:#A6ACCD;">) unsigned </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">是否删除</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">PRIMARY KEY</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">) ENGINE</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">InnoDB </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> CHARSET</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">utf8;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> `</span><span style="color:#82AAFF;">t_reserve_user</span><span style="color:#A6ACCD;">` (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bigint</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">) unsigned </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;"> AUTO_INCREMENT COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">关系id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">reserve_info_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bigint</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">) unsigned </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">预约活动id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">sku_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bigint</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">) unsigned </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">商品编号</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">user_name</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">varchar</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">255</span><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">用户名称</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">reserve_time</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">datetime</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">预约时间</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">yn</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">tinyint</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">255</span><span style="color:#A6ACCD;">) unsigned </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NULL</span><span style="color:#A6ACCD;"> COMMENT </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">是否删除</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">PRIMARY KEY</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">),</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">KEY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">reserve_id_ref</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">reserve_info_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">),</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">CONSTRAINT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">reserve_id_ref</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">FOREIGN KEY</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">reserve_info_id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">REFERENCES</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">t_reserve_info</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">) ENGINE</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">InnoDB </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> CHARSET</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">utf8;</span></span></code></pre></div><p><img src="'+I+'" alt="image-20221020191852399"></p><p>当数据量小的时候，我们用以上这两张表就能满足业务需求。但是在头部电商平台，每次大促时预约人数都是几千万量级的，因此为了更好的性能，我们需要对数据库分库分表。对 t_reserve_user 这个用户预约关系表来说，就需要按照 user_name 的哈希值进行分库和分表。另外，对于历史数据，也需要有个定时任务进行结转归档，以减轻数据库的压力。接下来我们再看下缓存设计。对高并发系统来说，要扛住大流量，我们知道肯定不能让流量击穿到数据库，所以需要设计缓存来抵挡。先看 t_reserve_info 这个对象，首先我们需要在 Redis 缓存里存储它，那么 Redis key 可以这样设计：reserve_info_{skuid}，value 可以用 JSON string 存储，当然也可以采用其他序列化方式，取决于你自己。因为这个对象是 sku 维度的，在爆品的场景下，可能会有热点问题，针对热点问题的解决方案，可以设计 Redis 分片的一主多从来扛流量，也可以通过微服务层的本地缓存来解决。具体细节这里先留个悬念，我们在后面的热点缓存板块再来深入讨论。另外，用户和商品的预约关系，可以存储成 Redis 的 hash 表，key 为 reserve_user_{userName}，value 就是用户的预约 sku 列表，field 为 skuid。用户的预约关系和预约信息表不同，它是用户维度的，不会存在热点问题，所以我们可以不用考虑本地缓存。假设 skuid=10001 的商品正常进行预约，用户 szd 预约了该商品，那么缓存内容大致如下：</p><p><img src="'+L+'" alt="image-20221020191920127"></p><h5 id="预约系统优化" tabindex="-1">预约系统优化 <a class="header-anchor" href="#预约系统优化" aria-label="Permalink to &quot;预约系统优化&quot;">​</a></h5><p>传统的预约模式，预约期是固定的时间段，用户在这个阶段内都可以预约；但在秒杀场景下，为了能够准确把控流量，控制预约人数上限，我们需要拓展预约期的定义，除了时间维度外，还要加入预约人数上限的维度，一旦达到上限，预约期就即时结束。这实际上是给预约活动添加了一个自动熔断的功能，一旦活动太火爆，到达上限后系统自动关闭预约入口，提前进入等待秒杀状态。这样就可以准确把控人数，从而为秒杀期护航。</p><p><img src="'+R+'" alt="image-20221020191954005"></p><p>以上是预约熔断的流程图，白色部分流程是原有的用户预约过程，蓝色部分是添加了熔断机制的流程。技术方案还是比较简单的，这里更多的是给你思路上的启发，这也是我多次踩坑之后的经验总结。这里，你可以拓展想一想，我们现在已经能够通过预约熔断来把控秒杀资格的上限，那么随着用户对流程的熟悉，预约系统会怎么演变呢？是的，你没有猜错，当用户都知道必须预约才能在秒杀阶段有参与资格时，用户就会在预约期疯狂地挤进来，那么此时的预约系统也具备秒杀系统的特点了。好在预约人数的把控不需要那么精确，我们只需要即时熔断就达到目的了。当然了，不是所有的爆品都有这样的号召力，我刚说的属于特殊情况。要知道即使是飞天茅台，都不会触发预约熔断。而 2020 年 2 月初口罩紧缺的时候，线下都是居委会分配票证购买（我印象中听父母提起他们那一辈计划经济时代才需要粮票肉票），线上一开放预约，一分钟就预约了几百万用户触发熔断了。这应该是互联网历史上流量最大的秒杀活动了吧。另外，一般预约系统在业务设计上，需要在商详页展示当前预约人数给用户看，以营造商品火爆的气氛。我们自然就想到了可以在 Redis 里记录一个预约人数的 key，比如 reserve_amount_{skuid}，value 就是预约人数。商详页展示氛围的时候，会从 Redis 里获取到这个 value 进行提示，而用户点击“立即预约”按钮进行预约时，会往这个 key 进行 ++ 操作。这个设计在预约流量没那么聚集时没什么问题，因为一般 Redis 单片也能扛个七八万的 OPS。而当预约期一分钟内几百万人都来预约时，显然这个 Redis key 就是典型的热 key 问题了。这个热 key 问题的解决我们会在热点处理章节重点介绍。</p><h3 id="削峰限流" tabindex="-1">削峰限流 <a class="header-anchor" href="#削峰限流" aria-label="Permalink to &quot;削峰限流&quot;">​</a></h3><p>削峰的多种手段，有验证码、问答题、消息队列以及限流等。实际上，这些削峰的方式都可以达到控制流量的目的，你可以根据自己的情况进行选择。验证码是一种非常常见的防刷手段，大多数网站的登录模块中，为避免被机器人刷，都会加入图片验证码。而在秒杀系统中，我们除了用验证码来防刷外，还有一个目的就是通过验证码进行削峰，达到流量整形的目的。除了图片验证码，你一定也见过短信和语音验证码，那为什么在秒杀系统的削峰中，我们通常会选择图片验证码呢？主要还是出于成本和用户体验的考虑。消息队列是常用的应用解耦方式，通过把同步调用改造成异步消息，消费方可以根据自己的能力来处理请求，而不用担心被瞬时流量打垮。当然了，如果库存已经卖完，那么消费方在处理请求的时候，可以快速失败，这样也不用担心消息的长期积压。</p><p>和其他削峰方式相比，限流是有损的。限流实际上是根据服务自身的容量，无差别地丢弃多余流量，对于被丢弃的流量来说，这块的体验是受损的。另外，因为秒杀流量会经历很多交易系统，所以我们在设计时需要从起始流量开始，分层过滤，逐级限流，这样流量在最后的下单环节就是少量而可控的了</p><p>削峰的方法有很多，可以通过业务手段来削峰，比如秒杀流程中设置验证码或者问答题环节；也可以通过技术手段削峰，比如采用消息队列异步化用户请求，或者采用限流漏斗对流量进行层层过滤。削峰又分为无损和有损削峰。本质上，限流是一种有损技术削峰；而引入验证码、问答题以及异步化消息队列可以归为无损削峰。</p><h5 id="验证码和问答题" tabindex="-1">验证码和问答题 <a class="header-anchor" href="#验证码和问答题" aria-label="Permalink to &quot;验证码和问答题&quot;">​</a></h5><p>在秒杀交易流程中，引入验证码和问答题，有两个目的：一是快速拦截掉部分刷子流量，防止机器作弊，起到防刷的作用；二是平滑秒杀的毛刺请求，延缓并发，对流量进行削峰。让用户在秒杀前输入验证码或者做问答题，不同用户的手速有快有慢，这就起到了让 1s 的瞬时流量平均到 30s 甚至 1 分钟的平滑流量中，这样就不需要堆积过多的机器应对 1s 的瞬时流量了。</p><p><img src="'+S+`" alt="image-20221020192317199"></p><p>设计验证码流程，一般是在用户进入详情页时，先判别秒杀活动是否已经开始，如果已经开始，同时秒杀活动也配置了需要校验验证码标识，那么就需要从秒杀系统获取图片验证码，并进行渲染；用户手工输入验证码后，提交给秒杀系统进行验证码校验，如果通过就跳转至秒杀结算页。上图增加的红线部分就是引入了验证码的秒杀流程。当然，我这里介绍的，是把验证码功能作为秒杀系统的一个模块了，而大公司一般都会有单独的验证码服务，我们不用自己造轮子，只要进行系统对接就行了。下面我简单介绍一下验证码的实现，通过上图得知，验证码服务需提供两个基本的功能：生成验证码和校验验证码。</p><p>生成验证码，先看接口设计如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">POST </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">seckill</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">captchas</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">jpg</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#A6ACCD;">skuId</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10001</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 生成图片验证码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/seckill/captchas.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">RequestMethod</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">POST}</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">ResponseBody</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">SeckillResponse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">genCaptchas</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> skuId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletRequest</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletResponse</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//从cookie中取出user</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUserFromCookie</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//根据skuId和user生成图片</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">BufferedImage</span><span style="color:#A6ACCD;"> img</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">createCaptchas</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> skuId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">OutputStream</span><span style="color:#A6ACCD;"> out</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOutputStream</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      ImageIO</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JPEG</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> out</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">      out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flush</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> SeckillResponse</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ErrorMsg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SECKILL_FAIL</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 生成验证码图片方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BufferedImage</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createCaptchas</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> user</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> skuId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">90</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">BufferedImage</span><span style="color:#A6ACCD;"> img</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BufferedImage</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">height</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">BufferedImage</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TYPE_INT_RGB</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Graphics</span><span style="color:#A6ACCD;"> graph</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getGraphics</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setColor</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Color</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0xDCDCDC</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fillRect</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Random</span><span style="color:#A6ACCD;"> random</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Random</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//生成验证码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> formula</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">createFormula</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">random</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setColor</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Color</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setFont</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Font</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Candara</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">Font</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BOLD</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//将验证码写在图片上</span></span>
<span class="line"><span style="color:#A6ACCD;">    graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">drawString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">formula</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    graph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispose</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//计算验证码的值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> vCode</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">calc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">formula</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//将计算结果保存到redis上面去，过期时间1分钟</span></span>
<span class="line"><span style="color:#A6ACCD;">    cacheMgr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CAPTCHA_</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">skuId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> vCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> img</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createFormula</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Random</span><span style="color:#A6ACCD;"> random</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">ops</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//生成10以内的随机数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num1</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num2</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num3</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> oper1</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">ops</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> oper2</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">ops</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">random</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextInt</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> exp</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">num1</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">oper1</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">num2</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">oper2</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">num3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> exp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">calc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> formula</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">ScriptEngineManager</span><span style="color:#A6ACCD;"> manager</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ScriptEngineManager</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">ScriptEngine</span><span style="color:#A6ACCD;"> engine</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">manager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEngineByName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JavaScript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Integer</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> engine</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eval</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">formula</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">      e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>同时，为了让交互更加安全，避免被篡改，我们还可以加入签名机制，后端在返回给前端图片验证码的时候，同时返回一个签名，前端在点击“抢购”按钮的时候，把用户输入的验证码以及签名提交给后端服务进行验证。这个签名可以设计如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">signature</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">base64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">timestamp</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">md5</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">timestamp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">vCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">skuId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">randomSalt</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>这里 timestamp 取生成验证码 vCode 时的时间戳，randomSalt 可以理解为后端的一个私钥。那么在前面代码的第 44 行，我们存入 Redis 的值就要换成这个 signature 了。当前端点击“抢购”按钮时，调用后端服务如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">POST </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">seckill</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">settlement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">html</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#A6ACCD;">skuId</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10001</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">signature</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">ad6543audhhw13dg</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">timestamp</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1345611143</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">newCode</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">54</span></span></code></pre></div><p>接下来我们看校验验证码。校验的逻辑比较简单，从前端的 HTTP 请求里，取得 skuId、user、signature、timestamp 和 newCode，首先验证 timestamp 是否已经过期，然后根据用户输入的验证码内容 newCode 重新计算签名 newSignature，并和 Redis 里的 signature 进行比对，比对一致表示验证码校验通过。然后我们需要删掉 Redis 的内容，避免被重复验证，这样的话一个验证码就只会被验证一次了。</p><h5 id="消息队列" tabindex="-1">消息队列 <a class="header-anchor" href="#消息队列" aria-label="Permalink to &quot;消息队列&quot;">​</a></h5><p><img src="`+M+'" alt="image-20221020192504447"></p><p><img src="'+U+'" alt="image-20221020192520539"></p><h5 id="限流" tabindex="-1">限流 <a class="header-anchor" href="#限流" aria-label="Permalink to &quot;限流&quot;">​</a></h5><p>对于秒杀的瞬时流量，如果不加筛选，不做限制，直接把流量传递给下游各个系统，对整个交易系统都是非常大的挑战，也是很大的资源浪费，所以主流的做法是从上游开始，对流量进行逐级限流，分层过滤，优质的有效的流量最终才能参与下单。</p><p><img src="'+O+`" alt="image-20221020192553296"></p><p>系统的流量漏斗示意图，通过风控和防刷筛选刷子流量，通过限购和预约校验过滤无效流量，通过限流丢弃多余流量，最终秒杀系统给到下游的流量就是非常优质且少量的了。</p><p>限流常用的算法有令牌桶和漏桶，有关这两个算法的专业介绍，你可以参考：<a href="https://hansliu.com/posts/2020/11/what-is-token-bucket-and-leaky-bucket-algorithms.html" target="_blank" rel="noreferrer">https://hansliu.com/posts/2020/11/what-is-token-bucket-and-leaky-bucket-algorithms.html</a></p><h6 id="nginx-限流" tabindex="-1">Nginx 限流 <a class="header-anchor" href="#nginx-限流" aria-label="Permalink to &quot;Nginx 限流&quot;">​</a></h6><p>主要是依赖 Nginx 自带的限流功能，针对请求的来源 IP 或者自定义的一个关键参数来做限流，比如用户 ID。其配置限流规则的语法为：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C3E88D;">limit_req_zone &lt;变量名&gt; zone=&lt;限流规则名称&gt;:&lt;内存大小&gt; rate=&lt;速率阈值&gt;r/s;</span></span></code></pre></div><p>解释一下：</p><p>以上 limit_req_zone 是关键字，&lt; 变量名 &gt; 是指定根据什么来限流；</p><p>zone 是关键字，&lt; 限流规则名称 &gt; 是定义规则名称，后续代码中可以指定使用哪个规则；</p><p>&lt; 内存大小 &gt; 是指声明多大内存来支撑限流的功能；</p><p>rate 是关键字，可以指定限流的阈值，单位 r/s 意为每秒允许通过的请求，这个算法是使用令牌漏桶的思想来实现</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">http </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    limit_req_zone $binary_remote_addr zone</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">one</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">10m rate</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">1r</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    server </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        location </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">search</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            limit_req zone</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">one burst</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> nodelay</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>基于 IP 地址进行限流的例子，你可以根据实际的情况调整 rate 和 burst 的值，在秒杀的场景下，一般我们会把 rate 和 burst 设置的很低，可以都为 1，即要求 1 个 IP1 秒内只能访问 1 次。但根据 IP 地址设置限流时要慎重，会存在误杀的情况，特别像公司内用户，他们的出口 IP 就那么几个，很容易就触发了限流，所以我一般在参与阿里、苏宁或京东的秒杀活动时，都会切换到 4G 网络，避免用公司网络。除了基于 IP 限流外，我们还可以设计基于用户的 userId 进行限流</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">limit_req_zone $user_id zone</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">limit_by_user</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">10m rate</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">1r</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h6 id="应用层限流" tabindex="-1">应用层限流 <a class="header-anchor" href="#应用层限流" aria-label="Permalink to &quot;应用层限流&quot;">​</a></h6><p><strong>线程池限流</strong></p><p>Java 原生的线程池原理相信你非常清楚，我们可以通过自定义线程池，配置最大连接数，以请求处理队列长度以及拒绝策略等参数来达到限流的目的。当处理队列满，而且最大线程都在处理时，多余的请求就会被拒绝策略丢弃，也就是被限流了。</p><p><img src="`+w+'" alt="image-20221020192833344"></p><p>API 限流</p><p>Google 提供的 RateLimiter 开源包，自己手写一个基于令牌桶的限流注解和实现，在业务 API 代码里使用</p>',198),j=[H];function W(z,G,Y,J,$,K){return n(),a("div",null,j)}const X=s(B,[["render",W]]);export{Q as __pageData,X as default};
