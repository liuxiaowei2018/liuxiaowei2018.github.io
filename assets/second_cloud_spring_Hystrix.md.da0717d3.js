import{_ as s,c as a,o as e,N as l}from"./chunks/framework.0799945b.js";const n="/assets/image-20220909173612079.512198e5.png",o="/assets/image-20220909173741562.c9838e8e.png",t="/assets/image-20220909173825810.9e3e6c3e.png",p="/assets/image-20220909173903148.d3d07147.png",r="/assets/image-20220909173944078.cfae9e4b.png",c="/assets/image-20220909174047148.de9efd37.png",i="/assets/image-20220909174057276.6cb706b2.png",h=JSON.parse('{"title":"Hystrix","description":"","frontmatter":{},"headers":[],"relativePath":"second/cloud/spring/Hystrix.md"}'),y={name:"second/cloud/spring/Hystrix.md"},u=l('<h1 id="hystrix" tabindex="-1">Hystrix <a class="header-anchor" href="#hystrix" aria-label="Permalink to &quot;Hystrix&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#工作原理">工作原理</a></li><li><a href="#熔断器">熔断器</a></li><li><a href="#隔离">隔离</a></li><li><a href="#请求缓存">请求缓存</a></li><li><a href="#请求合并">请求合并</a></li><li><a href="#缓存">缓存</a></li></ul></nav><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p><img src="'+n+`" alt="image-20220909173612079"></p><p><strong>1.构造一个HystrixCommand或者HystrixObservableCommand对象</strong></p><p>第一步是创建一个HystrixCommand或者HystrixObservableCommand对象来执行依赖请求。创建时需要传递相应的参数。</p><p>如果请求只返回一个单一值，使用HystrixCommand。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HystrixCommand command = new HystrixCommand(arg1, arg2);</span></span></code></pre></div><p>如果希望返回一个Observable来监听多个值，使用HystrixObservableCommand。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HystrixObservableCommand command = new HystrixObservableCommand(arg1, arg2);</span></span></code></pre></div><p><strong>2.执行命令</strong></p><p>有四种方法来执行命令（前面两种只对HystrixCommand有用，HystrixObservableCommand没有相应的方法）。</p><ul><li>execute－阻塞，阻塞直到收到调用的返回值（或者抛出异常）</li><li>queue 返回一个future，可以通过future来获取调用的返回值。</li><li>observe 监听一个调用返回的Observable对象。</li><li>toObservable 返回一个Observable，当监听该Observable后hystrix命令将会执行并返回结果。</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">K        value   = command.execute();</span></span>
<span class="line"><span style="color:#A6ACCD;">Future&lt;K&gt;     fValue  = command.queue();</span></span>
<span class="line"><span style="color:#A6ACCD;">Observable&lt;K&gt; ohValue = command.observe();         //hot observable</span></span>
<span class="line"><span style="color:#A6ACCD;">Observable&lt;K&gt; ocValue = command.toObservable();    //cold observab</span></span></code></pre></div><p>同步调用execute本质是调用了queue().get().queue() ,而queue本质上调用了toObservable().toBlocking().toFuture().本质上都是通过rxjava的Observable实现。</p><p><strong>3.是否使用缓存</strong></p><p>如果开启缓存，请求首先会返回缓存中的结果。</p><p><strong>4.是否开启熔断</strong></p><p>当运行hystrix命令时，会判断是否熔断，如果已经熔断，hystrix将不会执行命令，而是直接执行fallback。等熔断关闭了，在执行命令。</p><p><strong>5.线程／队列／信号量是否已满</strong></p><p>如果线程或队列（非线程池模式下是信号量）已满，将不会执行命令，而是直接执行fallback。</p><p><strong>6.HystrixObservableCommand.construct() or HystrixCommand.run()</strong></p><p>hystrix通过一下两种方式来调用依赖：</p><p>HystrixObservableCommand.construct() ：返回一个Observable，发射多个值。</p><p>HystrixCommand.run()：返回一个单一值，或抛异常。</p><p>如果HystrixCommand.run()或HystrixObservableCommand.construct() 发送超时，则执行的相应线程将会抛出TimeoutException的异常。然后执行fallback流程。并且丢弃run或construst的返回值。</p><p>注意，hystrix没有办法强制停止线程执行，hysrix能做的最好方式是抛出InterruptedException。如果hystrix执行的方法没有相应InterruptedException，那么它会继续执行，但是用户的已经收到TimeoutException异常。大多是的http client不回响应InterruptedException，确保正确配置了链接的timeout时间。</p><p>如果执行方法成功，hystrix会记录日志、上报metrics，然后返回执行结果。</p><p><strong>7.熔断器计算</strong></p><p>hystrix在成功、失败、拒绝、timeout时会上报到熔断器模块，熔断器会计算当前的熔断状态。熔断器使用一个状态来表示当前是否被熔断，一旦熔断所有的请求将不回执行命令直到熔断恢复。</p><p><strong>8.执行fallback</strong></p><p>当命令执行失败时，hystrix会执行fallback：当run或construct方法抛出异常；当熔断器被熔断；当线程池／队列／信号量使用完；当timeout。</p><p>通过fallback可以优雅降级，通过静态逻辑返回一个结果。如果你想要在fallback中执行依赖调用，那么必须把这个依赖封装成一个HystrixCommand或者HystrixObservableCommand。HystrixCommand中通过fallback方法来返回一个单一值，HystrixObservableCommand通过resumeWithFallback来返回一个 Observable来返回一个或多个值。hystrix将会把返回值返回给调用方。</p><p>如果不实现fallback方法，或者执行fallback方法抛出异常，hystrix仍然会返回一个Observable，但该Observable不会发射数据，而是直接执行error。通过onerror通知，告诉调用方失败结果。fallback不存在或者fallback执行失败，不同的方法将会有不同的表现：</p><p>execute，抛出一个异常。</p><p>queue，返回一个future，但是调用get方法时，将会抛出异常。</p><p>observe，返回一个Observable，一旦被监听会立即调用监听者的onError方法。</p><p>toObservable，返回一个Observable，一旦被监听会立即调用监听者的onError方法。</p><p><strong>9.返回成功结果</strong></p><p>如果hystrix命令执行成功，它将会返回一个Observable，根据调用的方法，Observable将会被转换成响应结果：</p><p><img src="`+o+'" alt="image-20220909173741562"></p><ul><li>execute－通过queue获取一个future，然后通过future对象的get方法获取一个值。</li><li>queue－通过toObservable获取一个Observable对象，然后通过toBlocking方法获得一个Future.</li><li>observe-返回Observable对象,当监听该Observable会把所有消息重新发送一边。</li><li>toObservable-返回Observable对象，当监听该Observable，开始执行命令。</li></ul><h2 id="熔断器" tabindex="-1">熔断器 <a class="header-anchor" href="#熔断器" aria-label="Permalink to &quot;熔断器&quot;">​</a></h2><p>HystrixCommand和HystrixObservableCommand与HystrixCircuitBreaker交互的流程，以及HystrixCircuitBreaker的原理</p><p><img src="'+t+'" alt="image-20220909173825810"></p><p>熔断器开关条件：</p><ol><li>如果请求量到达了指定值（HystrixCommandProperties.circuitBreakerRequestVolumeThreshold）</li><li>如果异常比率超过了指定值（HystrixCommandProperties.circuitBreakerErrorThresholdPercentage）</li><li>则，熔断器将状态设置为OPEN.</li><li>之后所有请求都会被直接熔断。</li><li>在经过指定窗口期（HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds）后，状态将会被设置为HALF-OPEN，如果该请求失败了，状态重新被设置为OPEN并且等待下一个窗口期，如果请求成功了，状态设置为CLOSE。</li></ol><h2 id="隔离" tabindex="-1">隔离 <a class="header-anchor" href="#隔离" aria-label="Permalink to &quot;隔离&quot;">​</a></h2><p>hystrix使用了舱壁隔离模式来隔离和限制各个请求。</p><p><img src="'+p+'" alt="image-20220909173903148"></p><h2 id="请求缓存" tabindex="-1">请求缓存 <a class="header-anchor" href="#请求缓存" aria-label="Permalink to &quot;请求缓存&quot;">​</a></h2><p>HystrixCommand和HystrixObservableCommand实现了缓存机制，通过指定一个cache key，它们能够在一个请求范围内对运行结果进行缓存以便下次使用。下面是在一个请求中两个线程执行同一个请求的流程：</p><p><img src="'+r+'" alt="image-20220909173944078"></p><p>使用缓存的好处：</p><ul><li>线程池会隔离每一个依赖，避免他们相互影响，从而保护了整个系统</li><li>某几个依赖服务失败后，只要整个系统正常运行，那么恢复起来也很快。</li><li>通过线程池可以实现异步操作。</li></ul><p>总之，通过线程池来隔离依赖服务可以很优雅的隔离那些经常发生变化的依赖服务从而保护整个系统的运行。</p><p>线程池的缺点</p><p>线程池的主要缺点就是增加了额外的计算资源，每一个命令的执行都需要系统进行调度。netflix基于线程池不会耗费大量计算资源而决定使用这样的设计。</p><p>线程池花费</p><p>hystrix计算了通过线程池执行construct和run的延时。Netflix API 每天使用线程池方式处理上百亿的请求，每一个API都有40多个线程池，每个线程池中有5～20个线程。线图显示了一个QPS为60的HystrixCommand在线程池模式下的执行性能</p><p>信号量</p><p>也可以使用信号量来限制每个依赖的并发数量。他可以对依赖服务降级，但不能监听timeout，如果我们对依赖服务的调用确认不会出现timeout情况，我们也可以使用这中方式。</p><p>HystrixCommand和HystrixObservableCommand在下面两个地方支持使用信号量。</p><ul><li>降级方法fallback：当Hystrix执行fallback方法时，总是会通过信号量检查并发量。</li><li>执行方法：如果设置了execution.isolation.strategy为SEMAPHORE，Hystrix将会使用信号量来控制并发数。</li></ul><p>可以通过动态的配置来设置并发数。尽可能设置合适的并发数，不可设置过大的并发数，这样将导致无法起保护作用。</p><h2 id="请求合并" tabindex="-1">请求合并 <a class="header-anchor" href="#请求合并" aria-label="Permalink to &quot;请求合并&quot;">​</a></h2><p>通过使用HystrixCollapser可以实现合并多个请求批量执行。下面的图标显示了使用请求合并和不是请求合并，他们的线程迟和连接情况：</p><p><img src="'+c+'" alt="image-20220909174047148"></p><p>使用请求合并可以减少线程数和并发连接数，并且不需要使用这额外的工作。请求合并有两种作用域，全局作用域会合并全局内的同一个HystrixCommand请求，请求作用域只会合并同一个请求内的同一个HystrixCommand请求。但是请求合并会增加请求的延时。</p><p><img src="'+i+`" alt="image-20220909174057276"></p><blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">HystrixCollapser</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">batchMethod</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">findAll</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">scope</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">com</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">netflix</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hystrix</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">HystrixCollapser</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">GLOBAL</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">collapserProperties</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">HystrixProperty</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">timerDelayInMilliseconds</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)})</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Long</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">单个数据返回信息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">HystrixCommand</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">User</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findAll</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Long</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ids</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">批量数据返回的信息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></blockquote><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h2><p>一个请求对同一个Hystrix Command调用可以避免重复执行。</p><p>对于一些延时比较低的，不需要检测timeout的依赖，我们也可以使用信号量控制方式来做隔离，减少额外的花费。</p><p>这个功能对于多人协作开发的大型的项目非常有用。据一个例子，在一个请求中，多个地方需要使用用户的Account对象。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Account account = new UserGetAccount(accountId).execute();</span></span>
<span class="line"><span style="color:#A6ACCD;">//or</span></span>
<span class="line"><span style="color:#A6ACCD;">Observable&lt;Account&gt; accountObservable = new UserGetAccount(accountId).observe();</span></span></code></pre></div><p>Hystrix将会执行run方法一次，两个线程都会接收到各自内容相同的Account对象。当执行第一次run方法后，结果将会被缓存起来，当在同一个请求执行同一个命令时，会直接使用缓存值。</p><p>减少线程重复执行。</p><p>因为缓存是在执行run或者construct方法前进行判断的，所以可以减少run和construct的调用。如果Hystrix没有实现缓存功能，那么每个调用都需要执行construct或者run方法。</p>`,79),m=[u];function b(D,C,d,F,x,A){return e(),a("div",null,m)}const v=s(y,[["render",b]]);export{h as __pageData,v as default};
