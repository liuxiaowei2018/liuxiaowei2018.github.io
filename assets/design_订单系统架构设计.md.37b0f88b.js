import{_ as s,c as a,o as p,a as n}from"./app.467f35a9.js";const e="/assets/667089ecbfdf18733c83c3d07783fa17.4c9ea983.jpg",l="/assets/e16007b7e26c34a55d4bb4689b358dda.97c25ad9.png",o="/assets/image-20220406205255172.ba64e809.png",r="/assets/image-20220406205402610.f2304f3d.png",t="/assets/image-20220406205442535.85dedd79.png",i="/assets/image-20220406205630672.7b942efc.png",c="/assets/image-20220406205733915.1de6b601.png",d="/assets/image-20220406205838076.6118fe2d.png",C="/assets/image-20220406205924964.14012240.png",x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"订单系统架构设计","slug":"订单系统架构设计","link":"#订单系统架构设计","children":[{"level":3,"title":"概念篇","slug":"概念篇","link":"#概念篇","children":[]},{"level":3,"title":"应用篇","slug":"应用篇","link":"#应用篇","children":[]}]}],"relativePath":"design/订单系统架构设计.md"}'),h={name:"design/订单系统架构设计.md"},g=n('<h2 id="订单系统架构设计" tabindex="-1">订单系统架构设计 <a class="header-anchor" href="#订单系统架构设计" aria-hidden="true">#</a></h2><h3 id="概念篇" tabindex="-1">概念篇 <a class="header-anchor" href="#概念篇" aria-hidden="true">#</a></h3><h4 id="_01-创建和更新订单时-如何保证数据准确无误" tabindex="-1">01 | 创建和更新订单时，如何保证数据准确无误？ <a class="header-anchor" href="#_01-创建和更新订单时-如何保证数据准确无误" aria-hidden="true">#</a></h4><h5 id="订单系统的核心功能和数据" tabindex="-1">订单系统的核心功能和数据 <a class="header-anchor" href="#订单系统的核心功能和数据" aria-hidden="true">#</a></h5><p>一个订单系统必备的功能，它包含但远远不限于：</p><ul><li><p>创建订单；</p></li><li><p>随着购物流程更新订单状态；</p></li><li><p>查询订单，包括用订单数据生成各种报表。</p></li></ul><p>为了支撑这些必备功能，在数据库中，我们至少需要有这样几张表：</p><ul><li><p>订单主表：也叫订单表，保存订单的基本信息。</p></li><li><p>订单商品表：保存订单中的商品信息。</p></li><li><p>订单支付表：保存订单的支付和退款信息。</p></li><li><p>订单优惠表：保存订单使用的所有优惠信息。</p></li></ul><p>这几个表之间的关系是这样的：订单主表和后面的几个子表都是一对多的关系，关联的外键就是订单主表的主键，也就是订单号。</p><p>绝大部分订单系统它的核心功能和数据结构都是这样的。</p><h5 id="如何避免重复下单" tabindex="-1">如何避免重复下单？ <a class="header-anchor" href="#如何避免重复下单" aria-hidden="true">#</a></h5><p><strong>订单服务具备幂等性</strong></p><p>很多电商解决这个问题的思路是这样的。在数据库的最佳实践中有一条就是，数据库的每个表都要有主键，绝大部分数据表都遵循这个最佳实践。一般来说，我们在往数据库插入一条记录的时候，都不提供主键，由数据库在插入的同时自动生成一个主键。这样重复的请求就会导致插入重复数据</p><p>给订单系统增加一个“生成订单号”的服务，这个服务没有参数，返回值就是一个新的、全局唯一的订单号。在用户进入创建订单的页面时，前端页面先调用这个生成订单号服务得到一个订单号，在用户提交订单的时候，在创建订单的请求中带着这个订单号。这个订单号也是我们订单表的主键，这样，无论是用户手抖，还是各种情况导致的重试，这些重复请求中带的都是同一个订单号。订单服务在订单表中插入数据的时候，执行的这些重复 INSERT 语句中的主键，也都是同一个订单号。数据库的唯一约束就可以保证，只有一次 INSERT 语句是执行成功的，这样就实现了创建订单服务幂等性。</p><p>我们可以利用数据库的这种“主键唯一约束”特性，在插入数据的时候带上主键，来解决创建订单服务的幂等性问题。</p><p>幂等创建订单的流程时序图：</p><p><img src="'+e+`" alt="img"></p><h5 id="如何解决-aba-问题" tabindex="-1">如何解决 ABA 问题？ <a class="header-anchor" href="#如何解决-aba-问题" aria-hidden="true">#</a></h5><p><strong>更新订单的服务一样也要具备幂等性</strong></p><p>比较通用的解决方法:</p><ul><li><p>给订单主表增加一列，列名可以叫 version，也即是“版本号”的意思。</p></li><li><p>每次查询订单的时候，版本号需要随着订单数据返回给页面。</p></li><li><p>页面在更新数据的请求中，需要把这个版本号作为更新请求的参数，再带回给订单更新服务。</p></li></ul><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">UPDATE</span><span style="color:#A6ACCD;"> orders </span><span style="color:#F78C6C;">set</span><span style="color:#A6ACCD;"> tracking_number </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">666</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">version</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">version</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">WHERE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">version</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre></div><h5 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h5><p>对于创建订单服务来说，可以通过预先生成订单号，然后利用数据库中订单号的唯一约束这个特性，避免重复写入订单，实现创建订单服务的幂等性。</p><p>对于更新订单服务，可以通过一个版本号机制，每次更新数据前校验版本号，更新数据同时自增版本号，这样的方式，来解决 ABA 问题，确保更新订单服务的幂等性。</p><h4 id="_02-订单数据越来越多-数据库越来越慢该怎么办" tabindex="-1">02| 订单数据越来越多，数据库越来越慢该怎么办？ <a class="header-anchor" href="#_02-订单数据越来越多-数据库越来越慢该怎么办" aria-hidden="true">#</a></h4><h5 id="存档历史订单数据提升查询性能" tabindex="-1">存档历史订单数据提升查询性能 <a class="header-anchor" href="#存档历史订单数据提升查询性能" aria-hidden="true">#</a></h5><p><strong>当单表的订单数据太多，多到影响性能的时候，首选的方案是，归档历史订单。</strong></p><p>归档历史订单，大致的流程是这样的：</p><p><img src="`+l+`" alt="img"></p><p>首先我们需要创建一个和订单表结构一模一样的历史订单表；然后，把订单表中的历史订单数据分批查出来，插入到历史订单表中去。这个过程你怎么实现都可以，用存储过程、写个脚本或者写个导数据的小程序都行，用你最熟悉的方法就行。如果你的数据库已经做了主从分离，那最好是去从库查询订单，再写到主库的历史订单表中去，这样对主库的压力会小一点儿。现在，订单表和历史订单表都有历史订单数据，先不要着急去删除订单表中的数据，你应该测试和上线支持历史订单表的新版本代码。因为两个表都有历史订单，所以现在这个数据库可以支持新旧两个版本的代码，如果新版本的代码有 Bug，你还可以立刻回滚到旧版本，不至于影响线上业务。等新版本代码上线并验证无误之后，就可以删除订单表中的历史订单数据了。最后，还需要上线一个迁移数据的程序或者脚本，定期把过期的订单从订单表搬到历史订单表中去。</p><p>类似于订单商品表这类订单的相关的子表，也是需要按照同样的方式归档到各自的历史表中，由于它们都是用订单 ID 作为外键来关联到订单主表的，随着订单主表中的订单一起归档就可以了。</p><h5 id="如何批量删除大量数据" tabindex="-1">如何批量删除大量数据？ <a class="header-anchor" href="#如何批量删除大量数据" aria-hidden="true">#</a></h5><p><strong>分批删除</strong></p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">delete</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> orders</span></span>
<span class="line"><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">timestamp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> SUBDATE(CURDATE</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">,INTERVAL </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">month</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#F78C6C;">order by</span><span style="color:#A6ACCD;"> id </span><span style="color:#F78C6C;">limit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre></div><p>继续优化--&gt;前提条件是订单 ID 必须和订单时间正相关</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">-- 先通过一次查询，找到符合条件的历史订单中最大的那个订单 ID</span></span>
<span class="line"><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#A6ACCD;">(id) </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> orders</span></span>
<span class="line"><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">timestamp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> SUBDATE(CURDATE</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">,INTERVAL </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">month</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">-- 在删除语句中把删除的条件转换成按主键删除</span></span>
<span class="line"><span style="color:#F78C6C;">delete</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> orders</span></span>
<span class="line"><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> ?</span></span>
<span class="line"><span style="color:#F78C6C;">order by</span><span style="color:#A6ACCD;"> id </span><span style="color:#F78C6C;">limit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h4><p>对于订单这类具有时间属性的数据，会随时间累积，数据量越来越多，为了提升查询性能需要对数据进行拆分，首选的拆分方法是把旧数据归档到历史表中去。这种拆分方法能起到很好的效果，更重要的是对系统的改动小，升级成本低。在迁移历史数据过程中，如果可以停服，最快的方式是重建一张新的订单表，然后把三个月内的订单数据复制到新订单表中，再通过修改表名让新的订单表生效。如果只能在线迁移，那需要分批迭代删除历史订单数据，删除的时候注意控制删除节奏，避免给线上数据库造成太大压力。</p><h3 id="应用篇" tabindex="-1">应用篇 <a class="header-anchor" href="#应用篇" aria-hidden="true">#</a></h3><h4 id="ringnex订单系统的设计" tabindex="-1">Ringnex订单系统的设计 <a class="header-anchor" href="#ringnex订单系统的设计" aria-hidden="true">#</a></h4><h5 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-hidden="true">#</a></h5><h6 id="_1-明确订单系统在企业中的角色" tabindex="-1">1. 明确订单系统在企业中的角色 <a class="header-anchor" href="#_1-明确订单系统在企业中的角色" aria-hidden="true">#</a></h6><p>在搭建企业订单系统之前，需要先梳理企业整体业务系统之间的关系和订单系统上下游关系，只有划分清业务系统边界，才能确定订单系统的职责与功能，进而保证各系统之间高效简洁的工作。</p><h6 id="_2-明确订单系统与各业务系统的关系" tabindex="-1">2. 明确订单系统与各业务系统的关系 <a class="header-anchor" href="#_2-明确订单系统与各业务系统的关系" aria-hidden="true">#</a></h6><p><img src="`+o+'" alt="image-20220406205255172"></p><p><strong>（1）对外系统：</strong></p><p>所有给企业外部用户使用的系统都在这一层，包括官网、普通用户使用的C端，还包括给商户使用的商家后台和在各个销售渠道进行分销的系统，比如与银行信用卡中心合作、微信合作在合作商的平台露出本企业的产品。这类系统站在与客户接触的最前线，是公司实现商业模式的桥头堡。</p><p><strong>（2）管理中后台：</strong></p><p>每个C端的业务形态都会有一个对应的系统模块，如负责管理平台交易的订单系统，管理优惠信息的促销系统，管理平台所有产品的产品系统，以及管理所有对外系统显示内容的内容系统等。</p><p><strong>（3）公共服务系统：</strong></p><p>随着企业的发展，信息化建设到达一定程度后，企业需要将通用功能服务化、平台化，以保证应用架构的合理性，提升服务效率。这类系统主要给其他应用系统提供基础服务能力支持。</p><h6 id="_3-梳理订单系统上下游关系" tabindex="-1">3. 梳理订单系统上下游关系 <a class="header-anchor" href="#_3-梳理订单系统上下游关系" aria-hidden="true">#</a></h6><p><img src="'+r+'" alt="image-20220406205402610"></p><p>由此可见，订单系统对上接收用户信息，将用户信息转化为产品订单，同时管理并跟踪订单信息和数据，承载了公司整个交易线的重要对客环节。对下则衔接产品系统、促销系统、仓储系统、会员系统、支付系统等，对整个电商平台起着承上启下的作用。</p><h6 id="_4-订单系统的业务架构" tabindex="-1">4. 订单系统的业务架构 <a class="header-anchor" href="#_4-订单系统的业务架构" aria-hidden="true">#</a></h6><p><img src="'+t+'" alt="image-20220406205442535"></p><p><strong>（1）订单服务</strong></p><p>该模块的主要功能是用户日常使用的服务和页面，主要有订单列表、订单详情、在线下单等，还包括为公共业务模块提供的多维度订单数据服务。</p><p><strong>（2）订单逻辑</strong></p><p>订单系统的核心，起着至关重要的作用，在订单系统负责管理订单创建、订单支付、订单生产、订单确认、订单完成、取消订单等订单流程。还涉及到复杂的订单状态规则、订单金额计算规则以及增减库存规则等。在4节核心功能设计中会重点来说。</p><p><strong>（3）底层服务</strong></p><p>信息化建设达到一定程度的企业，一般会将公司公共服务模块化，比如：产品，会构建对应的产品系统，代码、数据库，接口等相对独立。但是，这也带来了一个问题，比如：订单创建的场景下需要获取的信息分散在各个系统。</p><p>如果需要从各个公共服务系统调用：一是会花费大量时间，二是代码的维护成本非常高。因此，订单系统接入所需的公共服务模块接口，在订单系统即可完成对接公共系统的服务。</p><h5 id="订单系统核心功能" tabindex="-1">订单系统核心功能 <a class="header-anchor" href="#订单系统核心功能" aria-hidden="true">#</a></h5><h6 id="_1-订单中所包含的内容信息" tabindex="-1">1. 订单中所包含的内容信息 <a class="header-anchor" href="#_1-订单中所包含的内容信息" aria-hidden="true">#</a></h6><p><img src="'+i+'" alt="image-20220406205630672"></p><p>为了使订单系统能够对订单进行高效、精准的管理和跟踪，订单会储存关于产品、优惠、用户、支付信息等一系列的订单实时数据，来和下游系统，如：促销、仓储、物流进行交互。</p><p>以一个通用B2C商城的订单为例，梳理其包含的信息如下：</p><p>这里要注意的是订单类型，随着平台业务的不断发展，品类丰富、交易方式丰富后，需要对订单进行多维度的分类管理，同时订单类型利于订单系统的扩展性。每种订单类型将会对应一套流程及一套状态，便于对订单进行分类管理和复用。</p><h6 id="_2-流程引擎" tabindex="-1">2. 流程引擎 <a class="header-anchor" href="#_2-流程引擎" aria-hidden="true">#</a></h6><p>流程是指从平台角度出发，将订单从创建到完成的整个流转过程进行抽象，从而行程了一套标准流程规则。而不同的产品类型或交易类型在系统中的流程会千差万别，因此为了方便对订单流程进行管理，会组建流程引擎模块。</p><p>每套订单流程中会包含正向流程及逆向流程，正向流程可以比作一次顺利的网购体验过程中，后台系统之间的信息流转。逆向流程则是修改订单、取消订单、退款、退货等各种动作引起的后台系统流程，同时每个流程触发的条件又可分为系统触发和人工触发两种场景。</p><p><strong>（1）正向流程</strong></p><p>以一个通用B2C商城的订单系统为例，根据其实际业务场景，其订单流程可抽象为5大步骤：<strong>订单创建&gt;订单支付&gt;订单生产&gt;订单确认&gt;订单完成。</strong></p><p>而每个步骤的背后，订单是如何在多系统之间交互流转的，可概括如下图：</p><p><img src="'+c+'" alt="image-20220406205733915"></p><p><strong>订单创建：</strong></p><p>用户下单后，系统需要生成订单，此时需要先获取下单中涉及的商品信息，然后获取该商品所涉及到的优惠信息，如果商品不参与优惠信息，则无此环节。</p><p>接着获取该账户的会员权益，这里要注意的是：优惠信息与会员权益的区别，比如：商品满减是优惠信息，SUPER会员全场9.8折指的是会员权益，一个是针对商品，另一个是针对账户。其次就是优惠活动的叠加规则和优先级规则等。</p><p>增减库存规则是指订单中的商品，何时从仓储系统中对相应商品库存进行扣除，目前主流有两种方式：</p><p><strong>下单减库存——即用户下单成功时减少库存数量</strong></p><ul><li><strong>优势：</strong> 用户体验友好，系统逻辑简洁；</li><li><strong>缺点：</strong> 会导致恶意下单或下单后却不买，使得真正有需求的用户无法购买，影响真实销量；</li></ul><p><strong>解决办法：</strong></p><ol><li>设置订单有效时间，若订单创建成功N分钟不付款，则订单取消，库存回滚；</li><li>限购，用各种条件来限制买家的购买件数，比如一个账号、一个ip，只能买一件；</li><li>风控，从技术角度进行判断，屏蔽恶意账号，禁止恶意账号购买。</li></ol><p><strong>付款减库存——即用户支付完成并反馈给平台后再减少库存数量</strong></p><ul><li><strong>优势：</strong> 减少无效订单带来的资源损耗；</li><li><strong>缺点：</strong> 因第三方支付返回结果存在时差，同一时间多个用户同时付款成功，会导致下单数目超过库存，商家库存不足容易引发断货和投诉，成本增加。</li></ul><p><strong>解决办法：</strong></p><ol><li>付款前再次校验库存，如确认订单要付款时再验证一次，并友好提示用户库存不足；</li><li>增加提示信息：在商品详情页，订单步骤页面提示不及时付款，不能保证有库存等。</li></ol><p>综上所述，两种方式各有优缺点，因此，需结合实际场景进行考虑，如：秒杀、抢购、促销活动等，可使用下单减库存的方式。而对于产品库存量大，并发流量没有那么强的产品使用付款减库存的方式。</p><p>将两种方式带入到销售场景中，关联商品类型、促销类型、供需关系等，灵活使用，以充分发挥计算机系统的优势。</p><p><strong>订单支付：</strong></p><p>用户支付完订单后，需要获取订单的支付信息，包括支付流水号、支付时间等。支付完订单接着就是等商家发货，但在发货过程中，根据平台业务模式的不同，可能会涉及到订单的拆分。</p><p>订单拆分一般分两种：</p><ul><li>一种是用户挑选的商品来自于不同渠道（自营与商家，商家与商家）；</li><li>另一种是在SKU层面上拆分订单：不同仓库，不同运输要求的SKU，包裹重量体积限制等因素需要将订单拆分。</li></ul><p>订单拆分也是一个相对独立的模块，这里就不详细描述了。</p><p><strong>订单生产：</strong> 订单生产，是指产品从企业到用户这一流程的概述。如电商平台中，商家发货过程已有一个标准化的流程，订单内容会发送到仓库，仓库对商品进行打单、拣货、包装、交接快递进行配送。</p><p><strong>订单确认：</strong> 收到货后，订单系统需要在快递被签收后提醒用户对商品做评价。这里要注意，确认收到货不代表交易成功，相反是售后服务的开始。</p><p><strong>订单完成：</strong> 订单完成是指在收到货X天的状态，此时订单不在售后的支持时间范围内。到此，一个订单的正向流程就算走完了。</p><p><strong>（2）逆向流程</strong></p><p><img src="'+d+'" alt="image-20220406205838076"></p><p>逆向流程是各种修改订单、取消订单、退款、退货等操作</p><p><strong>订单修改：</strong> 可梳理订单内信息，根据信息关联程度及业务诉求，设定订单的可修改范围是什么，比如：客户下单后，想修改收货人地址及电话。此时只需对相应数据进行更新即可。</p><p><strong>订单取消：</strong> 用户提交订单后没有进行支付操作，此时用户原则上属于取消订单，因为还未付款，则比较简单，只需要将原本提交订单时扣减的库存补回，促销优惠中使用的优惠券，权益等视平台规则，进行相应补回。</p><p><strong>退款：</strong> 用户支付成功后，客户发出退款的诉求后，需商户进行退款审核，双方达成一致后，系统应以退款单的形式完成退款，关联原订单数据。因商品无变化，所以不许考虑与库存系统的交互，仅需考虑促销系统及支付系统交互即可。</p><p><strong>退货：</strong> 用户支付成功后，客户发出退货的诉求后，需商户进行退款审核，双方达成一致后，需对库存系统进行补回，支付系统、促销系统以退款单形式完成退款。最后，在退款/退货流程中，需结合平台业务场景，考虑优惠分摊的逻辑，在发生退款/退货时，优惠该如何退回的处理规则和流程。</p><p><strong>（3）状态机</strong></p><p>状态机是管理订单状态逻辑的工具。状态机可归纳为3个要素，即现态、动作、次态。</p><ol><li><strong>现态：</strong> 是指当前所处的状态。</li><li><strong>动作：</strong> 动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。</li><li><strong>次态：</strong> 动作满足后要迁往的新状态，“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。</li></ol><p>状态机的设计需要结合平台实际业务场景，将状态间的切换细化成了执行了某个动作。</p><p>以一个B2C商城的订单系统举例如下：</p><p><img src="'+C+'" alt="image-20220406205924964"></p><p>订单系统为了高效的对订单进行跟踪和管理，会对订单流程当中的关键节点，抽象出订单状态。而订单状态从不同用户的角度可分为，系统订单状态、商家订单状态、买家订单状态等。</p><p>对于订单系统来说，订单状态细分的颗粒度越细、越明确，订单系统管理的精度和可靠性就越高，比如：在待付款和待发货两个状态中，订单系统后台会细分为订单超时取消、订单支付失败、订单付款完成等。</p><p>因此，订单状态模块中，通常会维护状态映射表，以不同的用户角色对系统订单状态进行重新划分，以满足不同用户的需求。</p><p>除此以外，随着电商平台的不断发展，不同的业务类型，所对应的订单状态都会有所区别。所以，订单系统中一般会储存多套状态机，以满足不同的订单类型来使用。</p><h4 id="订单业务系统架构" tabindex="-1">订单业务系统架构 <a class="header-anchor" href="#订单业务系统架构" aria-hidden="true">#</a></h4><p>随着企业的发展，业务量和业务形式不断变化，企业有可能形成多个订单系统并存以满足不同的业务需要的情况。</p><p>这种状况的出现，将会给平台带来非常大的发展瓶颈，如：</p><ul><li><p>多个订单系统，每个订单系统处理不同类型的订单，没有统一的订单销量、订单状态信息，网站前台对订单的状态展示与控制不统一，只能是在网站前台会员中心硬代码维护一套面向会员的统一订单明细与状态数据。而无线侧上线后，由于不了解前台网站会员中心的订单状态管理逻辑，所以需要把前台网站的订单明细及状态管理再在无线应用侧再实现一遍。</p></li><li><p>多套后台订单系统与公共业务系统如会员中心、支付与财务、促销工具、客户分单等系统都需要对接一遍，公共业务处理逻辑不统一，一旦逻辑变更多个系统统一个接口都要修改一遍，接口的重复维护开发工作量大。</p></li><li><p>订单开发目前分到事业部，各个事业部只会考虑自己的逻辑，不会考虑公共架构，只会越走越远。碰到像无线这样的项目，需要对接各个事业部，无线侧应用上线进展慢。</p></li></ul><p><strong>订单系统可拆分为订单中心与业务订单系统两个模块，以管理公司所有订单数据，并为各个模块提供统一服务。</strong></p><blockquote><p>业务订单系统：order-business</p><p>订单中心：order-center</p></blockquote>',122),A=[g];function y(_,D,m,u,F,b){return p(),a("div",null,A)}const E=s(h,[["render",y]]);export{x as __pageData,E as default};
