import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8048b864.js";const d=JSON.parse('{"title":"Mybatis","description":"","frontmatter":{},"headers":[],"relativePath":"mybatis/mybatis.md","filePath":"mybatis/mybatis.md","lastUpdated":1719110524000}'),p={name:"mybatis/mybatis.md"},o=l(`<h1 id="mybatis" tabindex="-1">Mybatis <a class="header-anchor" href="#mybatis" aria-label="Permalink to &quot;Mybatis&quot;">​</a></h1><h2 id="mybatis生命周期" tabindex="-1">MyBatis生命周期 <a class="header-anchor" href="#mybatis生命周期" aria-label="Permalink to &quot;MyBatis生命周期&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301633231.png" alt="image-20230207185239827"></p><ul><li><p>创建SqlSessionFactory</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;org/mybatis/example/mybatis-config.xml&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">InputStream inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getResourceAsStream</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">SqlSessionFactory sqlSessionFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactoryBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(inputStream);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org/mybatis/example/mybatis-config.xml&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">SqlSessionFactory sqlSessionFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inputStream);</span></span></code></pre></div></li><li><p>通过SqlSessionFactory创建SqlSession</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SqlSession session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSessionFactory.</span><span style="color:#B392F0;">openSession</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SqlSession session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSessionFactory.</span><span style="color:#6F42C1;">openSession</span><span style="color:#24292E;">();</span></span></code></pre></div></li><li><p>通过sqlsession执行数据库操作</p><ul><li><p>通过 SqlSession 实例来直接执行已映射的 SQL 语句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Blog blog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Blog)session.</span><span style="color:#B392F0;">selectOne</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.mybatis.example.BlogMapper.selectBlog&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Blog blog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Blog)session.</span><span style="color:#6F42C1;">selectOne</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.mybatis.example.BlogMapper.selectBlog&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span></code></pre></div></li><li><p>获取Mapper(映射)，然后再执行SQL语句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">BlogMapper mapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> session.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(BlogMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">Blog blog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">selectBlog</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BlogMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(BlogMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">Blog blog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">selectBlog</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span></code></pre></div></li></ul></li><li><p>调用session.commit()提交事务</p></li><li><p>调用session.close()关闭会话</p></li></ul><h2 id="mybatis工作流程" tabindex="-1">Mybatis工作流程 <a class="header-anchor" href="#mybatis工作流程" aria-label="Permalink to &quot;Mybatis工作流程&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301633934.png" alt="image-20230207190105360"></p><h2 id="mybatis延迟加载" tabindex="-1">Mybatis延迟加载 <a class="header-anchor" href="#mybatis延迟加载" aria-label="Permalink to &quot;Mybatis延迟加载&quot;">​</a></h2><ul><li>Mybatis支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</li><li>原理是使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</li></ul><h2 id="mybatis缓存" tabindex="-1">Mybatis缓存 <a class="header-anchor" href="#mybatis缓存" aria-label="Permalink to &quot;Mybatis缓存&quot;">​</a></h2><h3 id="一级缓存" tabindex="-1">一级缓存 <a class="header-anchor" href="#一级缓存" aria-label="Permalink to &quot;一级缓存&quot;">​</a></h3><blockquote><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">在同一个SqlSession中发起的多次请求，会将相同的数据缓存起来，后面相同的查询不进行SQL操作数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">MyBatis默认支持一级缓存，不需要任何配置</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">在同一个SqlSession中发起的多次请求，会将相同的数据缓存起来，后面相同的查询不进行SQL操作数据库</span></span>
<span class="line"><span style="color:#24292E;">MyBatis默认支持一级缓存，不需要任何配置</span></span></code></pre></div><p><code>一级缓存失效</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">.sqlSession不同(每个sqlSession中的缓存相互独立)</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">.sqlSession相同，查询条件不同</span></span>
<span class="line"><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">.sqlSession相同，两次查询之间执行了增删改操作(增删改操作可能会对当前数据产生影响)</span></span>
<span class="line"><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">.sqlSession相同，一级缓存被手动清除[</span><span style="color:#FDAEB7;font-style:italic;">session.clearCache()</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">.sqlSession不同(每个sqlSession中的缓存相互独立)</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">.sqlSession相同，查询条件不同</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;">.sqlSession相同，两次查询之间执行了增删改操作(增删改操作可能会对当前数据产生影响)</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;">.sqlSession相同，一级缓存被手动清除[</span><span style="color:#B31D28;font-style:italic;">session.clearCache()</span><span style="color:#24292E;">]</span></span></code></pre></div></blockquote><h3 id="二级缓存" tabindex="-1">二级缓存 <a class="header-anchor" href="#二级缓存" aria-label="Permalink to &quot;二级缓存&quot;">​</a></h3><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">只要是由同一个SqlSessionFactory构造的SqlSession对象，可以缓存数据</span></span>
<span class="line"><span style="color:#e1e4e8;">MyBatis默认是关闭二级缓存的</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">只要是由同一个SqlSessionFactory构造的SqlSession对象，可以缓存数据</span></span>
<span class="line"><span style="color:#24292e;">MyBatis默认是关闭二级缓存的</span></span></code></pre></div><p><code>操作二级缓存</code></p><p>1.主配置文件中设置开启功能</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--Mybatis的配置--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;jdbc.properties&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--放在该位置--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">settings</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!--开启缓存--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">setting</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;cacheEnabled&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">settings</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--Mybatis的配置--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">properties</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;jdbc.properties&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--放在该位置--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">settings</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!--开启缓存--&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">setting</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;cacheEnabled&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">settings</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>2.映射文件中使用缓存</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--使用二级缓存--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">cache</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">cache</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eviction</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FIFO&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flushInterval</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;60000&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;512&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readOnly</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储</span></span>
<span class="line"><span style="color:#6A737D;">结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进</span></span>
<span class="line"><span style="color:#6A737D;">行修改可能会在不同线程中的调用者产生冲突。--&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--使用二级缓存--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">cache</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">cache</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eviction</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FIFO&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flushInterval</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;60000&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;512&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readOnly</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储</span></span>
<span class="line"><span style="color:#6A737D;">结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进</span></span>
<span class="line"><span style="color:#6A737D;">行修改可能会在不同线程中的调用者产生冲突。--&gt;</span></span></code></pre></div><p>3.将相应的对象数据序列化</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">类名</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">类名</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {}</span></span></code></pre></div></blockquote><h2 id="mybatis插件原理" tabindex="-1">Mybatis插件原理 <a class="header-anchor" href="#mybatis插件原理" aria-label="Permalink to &quot;Mybatis插件原理&quot;">​</a></h2><p>Mybatis会话的运行需要ParameterHandler、ResultSetHandler、StatementHandler、Executor这四大对象的配合，插件的原理就是在这四大对象调度的时候，插入一些我我们自己的代码。</p><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301633406.png" alt="image-20230207190721444"></p><p>Mybatis使用JDK的动态代理，为目标对象生成代理对象。它提供了一个工具类<code>Plugin</code>，实现了<code>InvocationHandler</code>接口。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Object proxy, Method method, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">&gt; methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> signatureMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (methods </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> methods.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(method)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> interceptor.</span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Invocation</span><span style="color:#E1E4E8;">(target, method, args));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(target, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionUtil.</span><span style="color:#B392F0;">unwrapThrowable</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object proxy, Method method, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">&gt; methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> signatureMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (methods </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> methods.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(method)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> interceptor.</span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Invocation</span><span style="color:#24292E;">(target, method, args));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(target, args);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionUtil.</span><span style="color:#6F42C1;">unwrapThrowable</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>使用<code>Plugin</code>生成代理对象，代理对象在调用方法的时候，就会进入invoke方法，在invoke方法中，如果存在签名的拦截方法，插件的intercept方法就会在这里被我们调用，然后就返回结果。如果不存在签名方法，那么将直接反射调用我们要执行的方法</p></blockquote><h3 id="mybatis分页插件" tabindex="-1">MyBatis分页插件 <a class="header-anchor" href="#mybatis分页插件" aria-label="Permalink to &quot;MyBatis分页插件&quot;">​</a></h3><blockquote><p>MyBatis使用<code>RowBounds对象</code>进行分页，它是<code>针对ResultSet结果集执行的内存分页</code>，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p></blockquote><blockquote><p><strong>分页插件的原理是什么？</strong></p></blockquote><ul><li>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，拦截Executor的query方法</li><li>在执行查询的时候，拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</li><li>举例：select * from student，拦截sql后重写为：select t.* from (select * from student) t limit 0, 10</li></ul><h3 id="如何编写一个插件" tabindex="-1">如何编写一个插件？ <a class="header-anchor" href="#如何编写一个插件" aria-label="Permalink to &quot;如何编写一个插件？&quot;">​</a></h3><p>只需要实现拦截器接口 Interceptor (org.apache.ibatis. plugin Interceptor ）在实现类中对拦截对象和方法进行处理。</p><ul><li><p>实现Mybatis的Interceptor接口并重写intercept()方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Intercepts</span><span style="color:#E1E4E8;">({@</span><span style="color:#F97583;">Signature</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executor.class,  </span><span style="color:#6A737D;">//确定要拦截的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;update&quot;</span><span style="color:#E1E4E8;">,        </span><span style="color:#6A737D;">//确定要拦截的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {MappedStatement.class,Object.class}   </span><span style="color:#6A737D;">//拦截方法的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">)})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyInterceptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Interceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    Properties props</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(Invocation </span><span style="color:#FFAB70;">invocation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;before……&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果不是它就会调用下个插件代理对象的invoke方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object obj</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">invocation.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;after……&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Intercepts</span><span style="color:#24292E;">({@</span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executor.class,  </span><span style="color:#6A737D;">//确定要拦截的对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;update&quot;</span><span style="color:#24292E;">,        </span><span style="color:#6A737D;">//确定要拦截的方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {MappedStatement.class,Object.class}   </span><span style="color:#6A737D;">//拦截方法的参数</span></span>
<span class="line"><span style="color:#24292E;">)})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Interceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    Properties props</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(Invocation </span><span style="color:#E36209;">invocation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before……&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不是它就会调用下个插件代理对象的invoke方法</span></span>
<span class="line"><span style="color:#24292E;">        Object obj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">invocation.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after……&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>MyBatis配置文件里面配置插件</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interceptor</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xxx.MyPlugin&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dbType&quot;</span><span style="color:#E1E4E8;">,value=</span><span style="color:#9ECBFF;">&quot;mysql&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interceptor</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xxx.MyPlugin&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dbType&quot;</span><span style="color:#24292E;">,value=</span><span style="color:#032F62;">&quot;mysql&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li></ul><h2 id="mapper动态代理" tabindex="-1">Mapper动态代理 <a class="header-anchor" href="#mapper动态代理" aria-label="Permalink to &quot;Mapper动态代理&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/liuxiaowei2018/image/repo/202405301633318.png" alt="image-20230207190212500"></p><ul><li><p>getMapper(...)</p><ul><li><p>获取Mapper的过程，需要先获取MapperProxyFactory——Mapper代理工厂。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type, SqlSession sqlSession) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    MapperProxyFactory&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; mapperProxyFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (MapperProxyFactory)</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.knownMappers.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mapperProxyFactory </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindingException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Type &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> type </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; is not known to the MapperRegistry.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mapperProxyFactory.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(sqlSession);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">var5</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindingException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error getting mapper instance. Cause: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> var5, var5);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type, SqlSession sqlSession) {</span></span>
<span class="line"><span style="color:#24292E;">    MapperProxyFactory&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; mapperProxyFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (MapperProxyFactory)</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.knownMappers.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mapperProxyFactory </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Type &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is not known to the MapperRegistry.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mapperProxyFactory.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(sqlSession);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">var5</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error getting mapper instance. Cause: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> var5, var5);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MapperProxyFactory</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; mapperInterface;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ……</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(MapperProxy&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">mapperProxy</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Proxy.</span><span style="color:#B392F0;">newProxyInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mapperInterface.</span><span style="color:#B392F0;">getClassLoader</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Class</span><span style="color:#E1E4E8;">[]{</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mapperInterface}, mapperProxy);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(SqlSession </span><span style="color:#FFAB70;">sqlSession</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        MapperProxy&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; mapperProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MapperProxy</span><span style="color:#E1E4E8;">(sqlSession, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mapperInterface, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.methodCache);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(mapperProxy);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperProxyFactory</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; mapperInterface;</span></span>
<span class="line"><span style="color:#24292E;">    ……</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(MapperProxy&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">mapperProxy</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Proxy.</span><span style="color:#6F42C1;">newProxyInstance</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mapperInterface.</span><span style="color:#6F42C1;">getClassLoader</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Class</span><span style="color:#24292E;">[]{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mapperInterface}, mapperProxy);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(SqlSession </span><span style="color:#E36209;">sqlSession</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        MapperProxy&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; mapperProxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperProxy</span><span style="color:#24292E;">(sqlSession, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mapperInterface, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.methodCache);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(mapperProxy);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>动态代理对接口的绑定，它的作用就是生成动态代理对象（占位），而代理的方法被放到了MapperProxy中。MapperProxy里，通常会生成一个MapperMethod对象，它是通过cachedMapperMethod方法对其进行初始化的，然后执行excute方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Object proxy, Method method, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Object.class.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, args) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">cachedInvoker</span><span style="color:#E1E4E8;">(method).</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(proxy, method, args, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.sqlSession);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">var5</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionUtil.</span><span style="color:#B392F0;">unwrapThrowable</span><span style="color:#E1E4E8;">(var5);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object proxy, Method method, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Object.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">cachedInvoker</span><span style="color:#24292E;">(method).</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(proxy, method, args, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sqlSession);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">var5</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionUtil.</span><span style="color:#6F42C1;">unwrapThrowable</span><span style="color:#24292E;">(var5);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul></li><li><p>MapperMethod.#execute</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 这里用到了命令模式，最终还是通过SqlSession的实例去运行对象的sql。</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(SqlSession sqlSession, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object param;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ……</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SELECT</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.method.</span><span style="color:#B392F0;">returnsVoid</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.method.</span><span style="color:#B392F0;">hasResultHandler</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">executeWithResultHandler</span><span style="color:#E1E4E8;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.method.</span><span style="color:#B392F0;">returnsMany</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">executeForMany</span><span style="color:#E1E4E8;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.method.</span><span style="color:#B392F0;">returnsMap</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">executeForMap</span><span style="color:#E1E4E8;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.method.</span><span style="color:#B392F0;">returnsCursor</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">executeForCursor</span><span style="color:#E1E4E8;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        param </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.method.</span><span style="color:#B392F0;">convertArgsToSqlCommandParam</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">selectOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.command.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), param);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.method.</span><span style="color:#B392F0;">returnsOptional</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.method.</span><span style="color:#B392F0;">getReturnType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">()))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ……</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 这里用到了命令模式，最终还是通过SqlSession的实例去运行对象的sql。</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(SqlSession sqlSession, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">    Object result;</span></span>
<span class="line"><span style="color:#24292E;">    Object param;</span></span>
<span class="line"><span style="color:#24292E;">    ……</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SELECT</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsVoid</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">hasResultHandler</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">executeWithResultHandler</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsMany</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">executeForMany</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsMap</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">executeForMap</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsCursor</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">executeForCursor</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        param </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">convertArgsToSqlCommandParam</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">selectOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.command.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), param);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsOptional</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()))) {</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    ……</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul>`,29),e=[o];function t(c,r,E,y,i,F){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{d as __pageData,h as default};
