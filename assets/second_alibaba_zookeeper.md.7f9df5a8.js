import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8048b864.js";const k=JSON.parse('{"title":"Zookeeper","description":"","frontmatter":{},"headers":[],"relativePath":"second/alibaba/zookeeper.md","filePath":"second/alibaba/zookeeper.md","lastUpdated":1682323688000}'),p={name:"second/alibaba/zookeeper.md"},o=l(`<h1 id="zookeeper" tabindex="-1">Zookeeper <a class="header-anchor" href="#zookeeper" aria-label="Permalink to &quot;Zookeeper&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#原理">原理</a></li><li><a href="#安装">安装</a></li><li><a href="#应用">应用</a></li></ul></nav><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zookeeper在分布式系统中为集群提供注册中心来管理集群 主要采用的是 文件系统+监听通知机制 实现</span></span>
<span class="line"><span style="color:#E1E4E8;">实现分布式锁 分布式事务 分布式任务等</span></span>
<span class="line"><span style="color:#E1E4E8;">客户端监听zookeeper中节点的状态，如果节点数据发生给变，zookeeper会通过监听机制通知客户端</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zookeeper在分布式系统中为集群提供注册中心来管理集群 主要采用的是 文件系统+监听通知机制 实现</span></span>
<span class="line"><span style="color:#24292E;">实现分布式锁 分布式事务 分布式任务等</span></span>
<span class="line"><span style="color:#24292E;">客户端监听zookeeper中节点的状态，如果节点数据发生给变，zookeeper会通过监听机制通知客户端</span></span></code></pre></div><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#docker开启zookeeper</span></span>
<span class="line"><span style="color:#e1e4e8;">docker exec -it zookeeper bash</span></span>
<span class="line"><span style="color:#e1e4e8;">cd bin/</span></span>
<span class="line"><span style="color:#e1e4e8;">./zkServer.sh status</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#docker开启zookeeper</span></span>
<span class="line"><span style="color:#24292e;">docker exec -it zookeeper bash</span></span>
<span class="line"><span style="color:#24292e;">cd bin/</span></span>
<span class="line"><span style="color:#24292e;">./zkServer.sh status</span></span></code></pre></div><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h2><h4 id="zookeeper锁" tabindex="-1">Zookeeper锁 <a class="header-anchor" href="#zookeeper锁" aria-label="Permalink to &quot;Zookeeper锁&quot;">​</a></h4><blockquote><p>临时有序节点</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* ZkConfig</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZkConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CuratorFramework </span><span style="color:#B392F0;">cf</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">RetryPolicy retryPolicy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">CuratorFramework cf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CuratorFrameworkFactory.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">connectString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;192.168.136.129:2181,192.168.136.129:2182,192.168.136.129:2183&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">retryPolicy</span><span style="color:#E1E4E8;">(retryPolicy)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">cf.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cf;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* ZkConfig</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ZkConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CuratorFramework </span><span style="color:#6F42C1;">cf</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">RetryPolicy retryPolicy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">CuratorFramework cf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CuratorFrameworkFactory.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">connectString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;192.168.136.129:2181,192.168.136.129:2182,192.168.136.129:2183&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">retryPolicy</span><span style="color:#24292E;">(retryPolicy)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">cf.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cf;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//创建锁对象</span></span>
<span class="line"><span style="color:#E1E4E8;">InterProcessMutex mutex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InterProcessMutex</span><span style="color:#E1E4E8;">(cf, </span><span style="color:#9ECBFF;">&quot;/lock&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	mutex.</span><span style="color:#B392F0;">acquire</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//获取锁</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//具体业务代码...</span></span>
<span class="line"><span style="color:#E1E4E8;">	mutex.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//释放锁</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//创建锁对象</span></span>
<span class="line"><span style="color:#24292E;">InterProcessMutex mutex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InterProcessMutex</span><span style="color:#24292E;">(cf, </span><span style="color:#032F62;">&quot;/lock&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	mutex.</span><span style="color:#6F42C1;">acquire</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//获取锁</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//具体业务代码...</span></span>
<span class="line"><span style="color:#24292E;">	mutex.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//释放锁</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote>`,9),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const h=s(p,[["render",c]]);export{k as __pageData,h as default};
