import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8048b864.js";const p="/assets/image-20230403192758754.3ba53f15.png",o="/assets/image-20210912123815743.195a398c.png",h=JSON.parse('{"title":"时间分片按照消息ID查询","description":"","frontmatter":{},"headers":[],"relativePath":"books/book0003/20230807003.md","filePath":"books/book0003/20230807003.md","lastUpdated":1697176108000}'),e={name:"books/book0003/20230807003.md"},t=l('<h1 id="时间分片按照消息id查询" tabindex="-1">时间分片按照消息ID查询 <a class="header-anchor" href="#时间分片按照消息id查询" aria-label="Permalink to &quot;时间分片按照消息ID查询&quot;">​</a></h1><h2 id="业务背景" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#%E4%B8%9A%E5%8A%A1%E8%83%8C%E6%99%AF" target="_blank" rel="noreferrer">#</a>业务背景 <a class="header-anchor" href="#业务背景" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#业务背景)业务背景&quot;">​</a></h2><p>消息服务中有一张发送记录表，存储了所有消息类型的发送记录。随着时间的推移和业务的迭代，单表数据量将变得越来越大。</p><p>当 MySQL 单表数据量越大越大时，会出现以下几个危害：</p><ol><li>查询效率：随着数据量的增加，查询所需的时间也会逐渐增加，严重影响用户体验。</li><li>索引效率：对于大表而言，索引的更新、重建以及查询都会变得非常慢。</li><li>安全隐患：大表容易成为攻击者的攻击目标，例如通过 SQL 注入或者暴力破解的方式。</li><li>数据备份和恢复的难度增加：单表数据量大，备份和恢复的时间会变得很长，且对于大表进行数据恢复的难度也会增加。</li></ol><p>因此，为了避免以上的危害，我们需要对大表进行拆分，采用分库分表的方式，把数据划分到多个库表中，使得单表数据量变小，从而提高数据库的查询效率、索引效率，减小攻击面，方便数据备份和恢复，提高系统的稳定性和安全性。</p><h2 id="如何分库分表" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#%E5%A6%82%E4%BD%95%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8" target="_blank" rel="noreferrer">#</a>如何分库分表 <a class="header-anchor" href="#如何分库分表" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#如何分库分表)如何分库分表&quot;">​</a></h2><h3 id="_1-时间分片" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#_1-%E6%97%B6%E9%97%B4%E5%88%86%E7%89%87" target="_blank" rel="noreferrer">#</a>1. 时间分片 <a class="header-anchor" href="#_1-时间分片" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#_1-时间分片)1. 时间分片&quot;">​</a></h3><p>目前刚果商城中，消息服务 <code>congomall-message</code> 中消息发送记录表使用时间进行分表操作，一年分为 12 张表，一个月数据在一张表中。</p><p><img src="'+p+'" alt="img"></p><h3 id="_2-为什么不使用-hash-分片" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#_2-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BD%BF%E7%94%A8-hash-%E5%88%86%E7%89%87" target="_blank" rel="noreferrer">#</a>2. 为什么不使用 Hash 分片 <a class="header-anchor" href="#_2-为什么不使用-hash-分片" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#_2-为什么不使用-hash-分片)2. 为什么不使用 Hash 分片&quot;">​</a></h3><p>如果我开始不了解业务，看到这里的话，会有一点疑问：为什么不使用 Hash 分库分表？</p><p>在实际应用中，消息发送记录表不适合采用 Hash 分库分表，主要原因如下：</p><ol><li>无法支持时间范围查询：采用 Hash 分表后，相同的 Key 值（即哈希值）会被分配到同一个分片中，导致无法通过时间范围查询跨多个分片的数据，因为时间字段并没有参与 Hash 计算。</li><li>分布不均匀：如果采用消息 ID 作为 Hash 分表的 Key 值，由于消息 ID 一般是雪花算法生成，可能会导致数据分布不均匀，某个分片的数据量过大，而其它分片数据量很少，从而造成负载不均衡，影响系统性能。</li></ol><p>因此，对于消息发送记录表这种按照时间字段频繁查询的场景，采用按照时间字段分库分表更为合适。</p><p>通过按照时间字段进行范围查询，可以保证数据均匀分布在多个分片中，同时也可以避免 Hash 分表可能导致的数据分布不均的问题。此外，按照时间字段进行分片还能够提高查询性能，使查询更加高效。</p><h2 id="业务难题" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#%E4%B8%9A%E5%8A%A1%E9%9A%BE%E9%A2%98" target="_blank" rel="noreferrer">#</a>业务难题 <a class="header-anchor" href="#业务难题" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#业务难题)业务难题&quot;">​</a></h2><p>消息发送表照时间分库分表，每个库中的表都是按照时间字段分成多个表，后续所有查询中条件必须带上时间字段，否则会走所有真实表扫描。</p><p>如果你想查询 2023 年 1 月份的消息发送记录，那么你的条件查询参数就要带上这个日期，语句如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> send_msg </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> create_time </span><span style="color:#F97583;">BETWEEN</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2023-01-01 00:00:00&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2023-01-31 23:59:59&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> send_msg </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> create_time </span><span style="color:#D73A49;">BETWEEN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2023-01-01 00:00:00&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2023-01-31 23:59:59&#39;</span></span></code></pre></div><p>经过 ShardingSphere 对语句进行分片重组，将逻辑表改写成具体的物理表，语句如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> send_msg_2023_m1 </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> create_time </span><span style="color:#F97583;">BETWEEN</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2023-01-01 00:00:00&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2023-01-31 23:59:59&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> send_msg_2023_m1 </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> create_time </span><span style="color:#D73A49;">BETWEEN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2023-01-01 00:00:00&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2023-01-31 23:59:59&#39;</span></span></code></pre></div><p>上面说的是正常的场景，但是会存在一种很真实的问题，那就是在消息发送表未进行分表前，曾经提供出去过按照消息 ID 查询的条件。</p><p>咱们模拟下如果查询分片表不带分片键会发生什么事情？</p><p>用户期望的执行语句是:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> send_msg </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> msg_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> send_msg </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> msg_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span></span></code></pre></div><p>但是实际执行会变成查询所有物理分表：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> send_msg_2022_m1 </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> msg_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">UNION ALL</span></span>\n<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> send_msg_2022_m2 </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> msg_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">UNION ALL</span></span>\n<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> send_msg_2022_m3 </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> msg_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">UNION ALL</span></span>\n<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> send_msg_2022_m4 </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> msg_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">UNION ALL</span></span>\n<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> send_msg_xxxx_mx </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> msg_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> send_msg_2022_m1 </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> msg_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">UNION ALL</span></span>\n<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> send_msg_2022_m2 </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> msg_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">UNION ALL</span></span>\n<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> send_msg_2022_m3 </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> msg_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">UNION ALL</span></span>\n<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> send_msg_2022_m4 </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> msg_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">UNION ALL</span></span>\n<span class="line"><span style="color:#D73A49;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> send_msg_xxxx_mx </span><span style="color:#D73A49;">WHERE</span><span style="color:#24292E;"> msg_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span></span></code></pre></div><p>这种执行是一种性能深渊，基本上结果查询出来，接口也超时了。如果遇到大批量调用，极有可能把数据库查崩了。</p><p>那如何解决这种问题呢？</p><h3 id="_1-映射表" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#_1-%E6%98%A0%E5%B0%84%E8%A1%A8" target="_blank" rel="noreferrer">#</a>1. 映射表 <a class="header-anchor" href="#_1-映射表" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#_1-映射表)1. 映射表&quot;">​</a></h3><p>将消息 ID 根据时间戳映射到对应的时间表中进行查询，按照月分表，消息 ID 为 t，则可以通过 t%12 得到对应的表名，然后在该表中进行查询。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> `</span><span style="color:#B392F0;">send_msg_relation</span><span style="color:#E1E4E8;">` (</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">`id`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bigint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">NOT NULL</span><span style="color:#E1E4E8;"> AUTO_INCREMENT COMMENT </span><span style="color:#9ECBFF;">&#39;ID&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">`send_msg_id`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bigint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">DEFAULT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">NULL</span><span style="color:#E1E4E8;"> COMMENT </span><span style="color:#9ECBFF;">&#39;消息ID&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">`create_time`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">datetime</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DEFAULT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">NULL</span><span style="color:#E1E4E8;"> COMMENT </span><span style="color:#9ECBFF;">&#39;创建时间&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">PRIMARY KEY</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">`id`</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">UNIQUE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">KEY</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`id`</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">`id`</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">) ENGINE</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">InnoDB </span><span style="color:#F97583;">DEFAULT</span><span style="color:#E1E4E8;"> CHARSET</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">utf8mb4;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> `</span><span style="color:#6F42C1;">send_msg_relation</span><span style="color:#24292E;">` (</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">`id`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bigint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">NOT NULL</span><span style="color:#24292E;"> AUTO_INCREMENT COMMENT </span><span style="color:#032F62;">&#39;ID&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">`send_msg_id`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bigint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">DEFAULT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NULL</span><span style="color:#24292E;"> COMMENT </span><span style="color:#032F62;">&#39;消息ID&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">`create_time`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">datetime</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DEFAULT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NULL</span><span style="color:#24292E;"> COMMENT </span><span style="color:#032F62;">&#39;创建时间&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">PRIMARY KEY</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">`id`</span><span style="color:#24292E;">),</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">UNIQUE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">KEY</span><span style="color:#24292E;"> </span><span style="color:#032F62;">`id`</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">`id`</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">) ENGINE</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">InnoDB </span><span style="color:#D73A49;">DEFAULT</span><span style="color:#24292E;"> CHARSET</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">utf8mb4;</span></span></code></pre></div><p>这样的查询效率比较高，但是需要维护消息 ID 和时间表的映射关系，同时需要处理跨表查询的问题。</p><p>而且，时间映射表还存在两个比较明显的缺点：</p><ol><li>维护映射表，增加了额外的存储和维护成本。</li><li>数据库查询由之前的一次变成两次，增加了时间查询成本。</li></ol><p>有没有一种既能高效查询，又不需要创建映射表的解决方案？</p><h3 id="_2-雪花算法" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#_2-%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">#</a>2. 雪花算法 <a class="header-anchor" href="#_2-雪花算法" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#_2-雪花算法)2. 雪花算法&quot;">​</a></h3><p>Snowflake 中文的意思是雪花，所以常被称为雪花算法，是 Twitter 开源的分布式 ID 生成算法。</p><p>Twitter 雪花算法生成后是一个 64bit 的 long 型的数值，组成部分引入了时间戳，基本保持了自增。</p><p><img src="'+o+`" alt="img"></p><p>从雪花算法组成部分可以看出，其中包含完整的时间戳。因此，我们可以通过反解析消息 ID 来获取时间戳，并以此作为查询条件来查询对应的创建时间。</p><p>大胆设想，细心求证，接下来我们进行反解析试试。</p><p>核心原理就是通过位移将对应位数拿到，并取出我们想要的参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SnowflakeIdInfo </span><span style="color:#B392F0;">parseSnowflakeId</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> snowflakeId) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    SnowflakeIdInfo snowflakeIdInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SnowflakeIdInfo.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">workerId</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) ((snowflakeId </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> WORKER_ID_SHIFT) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> WORKER_ID_BITS)))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">dataCenterId</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) ((snowflakeId </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> DATA_CENTER_ID_SHIFT) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> DATA_CENTER_ID_BITS)))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">timestamp</span><span style="color:#E1E4E8;">((snowflakeId </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> TIMESTAMP_LEFT_SHIFT) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> DEFAULT_TWEPOCH)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">sequence</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) ((snowflakeId </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> SEQUENCE_BIZ_BITS) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> SEQUENCE_ACTUAL_BITS)))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">gene</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) (snowflakeId </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> SEQUENCE_BIZ_BITS)))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> snowflakeIdInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SnowflakeIdInfo </span><span style="color:#6F42C1;">parseSnowflakeId</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> snowflakeId) {</span></span>
<span class="line"><span style="color:#24292E;">    SnowflakeIdInfo snowflakeIdInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SnowflakeIdInfo.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">workerId</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) ((snowflakeId </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> WORKER_ID_SHIFT) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> WORKER_ID_BITS)))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">dataCenterId</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) ((snowflakeId </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> DATA_CENTER_ID_SHIFT) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> DATA_CENTER_ID_BITS)))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">timestamp</span><span style="color:#24292E;">((snowflakeId </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> TIMESTAMP_LEFT_SHIFT) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> DEFAULT_TWEPOCH)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">sequence</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) ((snowflakeId </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> SEQUENCE_BIZ_BITS) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> SEQUENCE_ACTUAL_BITS)))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">gene</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) (snowflakeId </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> SEQUENCE_BIZ_BITS)))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> snowflakeIdInfo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码位置：</p><ul><li><code>org.opengoofy.congomall.springboot.starter.distributedid.core.serviceid.DefaultServiceIdGenerator#parseSnowflakeId</code></li></ul><p>可以尝试编写一个单元测试，以确保从消息 ID 中获取的时间戳参数是正确的，并且能够将其转换为对应的创建时间。这个测试可以包含以下步骤：</p><ol><li>创建一个测试用例，生成一个随机的消息 ID。</li><li>使用雪花算法从消息 ID 中解析出时间戳参数。</li><li>将时间戳参数转换为对应的创建时间，并查询数据库获取该消息的创建时间。</li><li>验证转换后的创建时间与查询到的创建时间是否一致。</li></ol><p>如果测试通过，就可以确保按照时间分库分表，并利用消息 ID 进行查询时，能够正确获取对应的创建时间，避免了查询扩散问题。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseSnowflakeId</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Snowflake snowflake </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Snowflake</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    SnowflakeIdUtil.</span><span style="color:#B392F0;">initSnowflake</span><span style="color:#E1E4E8;">(snowflake);</span></span>
<span class="line"><span style="color:#E1E4E8;">    DefaultServiceIdGenerator defaultServiceIdGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultServiceIdGenerator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> nextId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultServiceIdGenerator.</span><span style="color:#B392F0;">nextId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    SnowflakeIdInfo snowflakeIdInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultServiceIdGenerator.</span><span style="color:#B392F0;">parseSnowflakeId</span><span style="color:#E1E4E8;">(nextId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(snowflakeIdInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * SnowflakeIdInfo(timestamp=1288834974657, workerId=0, dataCenterId=0, sequence=0, gene=0)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseSnowflakeId</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Snowflake snowflake </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Snowflake</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    SnowflakeIdUtil.</span><span style="color:#6F42C1;">initSnowflake</span><span style="color:#24292E;">(snowflake);</span></span>
<span class="line"><span style="color:#24292E;">    DefaultServiceIdGenerator defaultServiceIdGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultServiceIdGenerator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> nextId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultServiceIdGenerator.</span><span style="color:#6F42C1;">nextId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    SnowflakeIdInfo snowflakeIdInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultServiceIdGenerator.</span><span style="color:#6F42C1;">parseSnowflakeId</span><span style="color:#24292E;">(nextId);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(snowflakeIdInfo);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * SnowflakeIdInfo(timestamp=1288834974657, workerId=0, dataCenterId=0, sequence=0, gene=0)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre></div><p>测试成功，成功获取了时间戳参数，接下来我们可以利用该时间戳参数获取具体的时间信息，并通过创建时间字段进行查询。</p><h2 id="自定义分片算法" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E7%89%87%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">#</a>自定义分片算法 <a class="header-anchor" href="#自定义分片算法" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#自定义分片算法)自定义分片算法&quot;">​</a></h2><p>可以考虑以下步骤实现该逻辑：</p><ol><li>ShardingSphere 自定义复合分片算法，将 <code>msg_id</code> 和 <code>create_time</code> 作为分片键。</li><li>通过查询参数消息 ID 拿到雪花算法中的时间戳参数。</li><li>将时间戳参数转换为具体的时间，可以使用类似 <code>new Date(timestamp)</code> 的方式。</li><li>将时间参数作为条件，查询分库分表后的目标表中的创建时间字段，可以使用类似 <code>SELECT * FROM table WHERE create_time = &#39;2022-01-01 00:00:00&#39;</code> 的方式。</li><li>如果存在多个分表，需要根据消息 ID 和时间戳参数计算出目标表所在的分表，然后在该分表中进行查询操作。</li></ol><p>通过上述步骤，就可以实现按照消息 ID 查询分库分表后的目标表了。</p><h3 id="_1-分片算法实现" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#_1-%E5%88%86%E7%89%87%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">#</a>1. 分片算法实现 <a class="header-anchor" href="#_1-分片算法实现" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#_1-分片算法实现)1. 分片算法实现&quot;">​</a></h3><p>ShardingSphere 分片算法包括单分片算法和复合分片算法，前者适用于单个字段分片，后者适用于多个字段分片。</p><p>对于需要使用 <code>msg_id</code> 和 <code>create_time</code> 作为分片键的情况，需要采用复合分片算法。</p><p>由于内置的分片算法无法满足特殊场景，因此需要自定义复合分片算法。</p><p>ShardingSphere 对 SQL 进行分片的执行流程可以简单概括为以下几个步骤：</p><ol><li>解析 SQL：将 SQL 解析成逻辑 SQL 对象，包括 SQL 的类型、表名、字段等信息。</li><li>路由 SQL：根据逻辑 SQL 对象中的表名和分片键等信息，决定将 SQL 发送给哪些数据库进行执行。这个过程就是分片路由，分片路由的结果是一组具体的数据节点列表。</li><li>合并结果：将分片路由得到的 SQL 分发给各个数据节点执行，然后将结果合并起来，得到最终的结果。</li><li>返回结果：将最终结果返回给应用程序。</li></ol><p>需要注意的是，在分片路由的过程中，ShardingSphere 还会对 SQL 进行一些额外的处理，比如计算分片键的值、将分片键的值转化成数据节点的名称等。这些额外的处理都是为了准确地将 SQL 发送到目标数据节点，确保 SQL 能够被正确地执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> org.opengoofy.congomall.biz.message.infrastructure.algorithm;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> cn.hutool.core.collection.CollUtil;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.google.common.collect.Range;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.opengoofy.congomall.springboot.starter.distributedid.SnowflakeIdUtil;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Collection;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Date;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.LinkedHashSet;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Map;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Properties;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 自定义分片算法</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SnowflakeDateShardingAlgorithm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ComplexKeysShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Date</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(Collection </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, ComplexKeysShardingValue </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String messageSendId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;msg_id&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sendTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;create_time&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String logicTableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingValue.</span><span style="color:#B392F0;">getLogicTableName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Collection&lt;Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt;&gt; columnNameAndShardingValuesMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingValue.</span><span style="color:#B392F0;">getColumnNameAndShardingValuesMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Range&lt;Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt;&gt; columnNameAndRangeValuesMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingValue.</span><span style="color:#B392F0;">getColumnNameAndRangeValuesMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashSet&lt;&gt;(availableTargetNames.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollUtil.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(columnNameAndShardingValuesMap)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Collection&lt;Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; sendTimeCollection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> columnNameAndShardingValuesMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(sendTime);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollUtil.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(sendTimeCollection)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; comparable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sendTimeCollection.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findFirst</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                String actualTable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ShardModel.</span><span style="color:#B392F0;">quarterlyModel</span><span style="color:#E1E4E8;">(logicTableName, (Date) comparable);</span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(actualTable);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Collection&lt;Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; messageSendIdCollection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> columnNameAndShardingValuesMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(messageSendId);</span></span>
<span class="line"><span style="color:#E1E4E8;">                Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; comparable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> messageSendIdCollection.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findFirst</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                String actualTable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ShardModel.</span><span style="color:#B392F0;">quarterlyModel</span><span style="color:#E1E4E8;">(logicTableName, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(SnowflakeIdUtil.</span><span style="color:#B392F0;">parseSnowflakeId</span><span style="color:#E1E4E8;">(((Long) comparable)).</span><span style="color:#B392F0;">getTimestamp</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(actualTable);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Range&lt;Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; sendTimeRange </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> columnNameAndRangeValuesMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(sendTime);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sendTimeRange </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; actualTables </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ShardModel.</span><span style="color:#B392F0;">calculateRange</span><span style="color:#E1E4E8;">(logicTableName, (Date) sendTimeRange.</span><span style="color:#B392F0;">lowerEndpoint</span><span style="color:#E1E4E8;">(), (Date) sendTimeRange.</span><span style="color:#B392F0;">upperEndpoint</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(actualTables);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(availableTargetNames);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Properties </span><span style="color:#B392F0;">getProps</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(Properties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;CLASS_BASED&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> org.opengoofy.congomall.biz.message.infrastructure.algorithm;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.hutool.core.collection.CollUtil;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.google.common.collect.Range;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.opengoofy.congomall.springboot.starter.distributedid.SnowflakeIdUtil;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Collection;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Date;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.LinkedHashSet;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Map;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Properties;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 自定义分片算法</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SnowflakeDateShardingAlgorithm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ComplexKeysShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Date</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(Collection </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, ComplexKeysShardingValue </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String messageSendId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;msg_id&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sendTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;create_time&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String logicTableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingValue.</span><span style="color:#6F42C1;">getLogicTableName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Collection&lt;Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt;&gt; columnNameAndShardingValuesMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingValue.</span><span style="color:#6F42C1;">getColumnNameAndShardingValuesMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Range&lt;Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt;&gt; columnNameAndRangeValuesMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingValue.</span><span style="color:#6F42C1;">getColumnNameAndRangeValuesMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashSet&lt;&gt;(availableTargetNames.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollUtil.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(columnNameAndShardingValuesMap)) {</span></span>
<span class="line"><span style="color:#24292E;">            Collection&lt;Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; sendTimeCollection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> columnNameAndShardingValuesMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(sendTime);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollUtil.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(sendTimeCollection)) {</span></span>
<span class="line"><span style="color:#24292E;">                Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; comparable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sendTimeCollection.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findFirst</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                String actualTable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ShardModel.</span><span style="color:#6F42C1;">quarterlyModel</span><span style="color:#24292E;">(logicTableName, (Date) comparable);</span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(actualTable);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Collection&lt;Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; messageSendIdCollection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> columnNameAndShardingValuesMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(messageSendId);</span></span>
<span class="line"><span style="color:#24292E;">                Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; comparable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> messageSendIdCollection.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findFirst</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                String actualTable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ShardModel.</span><span style="color:#6F42C1;">quarterlyModel</span><span style="color:#24292E;">(logicTableName, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(SnowflakeIdUtil.</span><span style="color:#6F42C1;">parseSnowflakeId</span><span style="color:#24292E;">(((Long) comparable)).</span><span style="color:#6F42C1;">getTimestamp</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(actualTable);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Range&lt;Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; sendTimeRange </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> columnNameAndRangeValuesMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(sendTime);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sendTimeRange </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; actualTables </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ShardModel.</span><span style="color:#6F42C1;">calculateRange</span><span style="color:#24292E;">(logicTableName, (Date) sendTimeRange.</span><span style="color:#6F42C1;">lowerEndpoint</span><span style="color:#24292E;">(), (Date) sendTimeRange.</span><span style="color:#6F42C1;">upperEndpoint</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(actualTables);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(availableTargetNames);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Properties </span><span style="color:#6F42C1;">getProps</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(Properties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;CLASS_BASED&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-分片配置" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#_2-%E5%88%86%E7%89%87%E9%85%8D%E7%BD%AE" target="_blank" rel="noreferrer">#</a>2. 分片配置 <a class="header-anchor" href="#_2-分片配置" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#_2-分片配置)2. 分片配置&quot;">​</a></h3><p>完成自定义分片算法后，需要将其与 ShardingSphere 进行集成，并在 ShardingSphere 的配置文件中设置相应的分片规则。</p><p>接下来，可以编写一个简单的测试程序，通过向分片表中插入数据和根据消息 ID 查询数据的方式，来验证分片算法的正确性和可用性。如果测试成功，就可以使用该分片算法来对大表进行分库分表，并实现更高效的数据查询和管理。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">shardingsphere</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">datasource</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">ds-0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">driver-class-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">names</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ds-0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">props</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">sql-show</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">rules</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">sharding</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">sharding-algorithms</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">snowflake_date_algorithm</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">props</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">algorithmClassName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">org.opengoofy.congomall.biz.message.infrastructure.algorithm.SnowflakeDateShardingAlgorithm</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">strategy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">complex</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">CLASS_BASED</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">tables</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">send_record</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">actual-data-nodes</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ds-0.send_msg_$-&gt;{2023..2026}_m$-&gt;{1..12}</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">table-strategy</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">complex</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">sharding-algorithm-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">snowflake_date_algorithm</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">sharding-columns</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">create_time,msg_id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">shardingsphere</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">datasource</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">ds-0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">driver-class-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">names</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ds-0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">props</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">sql-show</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">rules</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">sharding</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">sharding-algorithms</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">snowflake_date_algorithm</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">props</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">algorithmClassName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">org.opengoofy.congomall.biz.message.infrastructure.algorithm.SnowflakeDateShardingAlgorithm</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">strategy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">complex</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">CLASS_BASED</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">tables</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">send_record</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">actual-data-nodes</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ds-0.send_msg_$-&gt;{2023..2026}_m$-&gt;{1..12}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">table-strategy</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">complex</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">sharding-algorithm-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">snowflake_date_algorithm</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">sharding-columns</span><span style="color:#24292E;">: </span><span style="color:#032F62;">create_time,msg_id</span></span></code></pre></div><h2 id="验证分库分表" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#%E9%AA%8C%E8%AF%81%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8" target="_blank" rel="noreferrer">#</a>验证分库分表 <a class="header-anchor" href="#验证分库分表" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#验证分库分表)验证分库分表&quot;">​</a></h2><h3 id="_1-按照时间查询" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#_1-%E6%8C%89%E7%85%A7%E6%97%B6%E9%97%B4%E6%9F%A5%E8%AF%A2" target="_blank" rel="noreferrer">#</a>1. 按照时间查询 <a class="header-anchor" href="#_1-按照时间查询" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#_1-按照时间查询)1. 按照时间查询&quot;">​</a></h3><p>调用 Apifox 在线接口消息中心目录下-根据条件查询发送结果，在数据库中找到一条记录，假设你找的是 <code>send_record_2023_m4</code>，那么接口入参传递以下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;startTime&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2023-04-01 00:00:00&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;endTime&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2023-04-30 00:00:00&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;receiverList&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;这个替换成数据库记录 {receiver}&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;startTime&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2023-04-01 00:00:00&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;endTime&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2023-04-30 00:00:00&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;receiverList&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;这个替换成数据库记录 {receiver}&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ShardingSphere 生成的真实 SQL 如下：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">SELECT  id,msg_id AS messageSendId,template_id,msg_type,sender,receiver,cc,status,send_time,create_time,update_time,del_flag  FROM send_record_2023_m4 </span></span>
<span class="line"><span style="color:#e1e4e8;"> WHERE  del_flag=0</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">AND (create_time BETWEEN ? AND ? AND receiver IN (?)) ::: [2023-04-01 00:00:00.0, 2023-04-30 00:00:00.0, m7798432@163.com]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">SELECT  id,msg_id AS messageSendId,template_id,msg_type,sender,receiver,cc,status,send_time,create_time,update_time,del_flag  FROM send_record_2023_m4 </span></span>
<span class="line"><span style="color:#24292e;"> WHERE  del_flag=0</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">AND (create_time BETWEEN ? AND ? AND receiver IN (?)) ::: [2023-04-01 00:00:00.0, 2023-04-30 00:00:00.0, m7798432@163.com]</span></span></code></pre></div><p>该 Case 成功通过测试，我们可以看到 ShardingSphere 分片规则已经将创建时间字段正确地路由到了对应的真实表中。</p><h3 id="_2-按照消息-id-查询" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#_2-%E6%8C%89%E7%85%A7%E6%B6%88%E6%81%AF-id-%E6%9F%A5%E8%AF%A2" target="_blank" rel="noreferrer">#</a>2. 按照消息 ID 查询 <a class="header-anchor" href="#_2-按照消息-id-查询" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#_2-按照消息-id-查询)2. 按照消息 ID 查询&quot;">​</a></h3><p>调用 Apifox 在线接口消息中心目录下-根据消息发送ID查询发送结果，在数据库中找到随意一个消息发送 ID，拼接到 result 路径后 <code>http://localhost:8001/api/message/result/{messageSendId}</code>。</p><p>ShardingSphere 生成的真实 SQL 如下：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Actual SQL: ds-0 ::: SELECT  id,msg_id AS messageSendId,template_id,msg_type,sender,receiver,cc,status,send_time,create_time,update_time,del_flag  FROM send_record_2023_m4 </span></span>
<span class="line"><span style="color:#e1e4e8;"> WHERE  del_flag=0</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">AND (msg_id IN (?)) ::: [1643084443437445120]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Actual SQL: ds-0 ::: SELECT  id,msg_id AS messageSendId,template_id,msg_type,sender,receiver,cc,status,send_time,create_time,update_time,del_flag  FROM send_record_2023_m4 </span></span>
<span class="line"><span style="color:#24292e;"> WHERE  del_flag=0</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">AND (msg_id IN (?)) ::: [1643084443437445120]</span></span></code></pre></div><p>使用消息 ID <code>1643084443437445120</code> 进行时间戳解析，成功定位到数据库真实表 <code>send_record_2023_m4</code> 并完成期望的查询。</p><h2 id="文末总结" tabindex="-1"><a href="https://magestack.cn/pages/d57aee/#%E6%96%87%E6%9C%AB%E6%80%BB%E7%BB%93" target="_blank" rel="noreferrer">#</a>文末总结 <a class="header-anchor" href="#文末总结" aria-label="Permalink to &quot;[#](https://magestack.cn/pages/d57aee/#文末总结)文末总结&quot;">​</a></h2><p>通过本文的介绍，我们了解了如何通过 ShardingSphere 对消息发送记录表按照时间进行分库分表操作，并通过解析消息 ID 雪花算法中时间戳组成部分，可以依据消息 ID 高效分片查询。具体流程如下：</p><ol><li>首先，我们需要对消息发送记录表按照时间进行分库分表操作，并将消息 ID 和创建时间作为分片键。</li><li>接着，我们需要使用自定义复合分片算法，将消息 ID 和创建时间按照一定规则映射到不同的数据库和数据表中。</li><li>在查询时，我们可以通过解析消息 ID 雪花算法中时间戳组成部分，获得创建时间，再根据创建时间进行查询，从而避免了查询扩散问题。</li></ol><p>综上所述，使用 ShardingSphere 对消息发送记录表进行分库分表操作，并结合消息 ID 解析雪花算法中的时间戳组成部分，可以实现高效的分片查询，从而提高数据库的性能和扩展性。</p>`,84),c=[t];function r(E,y,i,d,g,m){return a(),n("div",null,c)}const A=s(e,[["render",r]]);export{h as __pageData,A as default};
