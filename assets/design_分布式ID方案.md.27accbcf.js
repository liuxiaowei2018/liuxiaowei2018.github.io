import{_ as s,c as a,o as n,N as l}from"./chunks/framework.0799945b.js";const e="/assets/image-20220402183702419.da594124.png",h=JSON.parse('{"title":"架构设计","description":"","frontmatter":{},"headers":[],"relativePath":"design/分布式ID方案.md"}'),o={name:"design/分布式ID方案.md"},p=l('<h1 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h1><h2 id="分布式id方案" tabindex="-1">分布式ID方案 <a class="header-anchor" href="#分布式id方案" aria-label="Permalink to &quot;分布式ID方案&quot;">​</a></h2><blockquote><p>ID是数据的唯一标识，传统的做法是利用UUID和数据库的自增ID，在互联网企业中，大部分公司使用的都是Mysql，并且因为需要事务支持，所以通常会使用Innodb存储引擎，UUID太长以及无序，所以并不适合在Innodb中来作为主键，自增ID比较合适，但是随着公司的业务发展，数据量将越来越大，需要对数据进行分表，而分表后，每个表中的数据都会按自己的节奏进行自增，很有可能出现ID冲突。这时就需要一个单独的机制来负责生成唯一ID，生成出来的ID也可以叫做分布式ID</p></blockquote><p><img src="'+e+`" alt="image-20220402183702419"></p><h3 id="数据库自增id" tabindex="-1">数据库自增ID <a class="header-anchor" href="#数据库自增id" aria-label="Permalink to &quot;数据库自增ID&quot;">​</a></h3><p>需要单独一个数据库实例，创建表结构如下：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">DATABASE</span><span style="color:#A6ACCD;"> \`</span><span style="color:#82AAFF;">SEQID</span><span style="color:#A6ACCD;">\`;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SEQID</span><span style="color:#A6ACCD;">.SEQUENCE_ID (</span></span>
<span class="line"><span style="color:#A6ACCD;">	id </span><span style="color:#C792EA;">bigint</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">) unsigned </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;"> auto_increment, </span></span>
<span class="line"><span style="color:#A6ACCD;">	stub </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">PRIMARY KEY</span><span style="color:#A6ACCD;"> (id),</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">UNIQUE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">KEY</span><span style="color:#A6ACCD;"> stub (stub)</span></span>
<span class="line"><span style="color:#A6ACCD;">) ENGINE</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">MyISAM;</span></span></code></pre></div><p>获取自增id:</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">begin</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">replace </span><span style="color:#F78C6C;">into</span><span style="color:#A6ACCD;"> SEQUENCE_ID (stub) </span><span style="color:#F78C6C;">VALUES</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">anyword</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> last_insert_id</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#F78C6C;">commit</span><span style="color:#A6ACCD;">;</span></span></code></pre></div><p>stub字段在这里并没有什么特殊的意义，只是为了方便的去插入数据，只有能插入数据才能产生自增id。而对于插入我们用的是replace，replace会先看是否存在stub指定值一样的数据，如果存在则先delete再insert，如果不存在则直接insert。</p><p>这种生成分布式ID的机制，需要一个单独的Mysql实例，虽然可行，但是基于性能与可靠性来考虑的话都不够，业务系统每次需要一个ID时，都需要请求数据库获取，性能低，并且如果此数据库实例下线了，那么将影响所有的业务系统。</p><h3 id="数据库多主模式" tabindex="-1">数据库多主模式 <a class="header-anchor" href="#数据库多主模式" aria-label="Permalink to &quot;数据库多主模式&quot;">​</a></h3><h3 id="号段模式" tabindex="-1">号段模式 <a class="header-anchor" href="#号段模式" aria-label="Permalink to &quot;号段模式&quot;">​</a></h3><h3 id="雪花算法" tabindex="-1">雪花算法 <a class="header-anchor" href="#雪花算法" aria-label="Permalink to &quot;雪花算法&quot;">​</a></h3><h4 id="百度-uid-generator" tabindex="-1">百度-uid-generator <a class="header-anchor" href="#百度-uid-generator" aria-label="Permalink to &quot;百度-uid-generator&quot;">​</a></h4><h4 id="美团-leaf" tabindex="-1">美团-Leaf <a class="header-anchor" href="#美团-leaf" aria-label="Permalink to &quot;美团-Leaf&quot;">​</a></h4><h3 id="redis自增id" tabindex="-1">Redis自增ID <a class="header-anchor" href="#redis自增id" aria-label="Permalink to &quot;Redis自增ID&quot;">​</a></h3>`,17),t=[p];function r(c,i,C,A,d,D){return n(),a("div",null,t)}const u=s(o,[["render",r]]);export{h as __pageData,u as default};
