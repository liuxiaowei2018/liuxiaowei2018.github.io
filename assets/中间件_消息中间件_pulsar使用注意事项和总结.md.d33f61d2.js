import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.8048b864.js";const g=JSON.parse('{"title":"Pulsar使用注意事项和总结","description":"","frontmatter":{},"headers":[],"relativePath":"中间件/消息中间件/pulsar使用注意事项和总结.md","filePath":"中间件/消息中间件/pulsar使用注意事项和总结.md","lastUpdated":1718873649000}'),p={name:"中间件/消息中间件/pulsar使用注意事项和总结.md"},o=l(`<h1 id="pulsar使用注意事项和总结" tabindex="-1">Pulsar使用注意事项和总结 <a class="header-anchor" href="#pulsar使用注意事项和总结" aria-label="Permalink to &quot;Pulsar使用注意事项和总结&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#使用注意事项和总结">使用注意事项和总结</a><ul><li><a href="#集成-started">集成 started</a></li></ul></li></ul></nav><h2 id="使用注意事项和总结" tabindex="-1">使用注意事项和总结 <a class="header-anchor" href="#使用注意事项和总结" aria-label="Permalink to &quot;使用注意事项和总结&quot;">​</a></h2><h3 id="集成-started" tabindex="-1">集成 started <a class="header-anchor" href="#集成-started" aria-label="Permalink to &quot;集成 started&quot;">​</a></h3><p><code>maven</code></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.pulsar&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;pulsar-client&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;3.0.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.pulsar&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;pulsar-client&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;3.0.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>实例化一个<code>PulsarClient</code>对象，只需要为pulsar集群提供一个URL，如下所示:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PulsarClient client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PulsarClient.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">serviceUrl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pulsar://localhost:6650&quot;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PulsarClient client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PulsarClient.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">serviceUrl</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pulsar://localhost:6650&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><p>有多个代理，启动如下:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PulsarClient client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PulsarClient.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">serviceUrl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pulsar://localhost:6650,localhost:6651,localhost:6652&quot;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PulsarClient client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PulsarClient.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">serviceUrl</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pulsar://localhost:6650,localhost:6651,localhost:6652&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><p><code>producer</code></p><p>实例化PulsarClient对象之后，就可以为特定的<code>topic</code>创建一个<code>Producer</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java复制代码Producer</span><span style="color:#F97583;">&lt;byte</span><span style="color:#E1E4E8;">[]</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> producer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">newProducer</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my-topic&quot;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#6A737D;">// You can then send messages to the broker and topic you specified:  </span></span>
<span class="line"><span style="color:#E1E4E8;">producer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My message&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java复制代码Producer</span><span style="color:#D73A49;">&lt;byte</span><span style="color:#24292E;">[]</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">newProducer</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my-topic&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">// You can then send messages to the broker and topic you specified:  </span></span>
<span class="line"><span style="color:#24292E;">producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My message&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span></code></pre></div><blockquote><p>默认情况下，producer生成由字节数组组成的消息。您可以通过指定消息模式来生成不同的类型，后面会详细介绍schema的定义。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 指定消息类型为String</span></span>
<span class="line"><span style="color:#E1E4E8;">Producer&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; stringProducer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">newProducer</span><span style="color:#E1E4E8;">(Schema.STRING)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my-topic&quot;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">stringProducer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My message&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 指定消息类型为String</span></span>
<span class="line"><span style="color:#24292E;">Producer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; stringProducer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">newProducer</span><span style="color:#24292E;">(Schema.STRING)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my-topic&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">stringProducer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My message&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>如果不需要时，请确保关闭他们。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">producer.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">consumer.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">client.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//也可以异步关闭</span></span>
<span class="line"><span style="color:#E1E4E8;">producer.</span><span style="color:#B392F0;">closeAsync</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">thenRun</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Producer closed&quot;</span><span style="color:#E1E4E8;">))  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exceptionally</span><span style="color:#E1E4E8;">((ex) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to close producer: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ex);  </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;  </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">producer.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">consumer.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">client.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//也可以异步关闭</span></span>
<span class="line"><span style="color:#24292E;">producer.</span><span style="color:#6F42C1;">closeAsync</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">thenRun</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Producer closed&quot;</span><span style="color:#24292E;">))  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exceptionally</span><span style="color:#24292E;">((ex) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to close producer: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ex);  </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>consumer</code></p><p>在Pulsar中，消费者订阅主题并处理生产者发布到这些主题的消息。您可以通过首先实例化PulsarClient对象并创建一个新的消费者。</p><p>在实例化了PulsarClient对象之后，可以通过指定主题和订阅名来创建Consumer。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Consumer consumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">newConsumer</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my-topic&quot;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">subscriptionName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my-subscription&quot;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Consumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">newConsumer</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my-topic&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">subscriptionName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my-subscription&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">();</span></span></code></pre></div><p><code>subscribe</code>将自动订阅消费者指定的<code>topic</code>。可以设置一个while循环来持续监听消息。在下面这个示例中，打印counser接收到的任何消息的内容，然后确认消息已被处理（<code>acknowledgment</code>）。如果处理逻辑失败，您可以使用<code>negative acknowledgment</code>稍后重新传递消息</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Wait for a message  </span></span>
<span class="line"><span style="color:#E1E4E8;">    Message msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> consumer.</span><span style="color:#B392F0;">receive</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Do something with the message  </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Message received: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(msg.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">()));  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Acknowledge the message  </span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">acknowledge</span><span style="color:#E1E4E8;">(msg);  </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Message failed to process, redeliver later  </span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">negativeAcknowledge</span><span style="color:#E1E4E8;">(msg);  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }  </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Wait for a message  </span></span>
<span class="line"><span style="color:#24292E;">    Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> consumer.</span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">();  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Do something with the message  </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Message received: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">()));  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Acknowledge the message  </span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">acknowledge</span><span style="color:#24292E;">(msg);  </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Message failed to process, redeliver later  </span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">negativeAcknowledge</span><span style="color:#24292E;">(msg);  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果不想阻塞主线程，但又不断地监听新消息，可以考虑使用<code>MessageListener</code>。<code>MessageListener</code>使用客户机内部的线程池。您可以在ClientBuilder中设置消息侦听器的线程数。<strong>MessageListener将使用PulsarClient内部的线程池</strong>。您可以在ClientBuilder中设置用于消息侦听器的线程数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">MessageListener myMessageListener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (consumer, msg) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Message received: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(msg.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">()));  </span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">acknowledge</span><span style="color:#E1E4E8;">(msg);  </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">negativeAcknowledge</span><span style="color:#E1E4E8;">(msg);  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }  </span></span>
<span class="line"><span style="color:#E1E4E8;">}  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">Consumer consumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">newConsumer</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my-topic&quot;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">subscriptionName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my-subscription&quot;</span><span style="color:#E1E4E8;">)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">messageListener</span><span style="color:#E1E4E8;">(myMessageListener)  </span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">MessageListener myMessageListener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (consumer, msg) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Message received: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">()));  </span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">acknowledge</span><span style="color:#24292E;">(msg);  </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">negativeAcknowledge</span><span style="color:#24292E;">(msg);  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">Consumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">newConsumer</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my-topic&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">subscriptionName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my-subscription&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">messageListener</span><span style="color:#24292E;">(myMessageListener)  </span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">();</span></span></code></pre></div><p><code>reader</code></p><p>通过<code>reader</code>接口，pulsar客户端可以在主题中“手动定位”自己，并从指定的消息中读取所有消息。Java的Pulsar API允许您通过指定主题和<code>MessageId</code>来创建Reader对象。</p><p>示例如下:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Some message ID byte array  </span></span>
<span class="line"><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] msgIdBytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MessageId id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MessageId.</span><span style="color:#B392F0;">fromByteArray</span><span style="color:#E1E4E8;">(msgIdBytes);  </span></span>
<span class="line"><span style="color:#E1E4E8;">Reader reader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pulsarClient.</span><span style="color:#B392F0;">newReader</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(topic)  </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">startMessageId</span><span style="color:#E1E4E8;">(id)  </span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    Message message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reader.</span><span style="color:#B392F0;">readNext</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Process message  </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Some message ID byte array  </span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] msgIdBytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MessageId id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MessageId.</span><span style="color:#6F42C1;">fromByteArray</span><span style="color:#24292E;">(msgIdBytes);  </span></span>
<span class="line"><span style="color:#24292E;">Reader reader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pulsarClient.</span><span style="color:#6F42C1;">newReader</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(topic)  </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">startMessageId</span><span style="color:#24292E;">(id)  </span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">    Message message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reader.</span><span style="color:#6F42C1;">readNext</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Process message  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的例子中，为特定的Topic(按message ID)实例化了一个Reader对象,<code>reader</code>遍历主题中的每条消息(如何获得该值取决于应用程序)。 也可以使用<code>MessageId.earliest</code>指向关于MessageId主题的最早可用消息。<code>MessageId.latest</code>指向最近可用的消息。一般通过Reader进行消息的重放.</p>`,30),e=[o];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const F=s(p,[["render",c]]);export{g as __pageData,F as default};
